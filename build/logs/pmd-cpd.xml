<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
  <duplication lines="86" tokens="171">
    <file path="/home/feighen/workspace/ussd/src/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/PropertyRead.php" line="31"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/PropertyWrite.php" line="31"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/Property.php" line="31"/>
    <codefragment>    private $type;

    /** @var string */
    protected $variableName = '';

    /**
     * @param string      $variableName
     * @param Type        $type
     * @param Description $description
     */
    public function __construct($variableName, Type $type = null, Description $description = null)
    {
        Assert::string($variableName);

        $this-&gt;variableName = $variableName;
        $this-&gt;type = $type;
        $this-&gt;description = $description;
    }

    /**
     * {@inheritdoc}
     */
    public static function create(
        $body,
        TypeResolver $typeResolver = null,
        DescriptionFactory $descriptionFactory = null,
        TypeContext $context = null
    ) {
        Assert::stringNotEmpty($body);
        Assert::allNotNull([$typeResolver, $descriptionFactory]);

        $parts = preg_split('/(\s+)/Su', $body, 3, PREG_SPLIT_DELIM_CAPTURE);
        $type = null;
        $variableName = '';

        // if the first item that is encountered is not a variable; it is a type
        if (isset($parts[0]) &amp;&amp; (strlen($parts[0]) &gt; 0) &amp;&amp; ($parts[0][0] !== '$')) {
            $type = $typeResolver-&gt;resolve(array_shift($parts), $context);
            array_shift($parts);
        }

        // if the next item starts with a $ or ...$ it must be the variable name
        if (isset($parts[0]) &amp;&amp; (strlen($parts[0]) &gt; 0) &amp;&amp; ($parts[0][0] === '$')) {
            $variableName = array_shift($parts);
            array_shift($parts);

            if (substr($variableName, 0, 1) === '$') {
                $variableName = substr($variableName, 1);
            }
        }

        $description = $descriptionFactory-&gt;create(implode('', $parts), $context);

        return new static($variableName, $type, $description);
    }

    /**
     * Returns the variable's name.
     *
     * @return string
     */
    public function getVariableName()
    {
        return $this-&gt;variableName;
    }

    /**
     * Returns the variable's type or null if unknown.
     *
     * @return Type|null
     */
    public function getType()
    {
        return $this-&gt;type;
    }

    /**
     * Returns a string representation for this tag.
     *
     * @return string
     */
    public function __toString()
    {
        return ($this-&gt;type ? $this-&gt;type . ' ' : '')
        . '$' . $this-&gt;variableName
        . ($this-&gt;description ? ' ' . $this-&gt;description : '');
</codefragment>
  </duplication>
  <duplication lines="62" tokens="98">
    <file path="/home/feighen/workspace/ussd/src/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/Version.php" line="31"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/Since.php" line="31"/>
    <codefragment>    const REGEX_VECTOR = '(?:
        # Normal release vectors.
        \d\S*
        |
        # VCS version vectors. Per PHPCS, they are expected to
        # follow the form of the VCS name, followed by ":", followed
        # by the version vector itself.
        # By convention, popular VCSes like CVS, SVN and GIT use "$"
        # around the actual version vector.
        [^\s\:]+\:\s*\$[^\$]+\$
    )';

    /** @var string The version vector. */
    private $version = '';

    public function __construct($version = null, Description $description = null)
    {
        Assert::nullOrStringNotEmpty($version);

        $this-&gt;version = $version;
        $this-&gt;description = $description;
    }

    /**
     * @return static
     */
    public static function create($body, DescriptionFactory $descriptionFactory = null, TypeContext $context = null)
    {
        Assert::nullOrString($body);
        if (empty($body)) {
            return new static();
        }

        $matches = [];
        if (!preg_match('/^(' . self::REGEX_VECTOR . ')\s*(.+)?$/sux', $body, $matches)) {
            return null;
        }

        return new static(
            $matches[1],
            $descriptionFactory-&gt;create(isset($matches[2]) ? $matches[2] : '', $context)
        );
    }

    /**
     * Gets the version section of the tag.
     *
     * @return string
     */
    public function getVersion()
    {
        return $this-&gt;version;
    }

    /**
     * Returns a string representation for this tag.
     *
     * @return string
     */
    public function __toString()
    {
        return $this-&gt;version . ($this-&gt;description ? ' ' . $this-&gt;description-&gt;render() : '');
</codefragment>
  </duplication>
  <duplication lines="84" tokens="159">
    <file path="/home/feighen/workspace/ussd/src/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/PropertyRead.php" line="31"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/Var_.php" line="31"/>
    <codefragment>    private $type;

    /** @var string */
    protected $variableName = '';

    /**
     * @param string      $variableName
     * @param Type        $type
     * @param Description $description
     */
    public function __construct($variableName, Type $type = null, Description $description = null)
    {
        Assert::string($variableName);

        $this-&gt;variableName = $variableName;
        $this-&gt;type = $type;
        $this-&gt;description = $description;
    }

    /**
     * {@inheritdoc}
     */
    public static function create(
        $body,
        TypeResolver $typeResolver = null,
        DescriptionFactory $descriptionFactory = null,
        TypeContext $context = null
    ) {
        Assert::stringNotEmpty($body);
        Assert::allNotNull([$typeResolver, $descriptionFactory]);

        $parts = preg_split('/(\s+)/Su', $body, 3, PREG_SPLIT_DELIM_CAPTURE);
        $type = null;
        $variableName = '';

        // if the first item that is encountered is not a variable; it is a type
        if (isset($parts[0]) &amp;&amp; (strlen($parts[0]) &gt; 0) &amp;&amp; ($parts[0][0] !== '$')) {
            $type = $typeResolver-&gt;resolve(array_shift($parts), $context);
            array_shift($parts);
        }

        // if the next item starts with a $ or ...$ it must be the variable name
        if (isset($parts[0]) &amp;&amp; (strlen($parts[0]) &gt; 0) &amp;&amp; ($parts[0][0] === '$')) {
            $variableName = array_shift($parts);
            array_shift($parts);

            if (substr($variableName, 0, 1) === '$') {
                $variableName = substr($variableName, 1);
            }
        }

        $description = $descriptionFactory-&gt;create(implode('', $parts), $context);

        return new static($variableName, $type, $description);
    }

    /**
     * Returns the variable's name.
     *
     * @return string
     */
    public function getVariableName()
    {
        return $this-&gt;variableName;
    }

    /**
     * Returns the variable's type or null if unknown.
     *
     * @return Type|null
     */
    public function getType()
    {
        return $this-&gt;type;
    }

    /**
     * Returns a string representation for this tag.
     *
     * @return string
     */
    public function __toString()
    {
        return ($this-&gt;type ? $this-&gt;type . ' ' : '')
</codefragment>
  </duplication>
  <duplication lines="41" tokens="91">
    <file path="/home/feighen/workspace/ussd/src/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/Throws.php" line="30"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/Return_.php" line="30"/>
    <codefragment>    private $type;

    public function __construct(Type $type, Description $description = null)
    {
        $this-&gt;type        = $type;
        $this-&gt;description = $description;
    }

    /**
     * {@inheritdoc}
     */
    public static function create(
        $body,
        TypeResolver $typeResolver = null,
        DescriptionFactory $descriptionFactory = null,
        TypeContext $context = null
    ) {
        Assert::string($body);
        Assert::allNotNull([$typeResolver, $descriptionFactory]);

        $parts = preg_split('/\s+/Su', $body, 2);

        $type        = $typeResolver-&gt;resolve(isset($parts[0]) ? $parts[0] : '', $context);
        $description = $descriptionFactory-&gt;create(isset($parts[1]) ? $parts[1] : '', $context);

        return new static($type, $description);
    }

    /**
     * Returns the type section of the variable.
     *
     * @return Type
     */
    public function getType()
    {
        return $this-&gt;type;
    }

    public function __toString()
    {
        return $this-&gt;type . ' ' . $this-&gt;description;
</codefragment>
  </duplication>
  <duplication lines="109" tokens="218">
    <file path="/home/feighen/workspace/ussd/src/vendor/sebastian/diff/src/Output/StrictUnifiedDiffOutputBuilder.php" line="117"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/sebastian/diff/src/Output/UnifiedDiffOutputBuilder.php" line="67"/>
    <codefragment>        $diff = \stream_get_contents($buffer, -1, 0);

        \fclose($buffer);

        // If the last char is not a linebreak: add it.
        // This might happen when both the `from` and `to` do not have a trailing linebreak
        $last = \substr($diff, -1);

        return "\n" !== $last &amp;&amp; "\r" !== $last
            ? $diff . "\n"
            : $diff
        ;
    }

    private function writeDiffHunks($output, array $diff): void
    {
        // detect "No newline at end of file" and insert into `$diff` if needed

        $upperLimit = \count($diff);

        if (0 === $diff[$upperLimit - 1][1]) {
            $lc = \substr($diff[$upperLimit - 1][0], -1);

            if ("\n" !== $lc) {
                \array_splice($diff, $upperLimit, 0, [["\n\\ No newline at end of file\n", Differ::NO_LINE_END_EOF_WARNING]]);
            }
        } else {
            // search back for the last `+` and `-` line,
            // check if has trailing linebreak, else add under it warning under it
            $toFind = [1 =&gt; true, 2 =&gt; true];

            for ($i = $upperLimit - 1; $i &gt;= 0; --$i) {
                if (isset($toFind[$diff[$i][1]])) {
                    unset($toFind[$diff[$i][1]]);
                    $lc = \substr($diff[$i][0], -1);

                    if ("\n" !== $lc) {
                        \array_splice($diff, $i + 1, 0, [["\n\\ No newline at end of file\n", Differ::NO_LINE_END_EOF_WARNING]]);
                    }

                    if (!\count($toFind)) {
                        break;
                    }
                }
            }
        }

        // write hunks to output buffer

        $cutOff      = \max($this-&gt;commonLineThreshold, $this-&gt;contextLines);
        $hunkCapture = false;
        $sameCount   = $toRange = $fromRange = 0;
        $toStart     = $fromStart = 1;

        foreach ($diff as $i =&gt; $entry) {
            if (0 === $entry[1]) { // same
                if (false === $hunkCapture) {
                    ++$fromStart;
                    ++$toStart;

                    continue;
                }

                ++$sameCount;
                ++$toRange;
                ++$fromRange;

                if ($sameCount === $cutOff) {
                    $contextStartOffset = ($hunkCapture - $this-&gt;contextLines) &lt; 0
                        ? $hunkCapture
                        : $this-&gt;contextLines
                    ;

                    // note: $contextEndOffset = $this-&gt;contextLines;
                    //
                    // because we never go beyond the end of the diff.
                    // with the cutoff/contextlines here the follow is never true;
                    //
                    // if ($i - $cutOff + $this-&gt;contextLines + 1 &gt; \count($diff)) {
                    //    $contextEndOffset = count($diff) - 1;
                    // }
                    //
                    // ; that would be true for a trailing incomplete hunk case which is dealt with after this loop

                    $this-&gt;writeHunk(
                        $diff,
                        $hunkCapture - $contextStartOffset,
                        $i - $cutOff + $this-&gt;contextLines + 1,
                        $fromStart - $contextStartOffset,
                        $fromRange - $cutOff + $contextStartOffset + $this-&gt;contextLines,
                        $toStart - $contextStartOffset,
                        $toRange - $cutOff + $contextStartOffset + $this-&gt;contextLines,
                        $output
                    );

                    $fromStart += $fromRange;
                    $toStart += $toRange;

                    $hunkCapture = false;
                    $sameCount   = $toRange = $fromRange = 0;
                }

                continue;
            }

            $sameCount = 0;

            if ($entry[1] === Differ::NO_LINE_END_EOF_WARNING) {
                continue;
</codefragment>
  </duplication>
  <duplication lines="54" tokens="91">
    <file path="/home/feighen/workspace/ussd/src/vendor/sebastian/diff/src/Output/StrictUnifiedDiffOutputBuilder.php" line="230"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/sebastian/diff/src/Output/UnifiedDiffOutputBuilder.php" line="178"/>
    <codefragment>            if (false === $hunkCapture) {
                $hunkCapture = $i;
            }

            if (Differ::ADDED === $entry[1]) { // added
                ++$toRange;
            }

            if (Differ::REMOVED === $entry[1]) { // removed
                ++$fromRange;
            }
        }

        if (false === $hunkCapture) {
            return;
        }

        // we end here when cutoff (commonLineThreshold) was not reached, but we where capturing a hunk,
        // do not render hunk till end automatically because the number of context lines might be less than the commonLineThreshold

        $contextStartOffset = $hunkCapture - $this-&gt;contextLines &lt; 0
            ? $hunkCapture
            : $this-&gt;contextLines
        ;

        // prevent trying to write out more common lines than there are in the diff _and_
        // do not write more than configured through the context lines
        $contextEndOffset = \min($sameCount, $this-&gt;contextLines);

        $fromRange -= $sameCount;
        $toRange -= $sameCount;

        $this-&gt;writeHunk(
            $diff,
            $hunkCapture - $contextStartOffset,
            $i - $sameCount + $contextEndOffset + 1,
            $fromStart - $contextStartOffset,
            $fromRange + $contextStartOffset + $contextEndOffset,
            $toStart - $contextStartOffset,
            $toRange + $contextStartOffset + $contextEndOffset,
            $output
        );
    }

    private function writeHunk(
        array $diff,
        int $diffStartIndex,
        int $diffEndIndex,
        int $fromStart,
        int $fromRange,
        int $toStart,
        int $toRange,
        $output
    ): void {
</codefragment>
  </duplication>
  <duplication lines="54" tokens="84">
    <file path="/home/feighen/workspace/ussd/src/vendor/sebastian/comparator/tests/ObjectComparatorTest.php" line="98"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/sebastian/comparator/tests/MockObjectComparatorTest.php" line="114"/>
    <codefragment>            [new Struct(2.3), new Struct(4.2), $equalMessage, 0.5]
        ];
    }

    /**
     * @covers       ::accepts
     * @dataProvider acceptsSucceedsProvider
     */
    public function testAcceptsSucceeds($expected, $actual)
    {
        $this-&gt;assertTrue(
          $this-&gt;comparator-&gt;accepts($expected, $actual)
        );
    }

    /**
     * @covers       ::accepts
     * @dataProvider acceptsFailsProvider
     */
    public function testAcceptsFails($expected, $actual)
    {
        $this-&gt;assertFalse(
          $this-&gt;comparator-&gt;accepts($expected, $actual)
        );
    }

    /**
     * @covers       ::assertEquals
     * @dataProvider assertEqualsSucceedsProvider
     */
    public function testAssertEqualsSucceeds($expected, $actual, $delta = 0.0)
    {
        $exception = null;

        try {
            $this-&gt;comparator-&gt;assertEquals($expected, $actual, $delta);
        } catch (ComparisonFailure $exception) {
        }

        $this-&gt;assertNull($exception, 'Unexpected ComparisonFailure');
    }

    /**
     * @covers       ::assertEquals
     * @dataProvider assertEqualsFailsProvider
     */
    public function testAssertEqualsFails($expected, $actual, $message, $delta = 0.0)
    {
        $this-&gt;expectException(ComparisonFailure::class);
        $this-&gt;expectExceptionMessage($message);

        $this-&gt;comparator-&gt;assertEquals($expected, $actual, $delta);
    }
}
</codefragment>
  </duplication>
  <duplication lines="44" tokens="81">
    <file path="/home/feighen/workspace/ussd/src/vendor/sebastian/comparator/tests/NumericComparatorTest.php" line="79"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/sebastian/comparator/tests/DoubleComparatorTest.php" line="91"/>
    <codefragment>    public function testAcceptsSucceeds($expected, $actual)
    {
        $this-&gt;assertTrue(
          $this-&gt;comparator-&gt;accepts($expected, $actual)
        );
    }

    /**
     * @covers       ::accepts
     * @dataProvider acceptsFailsProvider
     */
    public function testAcceptsFails($expected, $actual)
    {
        $this-&gt;assertFalse(
          $this-&gt;comparator-&gt;accepts($expected, $actual)
        );
    }

    /**
     * @covers       ::assertEquals
     * @dataProvider assertEqualsSucceedsProvider
     */
    public function testAssertEqualsSucceeds($expected, $actual, $delta = 0.0)
    {
        $exception = null;

        try {
            $this-&gt;comparator-&gt;assertEquals($expected, $actual, $delta);
        } catch (ComparisonFailure $exception) {
        }

        $this-&gt;assertNull($exception, 'Unexpected ComparisonFailure');
    }

    /**
     * @covers       ::assertEquals
     * @dataProvider assertEqualsFailsProvider
     */
    public function testAssertEqualsFails($expected, $actual, $delta = 0.0)
    {
        $this-&gt;expectException(ComparisonFailure::class);
        $this-&gt;expectExceptionMessage('matches expected');

        $this-&gt;comparator-&gt;assertEquals($expected, $actual, $delta);
</codefragment>
  </duplication>
  <duplication lines="59" tokens="136">
    <file path="/home/feighen/workspace/ussd/src/vendor/sebastian/phpcpd/tests/_files/Math.php" line="75"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/sebastian/phpcpd/tests/_files/Math.php" line="139"/>
    <codefragment>    public function div($v1, $v2)
    {
        $v3 = $v1 / ($v2 + $v1);
        if ($v3 &gt; 14)
        {
            $v4 = 0;
            for ($i = 0; $i &lt; $v3; $i++)
            {
                $v4 += ($v2 * $i);
            }
        }
        $v5 = ($v4 &lt; $v3 ? ($v3 - $v4) : ($v4 - $v3));

        $v6 = ($v1 * $v2 * $v3 * $v4 * $v5);

        $d = array($v1, $v2, $v3, $v4, $v5, $v6);

        $v7 = 1;
        for ($i = 0; $i &lt; $v6; $i++)
        {
            shuffle( $d );
            $v7 = $v7 + $i * end($d);
        }

        $v8 = $v7;
        foreach ( $d as $x )
        {
            $v8 *= $x;
        }

        $v3 = $v1 / ($v2 + $v1);
        if ($v3 &gt; 14)
        {
            $v4 = 0;
            for ($i = 0; $i &lt; $v3; $i++)
            {
                $v4 += ($v2 * $i);
            }
        }
        $v5 = ($v4 &lt; $v3 ? ($v3 - $v4) : ($v4 - $v3));

        $v6 = ($v1 * $v2 * $v3 * $v4 * $v5);

        $d = array($v1, $v2, $v3, $v4, $v5, $v6);

        $v7 = 1;
        for ($i = 0; $i &lt; $v6; $i++)
        {
            shuffle( $d );
            $v7 = $v7 + $i * end($d);
        }

        $v8 = $v7;
        foreach ( $d as $x )
        {
            $v8 *= $x;
        }

        return $v8;
</codefragment>
  </duplication>
  <duplication lines="105" tokens="120">
    <file path="/home/feighen/workspace/ussd/src/vendor/psr/log/Psr/Log/AbstractLogger.php" line="22"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/psr/log/Psr/Log/LoggerTrait.php" line="23"/>
    <codefragment>    public function emergency($message, array $context = array())
    {
        $this-&gt;log(LogLevel::EMERGENCY, $message, $context);
    }

    /**
     * Action must be taken immediately.
     *
     * Example: Entire website down, database unavailable, etc. This should
     * trigger the SMS alerts and wake you up.
     *
     * @param string $message
     * @param array  $context
     *
     * @return void
     */
    public function alert($message, array $context = array())
    {
        $this-&gt;log(LogLevel::ALERT, $message, $context);
    }

    /**
     * Critical conditions.
     *
     * Example: Application component unavailable, unexpected exception.
     *
     * @param string $message
     * @param array  $context
     *
     * @return void
     */
    public function critical($message, array $context = array())
    {
        $this-&gt;log(LogLevel::CRITICAL, $message, $context);
    }

    /**
     * Runtime errors that do not require immediate action but should typically
     * be logged and monitored.
     *
     * @param string $message
     * @param array  $context
     *
     * @return void
     */
    public function error($message, array $context = array())
    {
        $this-&gt;log(LogLevel::ERROR, $message, $context);
    }

    /**
     * Exceptional occurrences that are not errors.
     *
     * Example: Use of deprecated APIs, poor use of an API, undesirable things
     * that are not necessarily wrong.
     *
     * @param string $message
     * @param array  $context
     *
     * @return void
     */
    public function warning($message, array $context = array())
    {
        $this-&gt;log(LogLevel::WARNING, $message, $context);
    }

    /**
     * Normal but significant events.
     *
     * @param string $message
     * @param array  $context
     *
     * @return void
     */
    public function notice($message, array $context = array())
    {
        $this-&gt;log(LogLevel::NOTICE, $message, $context);
    }

    /**
     * Interesting events.
     *
     * Example: User logs in, SQL logs.
     *
     * @param string $message
     * @param array  $context
     *
     * @return void
     */
    public function info($message, array $context = array())
    {
        $this-&gt;log(LogLevel::INFO, $message, $context);
    }

    /**
     * Detailed debug information.
     *
     * @param string $message
     * @param array  $context
     *
     * @return void
     */
    public function debug($message, array $context = array())
    {
        $this-&gt;log(LogLevel::DEBUG, $message, $context);
</codefragment>
  </duplication>
  <duplication lines="30" tokens="83">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/Base64ContentEncoderAcceptanceTest.php" line="16"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/PlainContentEncoderAcceptanceTest.php" line="48"/>
    <codefragment>        $sampleFp = opendir($this-&gt;samplesDir);
        while (false !== $encodingDir = readdir($sampleFp)) {
            if (substr($encodingDir, 0, 1) == '.') {
                continue;
            }

            $sampleDir = $this-&gt;samplesDir.'/'.$encodingDir;

            if (is_dir($sampleDir)) {
                $fileFp = opendir($sampleDir);
                while (false !== $sampleFile = readdir($fileFp)) {
                    if (substr($sampleFile, 0, 1) == '.') {
                        continue;
                    }

                    $text = file_get_contents($sampleDir.'/'.$sampleFile);

                    $os = new Swift_ByteStream_ArrayByteStream();
                    $os-&gt;write($text);

                    $is = new Swift_ByteStream_ArrayByteStream();

                    $this-&gt;encoder-&gt;encodeByteStream($os, $is);

                    $encoded = '';
                    while (false !== $bytes = $is-&gt;read(8192)) {
                        $encoded .= $bytes;
                    }

                    $this-&gt;assertEquals(
</codefragment>
  </duplication>
  <duplication lines="31" tokens="86">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/Base64ContentEncoderAcceptanceTest.php" line="14"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/NativeQpContentEncoderAcceptanceTest.php" line="18"/>
    <codefragment>    public function testEncodingAndDecodingSamples()
    {
        $sampleFp = opendir($this-&gt;samplesDir);
        while (false !== $encodingDir = readdir($sampleFp)) {
            if (substr($encodingDir, 0, 1) == '.') {
                continue;
            }

            $sampleDir = $this-&gt;samplesDir.'/'.$encodingDir;

            if (is_dir($sampleDir)) {
                $fileFp = opendir($sampleDir);
                while (false !== $sampleFile = readdir($fileFp)) {
                    if (substr($sampleFile, 0, 1) == '.') {
                        continue;
                    }

                    $text = file_get_contents($sampleDir.'/'.$sampleFile);

                    $os = new Swift_ByteStream_ArrayByteStream();
                    $os-&gt;write($text);

                    $is = new Swift_ByteStream_ArrayByteStream();

                    $this-&gt;encoder-&gt;encodeByteStream($os, $is);

                    $encoded = '';
                    while (false !== $bytes = $is-&gt;read(8192)) {
                        $encoded .= $bytes;
                    }

</codefragment>
  </duplication>
  <duplication lines="23" tokens="76">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/SimpleMessageAcceptanceTest.php" line="658"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/SimpleMessageAcceptanceTest.php" line="720"/>
    <codefragment>        $message = $this-&gt;createMessage();
        $message-&gt;setReturnPath('chris@w3style.co.uk');
        $message-&gt;setSubject('just a test subject');
        $message-&gt;setFrom(array(
            'chris.corbyn@swiftmailer.org' =&gt; 'Chris Corbyn', ));

        $id = $message-&gt;getId();
        $date = preg_quote($message-&gt;getDate()-&gt;format('r'), '~');
        $boundary = $message-&gt;getBoundary();

        $part = $this-&gt;createMimePart();
        $part-&gt;setContentType('text/plain');
        $part-&gt;setCharset('iso-8859-1');
        $part-&gt;setBody('foo');

        $message-&gt;attach($part);

        $attachment = $this-&gt;createAttachment();
        $attachment-&gt;setContentType('application/pdf');
        $attachment-&gt;setFilename('foo.pdf');
        $attachment-&gt;setBody('&lt;pdf data&gt;');

        $message-&gt;attach($attachment);
</codefragment>
  </duplication>
  <duplication lines="32" tokens="100">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/SimpleMessageAcceptanceTest.php" line="658"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/SimpleMessageAcceptanceTest.php" line="883"/>
    <codefragment>        $message = $this-&gt;createMessage();
        $message-&gt;setReturnPath('chris@w3style.co.uk');
        $message-&gt;setSubject('just a test subject');
        $message-&gt;setFrom(array(
            'chris.corbyn@swiftmailer.org' =&gt; 'Chris Corbyn', ));

        $id = $message-&gt;getId();
        $date = preg_quote($message-&gt;getDate()-&gt;format('r'), '~');
        $boundary = $message-&gt;getBoundary();

        $part = $this-&gt;createMimePart();
        $part-&gt;setContentType('text/plain');
        $part-&gt;setCharset('iso-8859-1');
        $part-&gt;setBody('foo');

        $message-&gt;attach($part);

        $attachment = $this-&gt;createAttachment();
        $attachment-&gt;setContentType('application/pdf');
        $attachment-&gt;setFilename('foo.pdf');
        $attachment-&gt;setBody('&lt;pdf data&gt;');

        $message-&gt;attach($attachment);

        $this-&gt;assertRegExp(
            '~^'.
            'Return-Path: &lt;chris@w3style.co.uk&gt;'."\r\n".
            'Message-ID: &lt;'.$id.'&gt;'."\r\n".
            'Date: '.$date."\r\n".
            'Subject: just a test subject'."\r\n".
            'From: Chris Corbyn &lt;chris.corbyn@swiftmailer.org&gt;'."\r\n".
            'MIME-Version: 1.0'."\r\n".
</codefragment>
  </duplication>
  <duplication lines="23" tokens="71">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/SimpleMessageAcceptanceTest.php" line="605"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/SimpleMessageAcceptanceTest.php" line="958"/>
    <codefragment>        $message = $this-&gt;createMessage();
        $message-&gt;setReturnPath('chris@w3style.co.uk');
        $message-&gt;setSubject('just a test subject');
        $message-&gt;setFrom(array(
            'chris.corbyn@swiftmailer.org' =&gt; 'Chris Corbyn', ));

        $id = $message-&gt;getId();
        $date = $message-&gt;getDate();
        $boundary = $message-&gt;getBoundary();

        $part1 = $this-&gt;createMimePart();
        $part1-&gt;setContentType('text/plain');
        $part1-&gt;setCharset('iso-8859-1');
        $part1-&gt;setBody('foo');

        $message-&gt;attach($part1);

        $part2 = $this-&gt;createMimePart();
        $part2-&gt;setContentType('text/html');
        $part2-&gt;setCharset('iso-8859-1');
        $part2-&gt;setBody('test &lt;b&gt;foo&lt;/b&gt;');

        $message-&gt;attach($part2);
</codefragment>
  </duplication>
  <duplication lines="46" tokens="109">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/SimpleMessageAcceptanceTest.php" line="611"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/SimpleMessageAcceptanceTest.php" line="1010"/>
    <codefragment>        $id = $message-&gt;getId();
        $date = $message-&gt;getDate();
        $boundary = $message-&gt;getBoundary();

        $part1 = $this-&gt;createMimePart();
        $part1-&gt;setContentType('text/plain');
        $part1-&gt;setCharset('iso-8859-1');
        $part1-&gt;setBody('foo');

        $message-&gt;attach($part1);

        $part2 = $this-&gt;createMimePart();
        $part2-&gt;setContentType('text/html');
        $part2-&gt;setCharset('iso-8859-1');
        $part2-&gt;setBody('test &lt;b&gt;foo&lt;/b&gt;');

        $message-&gt;attach($part2);

        $this-&gt;assertEquals(
            'Return-Path: &lt;chris@w3style.co.uk&gt;'."\r\n".
            'Message-ID: &lt;'.$id.'&gt;'."\r\n".
            'Date: '.$date-&gt;format('r')."\r\n".
            'Subject: just a test subject'."\r\n".
            'From: Chris Corbyn &lt;chris.corbyn@swiftmailer.org&gt;'."\r\n".
            'MIME-Version: 1.0'."\r\n".
            'Content-Type: multipart/alternative;'."\r\n".
            ' boundary="'.$boundary.'"'."\r\n".
            "\r\n\r\n".
            '--'.$boundary."\r\n".
            'Content-Type: text/plain; charset=iso-8859-1'."\r\n".
            'Content-Transfer-Encoding: quoted-printable'."\r\n".
            "\r\n".
            'foo'.
            "\r\n\r\n".
            '--'.$boundary."\r\n".
            'Content-Type: text/html; charset=iso-8859-1'."\r\n".
            'Content-Transfer-Encoding: quoted-printable'."\r\n".
            "\r\n".
            'test &lt;b&gt;foo&lt;/b&gt;'.
            "\r\n\r\n".
            '--'.$boundary.'--'."\r\n",
            $message-&gt;toString()
            );
    }

    public function testAttachmentsBeingAttached()
</codefragment>
  </duplication>
  <duplication lines="156" tokens="619">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/KeyCache/ArrayKeyCacheAcceptanceTest.php" line="16"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/KeyCache/DiskKeyCacheAcceptanceTest.php" line="16"/>
    <codefragment>    public function testStringDataCanBeSetAndFetched()
    {
        $this-&gt;cache-&gt;setString(
            $this-&gt;key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
            );
        $this-&gt;assertEquals('test', $this-&gt;cache-&gt;getString($this-&gt;key1, 'foo'));
    }

    public function testStringDataCanBeOverwritten()
    {
        $this-&gt;cache-&gt;setString(
            $this-&gt;key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
            );
        $this-&gt;cache-&gt;setString(
            $this-&gt;key1, 'foo', 'whatever', Swift_KeyCache::MODE_WRITE
            );
        $this-&gt;assertEquals('whatever', $this-&gt;cache-&gt;getString($this-&gt;key1, 'foo'));
    }

    public function testStringDataCanBeAppended()
    {
        $this-&gt;cache-&gt;setString(
            $this-&gt;key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
            );
        $this-&gt;cache-&gt;setString(
            $this-&gt;key1, 'foo', 'ing', Swift_KeyCache::MODE_APPEND
            );
        $this-&gt;assertEquals('testing', $this-&gt;cache-&gt;getString($this-&gt;key1, 'foo'));
    }

    public function testHasKeyReturnValue()
    {
        $this-&gt;assertFalse($this-&gt;cache-&gt;hasKey($this-&gt;key1, 'foo'));
        $this-&gt;cache-&gt;setString(
            $this-&gt;key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
            );
        $this-&gt;assertTrue($this-&gt;cache-&gt;hasKey($this-&gt;key1, 'foo'));
    }

    public function testNsKeyIsWellPartitioned()
    {
        $this-&gt;cache-&gt;setString(
            $this-&gt;key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
            );
        $this-&gt;cache-&gt;setString(
            $this-&gt;key2, 'foo', 'ing', Swift_KeyCache::MODE_WRITE
            );
        $this-&gt;assertEquals('test', $this-&gt;cache-&gt;getString($this-&gt;key1, 'foo'));
        $this-&gt;assertEquals('ing', $this-&gt;cache-&gt;getString($this-&gt;key2, 'foo'));
    }

    public function testItemKeyIsWellPartitioned()
    {
        $this-&gt;cache-&gt;setString(
            $this-&gt;key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
            );
        $this-&gt;cache-&gt;setString(
            $this-&gt;key1, 'bar', 'ing', Swift_KeyCache::MODE_WRITE
            );
        $this-&gt;assertEquals('test', $this-&gt;cache-&gt;getString($this-&gt;key1, 'foo'));
        $this-&gt;assertEquals('ing', $this-&gt;cache-&gt;getString($this-&gt;key1, 'bar'));
    }

    public function testByteStreamCanBeImported()
    {
        $os = new Swift_ByteStream_ArrayByteStream();
        $os-&gt;write('abcdef');

        $this-&gt;cache-&gt;importFromByteStream(
            $this-&gt;key1, 'foo', $os, Swift_KeyCache::MODE_WRITE
            );
        $this-&gt;assertEquals('abcdef', $this-&gt;cache-&gt;getString($this-&gt;key1, 'foo'));
    }

    public function testByteStreamCanBeAppended()
    {
        $os1 = new Swift_ByteStream_ArrayByteStream();
        $os1-&gt;write('abcdef');

        $os2 = new Swift_ByteStream_ArrayByteStream();
        $os2-&gt;write('xyzuvw');

        $this-&gt;cache-&gt;importFromByteStream(
            $this-&gt;key1, 'foo', $os1, Swift_KeyCache::MODE_APPEND
            );
        $this-&gt;cache-&gt;importFromByteStream(
            $this-&gt;key1, 'foo', $os2, Swift_KeyCache::MODE_APPEND
            );

        $this-&gt;assertEquals('abcdefxyzuvw', $this-&gt;cache-&gt;getString($this-&gt;key1, 'foo'));
    }

    public function testByteStreamAndStringCanBeAppended()
    {
        $this-&gt;cache-&gt;setString(
            $this-&gt;key1, 'foo', 'test', Swift_KeyCache::MODE_APPEND
            );

        $os = new Swift_ByteStream_ArrayByteStream();
        $os-&gt;write('abcdef');

        $this-&gt;cache-&gt;importFromByteStream(
            $this-&gt;key1, 'foo', $os, Swift_KeyCache::MODE_APPEND
            );
        $this-&gt;assertEquals('testabcdef', $this-&gt;cache-&gt;getString($this-&gt;key1, 'foo'));
    }

    public function testDataCanBeExportedToByteStream()
    {
        $this-&gt;cache-&gt;setString(
            $this-&gt;key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
            );

        $is = new Swift_ByteStream_ArrayByteStream();

        $this-&gt;cache-&gt;exportToByteStream($this-&gt;key1, 'foo', $is);

        $string = '';
        while (false !== $bytes = $is-&gt;read(8192)) {
            $string .= $bytes;
        }

        $this-&gt;assertEquals('test', $string);
    }

    public function testKeyCanBeCleared()
    {
        $this-&gt;cache-&gt;setString(
            $this-&gt;key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
            );
        $this-&gt;assertTrue($this-&gt;cache-&gt;hasKey($this-&gt;key1, 'foo'));
        $this-&gt;cache-&gt;clearKey($this-&gt;key1, 'foo');
        $this-&gt;assertFalse($this-&gt;cache-&gt;hasKey($this-&gt;key1, 'foo'));
    }

    public function testNsKeyCanBeCleared()
    {
        $this-&gt;cache-&gt;setString(
            $this-&gt;key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
            );
        $this-&gt;cache-&gt;setString(
            $this-&gt;key1, 'bar', 'xyz', Swift_KeyCache::MODE_WRITE
            );
        $this-&gt;assertTrue($this-&gt;cache-&gt;hasKey($this-&gt;key1, 'foo'));
        $this-&gt;assertTrue($this-&gt;cache-&gt;hasKey($this-&gt;key1, 'bar'));
        $this-&gt;cache-&gt;clearAll($this-&gt;key1);
        $this-&gt;assertFalse($this-&gt;cache-&gt;hasKey($this-&gt;key1, 'foo'));
        $this-&gt;assertFalse($this-&gt;cache-&gt;hasKey($this-&gt;key1, 'bar'));
    }

    public function testKeyCacheInputStream()
    {
        $is = $this-&gt;cache-&gt;getInputByteStream($this-&gt;key1, 'foo');
        $is-&gt;write('abc');
        $is-&gt;write('xyz');
        $this-&gt;assertEquals('abcxyz', $this-&gt;cache-&gt;getString($this-&gt;key1, 'foo'));
</codefragment>
  </duplication>
  <duplication lines="33" tokens="99">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/Base64ContentEncoderTest.php" line="147"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/Base64ContentEncoderTest.php" line="189"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/Base64ContentEncoderTest.php" line="232"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/Base64ContentEncoderTest.php" line="274"/>
    <codefragment>        $os = $this-&gt;createOutputByteStream();
        $is = $this-&gt;createInputByteStream();
        $collection = new Swift_StreamCollector();

        $is-&gt;shouldReceive('write')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing($collection);
        $os-&gt;shouldReceive('read')
           -&gt;once()
           -&gt;andReturn('abcdefghijkl'); //12
        $os-&gt;shouldReceive('read')
           -&gt;once()
           -&gt;andReturn('mnopqrstuvwx'); //24
        $os-&gt;shouldReceive('read')
           -&gt;once()
           -&gt;andReturn('yzabc1234567'); //36
        $os-&gt;shouldReceive('read')
           -&gt;once()
           -&gt;andReturn('890ABCDEFGHI'); //48
        $os-&gt;shouldReceive('read')
           -&gt;once()
           -&gt;andReturn('JKLMNOPQRSTU'); //60
        $os-&gt;shouldReceive('read')
           -&gt;once()
           -&gt;andReturn('VWXYZ1234567'); //72
        $os-&gt;shouldReceive('read')
           -&gt;once()
           -&gt;andReturn('abcdefghijkl'); //84
        $os-&gt;shouldReceive('read')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturn(false);

        $this-&gt;encoder-&gt;encodeByteStream($os, $is);
</codefragment>
  </duplication>
  <duplication lines="26" tokens="75">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/QpContentEncoderTest.php" line="40"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/QpContentEncoderTest.php" line="334"/>
    <codefragment>        foreach (array_merge(range(33, 60), range(62, 126)) as $ordinal) {
            $char = chr($ordinal);

            $os = $this-&gt;createOutputByteStream(true);
            $charStream = $this-&gt;createCharacterStream();
            $is = $this-&gt;createInputByteStream();
            $collection = new Swift_StreamCollector();

            $is-&gt;shouldReceive('write')
               -&gt;zeroOrMoreTimes()
               -&gt;andReturnUsing($collection);
            $charStream-&gt;shouldReceive('flushContents')
                       -&gt;once();
            $charStream-&gt;shouldReceive('importByteStream')
                       -&gt;once()
                       -&gt;with($os);
            $charStream-&gt;shouldReceive('readBytes')
                       -&gt;once()
                       -&gt;andReturn(array($ordinal));
            $charStream-&gt;shouldReceive('readBytes')
                       -&gt;zeroOrMoreTimes()
                       -&gt;andReturn(false);

            $encoder = new Swift_Mime_ContentEncoder_QpContentEncoder($charStream);
            $encoder-&gt;encodeByteStream($os, $is);
            $this-&gt;assertIdenticalBinary($char, $collection-&gt;content);
</codefragment>
  </duplication>
  <duplication lines="30" tokens="84">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/QpContentEncoderTest.php" line="40"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/QpContentEncoderTest.php" line="402"/>
    <codefragment>        foreach (array_merge(range(33, 60), range(62, 126)) as $ordinal) {
            $char = chr($ordinal);

            $os = $this-&gt;createOutputByteStream(true);
            $charStream = $this-&gt;createCharacterStream();
            $is = $this-&gt;createInputByteStream();
            $collection = new Swift_StreamCollector();

            $is-&gt;shouldReceive('write')
               -&gt;zeroOrMoreTimes()
               -&gt;andReturnUsing($collection);
            $charStream-&gt;shouldReceive('flushContents')
                       -&gt;once();
            $charStream-&gt;shouldReceive('importByteStream')
                       -&gt;once()
                       -&gt;with($os);
            $charStream-&gt;shouldReceive('readBytes')
                       -&gt;once()
                       -&gt;andReturn(array($ordinal));
            $charStream-&gt;shouldReceive('readBytes')
                       -&gt;zeroOrMoreTimes()
                       -&gt;andReturn(false);

            $encoder = new Swift_Mime_ContentEncoder_QpContentEncoder($charStream);
            $encoder-&gt;encodeByteStream($os, $is);
            $this-&gt;assertIdenticalBinary($char, $collection-&gt;content);
        }
    }

    public function testLinearWhiteSpaceAtLineEndingIsEncoded()
</codefragment>
  </duplication>
  <duplication lines="25" tokens="77">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/QpContentEncoderTest.php" line="270"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/QpContentEncoderTest.php" line="433"/>
    <codefragment>        $os = $this-&gt;createOutputByteStream(true);
        $charStream = $this-&gt;createCharacterStream();
        $is = $this-&gt;createInputByteStream();
        $collection = new Swift_StreamCollector();

        $is-&gt;shouldReceive('write')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing($collection);
        $charStream-&gt;shouldReceive('flushContents')
                   -&gt;once();
        $charStream-&gt;shouldReceive('importByteStream')
                   -&gt;once()
                   -&gt;with($os);

        for ($seq = 0; $seq &lt;= 140; ++$seq) {
            $charStream-&gt;shouldReceive('readBytes')
                       -&gt;once()
                       -&gt;andReturn(array(ord('a')));
        }
        $charStream-&gt;shouldReceive('readBytes')
                   -&gt;zeroOrMoreTimes()
                   -&gt;andReturn(false);

        $encoder = new Swift_Mime_ContentEncoder_QpContentEncoder($charStream);
        $encoder-&gt;encodeByteStream($os, $is);
</codefragment>
  </duplication>
  <duplication lines="23" tokens="101">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleHeaderSetTest.php" line="238"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleHeaderSetTest.php" line="270"/>
    <codefragment>        $header0 = $this-&gt;createHeader('Message-ID');
        $header1 = $this-&gt;createHeader('Message-ID');
        $header2 = $this-&gt;createHeader('Message-ID');
        $factory = $this-&gt;createFactory();
        $factory-&gt;expects($this-&gt;at(0))
                -&gt;method('createIdHeader')
                -&gt;with('Message-ID', 'some@id')
                -&gt;will($this-&gt;returnValue($header0));
        $factory-&gt;expects($this-&gt;at(1))
                -&gt;method('createIdHeader')
                -&gt;with('Message-ID', 'other@id')
                -&gt;will($this-&gt;returnValue($header1));
        $factory-&gt;expects($this-&gt;at(2))
                -&gt;method('createIdHeader')
                -&gt;with('Message-ID', 'more@id')
                -&gt;will($this-&gt;returnValue($header2));

        $set = $this-&gt;createSet($factory);
        $set-&gt;addIdHeader('Message-ID', 'some@id');
        $set-&gt;addIdHeader('Message-ID', 'other@id');
        $set-&gt;addIdHeader('Message-ID', 'more@id');
        $this-&gt;assertSame($header1, $set-&gt;get('Message-ID', 1));
    }
</codefragment>
  </duplication>
  <duplication lines="16" tokens="73">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleHeaderSetTest.php" line="349"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleHeaderSetTest.php" line="375"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleHeaderSetTest.php" line="411"/>
    <codefragment>        $header0 = $this-&gt;createHeader('Message-ID');
        $header1 = $this-&gt;createHeader('Message-ID');
        $factory = $this-&gt;createFactory();
        $factory-&gt;expects($this-&gt;at(0))
                -&gt;method('createIdHeader')
                -&gt;with('Message-ID', 'some@id')
                -&gt;will($this-&gt;returnValue($header0));
        $factory-&gt;expects($this-&gt;at(1))
                -&gt;method('createIdHeader')
                -&gt;with('Message-ID', 'other@id')
                -&gt;will($this-&gt;returnValue($header1));

        $set = $this-&gt;createSet($factory);
        $set-&gt;addIdHeader('Message-ID', 'some@id');
        $set-&gt;addIdHeader('Message-ID', 'other@id');
        $set-&gt;remove('Message-ID', 0);
</codefragment>
  </duplication>
  <duplication lines="23" tokens="97">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleHeaderSetTest.php" line="645"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleHeaderSetTest.php" line="672"/>
    <codefragment>        $subject = $this-&gt;createHeader('Subject', 'some text');
        $xHeader = $this-&gt;createHeader('X-Header', 'some text');
        $factory = $this-&gt;createFactory();
        $factory-&gt;expects($this-&gt;at(0))
                -&gt;method('createTextHeader')
                -&gt;with('Subject', 'some text')
                -&gt;will($this-&gt;returnValue($subject));
        $factory-&gt;expects($this-&gt;at(1))
                -&gt;method('createTextHeader')
                -&gt;with('X-Header', 'some text')
                -&gt;will($this-&gt;returnValue($xHeader));
        $subject-&gt;expects($this-&gt;once())
                -&gt;method('setCharset')
                -&gt;with('utf-8');
        $xHeader-&gt;expects($this-&gt;once())
                -&gt;method('setCharset')
                -&gt;with('utf-8');

        $set = $this-&gt;createSet($factory);
        $set-&gt;addTextHeader('Subject', 'some text');
        $set-&gt;addTextHeader('X-Header', 'some text');

        $set-&gt;setCharset('utf-8');
</codefragment>
  </duplication>
  <duplication lines="9" tokens="77">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/ReporterPluginTest.php" line="43"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/ReporterPluginTest.php" line="61"/>
    <codefragment>        $message-&gt;shouldReceive('getCc')-&gt;zeroOrMoreTimes()-&gt;andReturn(array('zip@button' =&gt; 'Zip', 'test@test.com' =&gt; 'Test'));
        $evt-&gt;shouldReceive('getMessage')-&gt;zeroOrMoreTimes()-&gt;andReturn($message);
        $evt-&gt;shouldReceive('getFailedRecipients')-&gt;zeroOrMoreTimes()-&gt;andReturn(array('zip@button'));
        $reporter-&gt;shouldReceive('notify')-&gt;once()-&gt;with($message, 'foo@bar.tld', Swift_Plugins_Reporter::RESULT_PASS);
        $reporter-&gt;shouldReceive('notify')-&gt;once()-&gt;with($message, 'zip@button', Swift_Plugins_Reporter::RESULT_FAIL);
        $reporter-&gt;shouldReceive('notify')-&gt;once()-&gt;with($message, 'test@test.com', Swift_Plugins_Reporter::RESULT_PASS);

        $plugin = new Swift_Plugins_ReporterPlugin($reporter);
        $plugin-&gt;sendPerformed($evt);
</codefragment>
  </duplication>
  <duplication lines="24" tokens="70">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/RedirectingPluginTest.php" line="22"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/RedirectingPluginTest.php" line="55"/>
    <codefragment>            -&gt;setCc($cc = array(
                'fabien-cc@example.com' =&gt; 'Fabien (Cc)',
                'chris-cc@example.com' =&gt; 'Chris (Cc)',
            ))
            -&gt;setBcc($bcc = array(
                'fabien-bcc@example.com' =&gt; 'Fabien (Bcc)',
                'chris-bcc@example.com' =&gt; 'Chris (Bcc)',
            ))
            -&gt;setBody('...')
        ;

        $plugin = new Swift_Plugins_RedirectingPlugin('god@example.com');

        $evt = $this-&gt;createSendEvent($message);

        $plugin-&gt;beforeSendPerformed($evt);

        $this-&gt;assertEquals($message-&gt;getTo(), array('god@example.com' =&gt; ''));
        $this-&gt;assertEquals($message-&gt;getCc(), array());
        $this-&gt;assertEquals($message-&gt;getBcc(), array());

        $plugin-&gt;sendPerformed($evt);

        $this-&gt;assertEquals($message-&gt;getTo(), $to);
</codefragment>
  </duplication>
  <duplication lines="10" tokens="98">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/QpContentEncoderTest.php" line="222"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Encoder/QpEncoderTest.php" line="169"/>
    <codefragment>        $charStream-&gt;shouldReceive('readBytes')
                   -&gt;once()
                   -&gt;andReturn(array(ord('a')));
        $charStream-&gt;shouldReceive('readBytes')
                   -&gt;once()
                   -&gt;andReturn(array(0x0D));
        $charStream-&gt;shouldReceive('readBytes')
                   -&gt;once()
                   -&gt;andReturn(array(0x0A));
        $charStream-&gt;shouldReceive('readBytes')
</codefragment>
  </duplication>
  <duplication lines="26" tokens="70">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Encoder/Rfc2231EncoderTest.php" line="21"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Encoder/Rfc2231EncoderTest.php" line="52"/>
    <codefragment>        foreach (range(0x00, 0x7F) as $octet) {
            $char = pack('C', $octet);
            $string .= $char;
            $charStream-&gt;shouldReceive('read')
                       -&gt;once()
                       -&gt;andReturn($char);
        }

        $charStream-&gt;shouldReceive('flushContents')
                    -&gt;once();
        $charStream-&gt;shouldReceive('importString')
                    -&gt;once()
                    -&gt;with($string);
        $charStream-&gt;shouldReceive('read')
                    -&gt;atLeast()-&gt;times(1)
                    -&gt;andReturn(false);

        $encoder = new Swift_Encoder_Rfc2231Encoder($charStream);
        $encoded = $encoder-&gt;encodeString($string);

        foreach (explode("\r\n", $encoded) as $line) {
            $this-&gt;assertRegExp($this-&gt;rfc2045Token, $line,
                '%s: Encoder should always return a valid RFC 2045 token.');
        }
    }

</codefragment>
  </duplication>
  <duplication lines="12" tokens="74">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php" line="7"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php" line="35"/>
    <codefragment>        $reader = $this-&gt;getReader();
        $factory = $this-&gt;getFactory($reader);

        $stream = new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8');

        $reader-&gt;shouldReceive('getInitialByteSize')
               -&gt;zeroOrMoreTimes()
               -&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD1), 1)-&gt;andReturn(1);
</codefragment>
  </duplication>
  <duplication lines="7" tokens="82">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php" line="14"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php" line="43"/>
    <codefragment>               -&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD1), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
</codefragment>
  </duplication>
  <duplication lines="27" tokens="161">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php" line="7"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php" line="66"/>
    <codefragment>        $reader = $this-&gt;getReader();
        $factory = $this-&gt;getFactory($reader);

        $stream = new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8');

        $reader-&gt;shouldReceive('getInitialByteSize')
               -&gt;zeroOrMoreTimes()
               -&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD1), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);

        $stream-&gt;importString(pack('C*',
            0xD0, 0x94,
            0xD0, 0xB6,
            0xD0, 0xBE,
            0xD1, 0x8D,
            0xD0, 0xBB,
            0xD0, 0xB0
            )
        );
    }

    public function testCharactersWrittenUseValidator()
</codefragment>
  </duplication>
  <duplication lines="31" tokens="163">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php" line="7"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php" line="111"/>
    <codefragment>        $reader = $this-&gt;getReader();
        $factory = $this-&gt;getFactory($reader);

        $stream = new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8');

        $reader-&gt;shouldReceive('getInitialByteSize')
               -&gt;zeroOrMoreTimes()
               -&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD1), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);

        $stream-&gt;importString(pack('C*',
            0xD0, 0x94,
            0xD0, 0xB6,
            0xD0, 0xBE,
            0xD1, 0x8D,
            0xD0, 0xBB,
            0xD0, 0xB0
            )
        );
    }

    public function testCharactersWrittenUseValidator()
    {
        $reader = $this-&gt;getReader();
        $factory = $this-&gt;getFactory($reader);

</codefragment>
  </duplication>
  <duplication lines="15" tokens="78">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php" line="154"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php" line="177"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php" line="200"/>
    <codefragment>        $reader = $this-&gt;getReader();
        $factory = $this-&gt;getFactory($reader);

        $stream = new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8');

        $reader-&gt;shouldReceive('getInitialByteSize')
               -&gt;zeroOrMoreTimes()
               -&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);

        $stream-&gt;importString(pack('C*', 0xD0, 0x94, 0xD0, 0xB6, 0xD0, 0xBE));

        $this-&gt;assertIdenticalBinary(pack('C*', 0xD0, 0x94, 0xD0, 0xB6, 0xD0, 0xBE),
</codefragment>
  </duplication>
  <duplication lines="13" tokens="76">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php" line="154"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php" line="227"/>
    <codefragment>        $reader = $this-&gt;getReader();
        $factory = $this-&gt;getFactory($reader);

        $stream = new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8');

        $reader-&gt;shouldReceive('getInitialByteSize')
               -&gt;zeroOrMoreTimes()
               -&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);

        $stream-&gt;importString(pack('C*', 0xD0, 0x94, 0xD0, 0xB6, 0xD0, 0xBE));
</codefragment>
  </duplication>
  <duplication lines="27" tokens="159">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php" line="248"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php" line="279"/>
    <codefragment>        $reader = $this-&gt;getReader();
        $factory = $this-&gt;getFactory($reader);
        $os = $this-&gt;getByteStream();

        $stream = new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8');

        $os-&gt;shouldReceive('setReadPointer')
           -&gt;between(0, 1)
           -&gt;with(0);
        $os-&gt;shouldReceive('read')-&gt;once()-&gt;andReturn(pack('C*', 0xD0));
        $os-&gt;shouldReceive('read')-&gt;once()-&gt;andReturn(pack('C*', 0x94));
        $os-&gt;shouldReceive('read')-&gt;once()-&gt;andReturn(pack('C*', 0xD0));
        $os-&gt;shouldReceive('read')-&gt;once()-&gt;andReturn(pack('C*', 0xB6));
        $os-&gt;shouldReceive('read')-&gt;once()-&gt;andReturn(pack('C*', 0xD0));
        $os-&gt;shouldReceive('read')-&gt;once()-&gt;andReturn(pack('C*', 0xBE));
        $os-&gt;shouldReceive('read')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturn(false);

        $reader-&gt;shouldReceive('getInitialByteSize')
               -&gt;zeroOrMoreTimes()
               -&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);
        $reader-&gt;shouldReceive('validateByteSequence')-&gt;once()-&gt;with(array(0xD0), 1)-&gt;andReturn(1);

        $stream-&gt;importByteStream($os);
</codefragment>
  </duplication>
  <duplication lines="31" tokens="82">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php" line="8"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php" line="76"/>
    <codefragment>        $message2 = $this-&gt;getMockery('Swift_Mime_SimpleMessage');
        $t1 = $this-&gt;getMockery('Swift_Transport');
        $t2 = $this-&gt;getMockery('Swift_Transport');
        $connectionState1 = false;
        $connectionState2 = false;

        $testCase = $this;
        $t1-&gt;shouldReceive('isStarted')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               return $connectionState1;
           });
        $t1-&gt;shouldReceive('start')
           -&gt;once()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               if (!$connectionState1) {
                   $connectionState1 = true;
               }
           });
        $t1-&gt;shouldReceive('send')
           -&gt;once()
           -&gt;with($message1, \Mockery::any())
           -&gt;andReturnUsing(function () use (&amp;$connectionState1, $testCase) {
               if ($connectionState1) {
                   return 1;
               }
               $testCase-&gt;fail();
           });
        $t1-&gt;shouldReceive('send')
           -&gt;never()
           -&gt;with($message2, \Mockery::any());
</codefragment>
  </duplication>
  <duplication lines="47" tokens="112">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php" line="228"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php" line="287"/>
    <codefragment>        $message = $this-&gt;getMockery('Swift_Mime_SimpleMessage');
        $t1 = $this-&gt;getMockery('Swift_Transport');
        $t2 = $this-&gt;getMockery('Swift_Transport');
        $connectionState1 = false;
        $connectionState2 = false;

        $t1-&gt;shouldReceive('isStarted')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               return $connectionState1;
           });
        $t1-&gt;shouldReceive('start')
           -&gt;once()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               if (!$connectionState1) {
                   $connectionState1 = true;
               }
           });
        $t1-&gt;shouldReceive('send')
           -&gt;once()
           -&gt;with($message, \Mockery::any())
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               if ($connectionState1) {
                   return 0;
               }

               return 1;
           });

        $t2-&gt;shouldReceive('isStarted')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing(function () use (&amp;$connectionState2) {
               return $connectionState2;
           });
        $t2-&gt;shouldReceive('start')
           -&gt;once()
           -&gt;andReturnUsing(function () use (&amp;$connectionState2) {
               if (!$connectionState2) {
                   $connectionState2 = true;
               }
           });
        $t2-&gt;shouldReceive('send')
           -&gt;once()
           -&gt;with($message, \Mockery::any())
           -&gt;andReturnUsing(function () use (&amp;$connectionState2) {
               if ($connectionState2) {
                   return 1;
</codefragment>
  </duplication>
  <duplication lines="26" tokens="78">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php" line="73"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php" line="348"/>
    <codefragment>        $message1 = $this-&gt;getMockery('Swift_Mime_SimpleMessage');
        $message2 = $this-&gt;getMockery('Swift_Mime_SimpleMessage');
        $message3 = $this-&gt;getMockery('Swift_Mime_SimpleMessage');
        $message4 = $this-&gt;getMockery('Swift_Mime_SimpleMessage');
        $t1 = $this-&gt;getMockery('Swift_Transport');
        $t2 = $this-&gt;getMockery('Swift_Transport');
        $connectionState1 = false;
        $connectionState2 = false;

        $testCase = $this;
        $t1-&gt;shouldReceive('isStarted')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               return $connectionState1;
           });
        $t1-&gt;shouldReceive('start')
           -&gt;once()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               if (!$connectionState1) {
                   $connectionState1 = true;
               }
           });
        $t1-&gt;shouldReceive('send')
           -&gt;once()
           -&gt;with($message1, \Mockery::any())
           -&gt;andReturnUsing(function () use (&amp;$connectionState1, $testCase) {
</codefragment>
  </duplication>
  <duplication lines="52" tokens="127">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php" line="421"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php" line="520"/>
    <codefragment>        $e = new Swift_TransportException('b0rken');

        $message = $this-&gt;getMockery('Swift_Mime_SimpleMessage');
        $t1 = $this-&gt;getMockery('Swift_Transport');
        $t2 = $this-&gt;getMockery('Swift_Transport');
        $connectionState1 = false;
        $connectionState2 = false;

        $t1-&gt;shouldReceive('isStarted')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               return $connectionState1;
           });
        $t1-&gt;shouldReceive('start')
           -&gt;once()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               if (!$connectionState1) {
                   $connectionState1 = true;
               }
           });
        $t1-&gt;shouldReceive('send')
           -&gt;once()
           -&gt;with($message, \Mockery::any())
           -&gt;andReturnUsing(function () use (&amp;$connectionState1, $e) {
               if ($connectionState1) {
                   throw $e;
               }
           });

        $t2-&gt;shouldReceive('isStarted')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing(function () use (&amp;$connectionState2) {
               return $connectionState2;
           });
        $t2-&gt;shouldReceive('start')
           -&gt;once()
           -&gt;andReturnUsing(function () use (&amp;$connectionState2) {
               if (!$connectionState2) {
                   $connectionState2 = true;
               }
           });
        $t2-&gt;shouldReceive('send')
           -&gt;once()
           -&gt;with($message, \Mockery::any())
           -&gt;andReturnUsing(function () use (&amp;$connectionState2, $e) {
               if ($connectionState2) {
                   throw $e;
               }
           });

        $transport = $this-&gt;getTransport(array($t1, $t2));
        $transport-&gt;start();
</codefragment>
  </duplication>
  <duplication lines="25" tokens="75">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/EsmtpTransportTest.php" line="128"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/EsmtpTransportTest.php" line="167"/>
    <codefragment>        $buf = $this-&gt;getBuffer();
        $smtp = $this-&gt;getTransport($buf);

        $buf-&gt;shouldReceive('initialize')
            -&gt;once();
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(0)
            -&gt;andReturn("220 some.server.tld bleh\r\n");
        $buf-&gt;shouldReceive('write')
            -&gt;once()
            -&gt;with('~^EHLO .+?\r\n$~D')
            -&gt;andReturn(1);
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(1)
            -&gt;andReturn('501 WTF'."\r\n");
        $buf-&gt;shouldReceive('write')
            -&gt;once()
            -&gt;with('~^HELO .+?\r\n$~D')
            -&gt;andReturn(2);
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(2)
            -&gt;andReturn('250 HELO'."\r\n");
</codefragment>
  </duplication>
  <duplication lines="46" tokens="115">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php" line="421"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/FailoverTransportTest.php" line="44"/>
    <codefragment>        $e = new Swift_TransportException('b0rken');

        $message = $this-&gt;getMockery('Swift_Mime_SimpleMessage');
        $t1 = $this-&gt;getMockery('Swift_Transport');
        $t2 = $this-&gt;getMockery('Swift_Transport');
        $connectionState1 = false;
        $connectionState2 = false;

        $t1-&gt;shouldReceive('isStarted')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               return $connectionState1;
           });
        $t1-&gt;shouldReceive('start')
           -&gt;once()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               if (!$connectionState1) {
                   $connectionState1 = true;
               }
           });
        $t1-&gt;shouldReceive('send')
           -&gt;once()
           -&gt;with($message, \Mockery::any())
           -&gt;andReturnUsing(function () use (&amp;$connectionState1, $e) {
               if ($connectionState1) {
                   throw $e;
               }
           });

        $t2-&gt;shouldReceive('isStarted')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing(function () use (&amp;$connectionState2) {
               return $connectionState2;
           });
        $t2-&gt;shouldReceive('start')
           -&gt;once()
           -&gt;andReturnUsing(function () use (&amp;$connectionState2) {
               if (!$connectionState2) {
                   $connectionState2 = true;
               }
           });
        $t2-&gt;shouldReceive('send')
           -&gt;once()
           -&gt;with($message, \Mockery::any())
           -&gt;andReturnUsing(function () use (&amp;$connectionState2, $e) {
               if ($connectionState2) {
</codefragment>
  </duplication>
  <duplication lines="25" tokens="75">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php" line="379"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/FailoverTransportTest.php" line="167"/>
    <codefragment>        $t1-&gt;shouldReceive('send')
           -&gt;never()
           -&gt;with($message2, \Mockery::any());
        $t1-&gt;shouldReceive('send')
           -&gt;never()
           -&gt;with($message3, \Mockery::any());
        $t1-&gt;shouldReceive('send')
           -&gt;never()
           -&gt;with($message4, \Mockery::any());

        $t2-&gt;shouldReceive('isStarted')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing(function () use (&amp;$connectionState2) {
               return $connectionState2;
           });
        $t2-&gt;shouldReceive('start')
           -&gt;once()
           -&gt;andReturnUsing(function () use (&amp;$connectionState2) {
               if (!$connectionState2) {
                   $connectionState2 = true;
               }
           });
        $t2-&gt;shouldReceive('send')
           -&gt;times(4)
           -&gt;with(\Mockery::anyOf($message1, $message3, $message3, $message4), \Mockery::any())
</codefragment>
  </duplication>
  <duplication lines="136" tokens="337">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php" line="411"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/FailoverTransportTest.php" line="198"/>
    <codefragment>        $transport = $this-&gt;getTransport(array($t1, $t2));
        $transport-&gt;start();
        $this-&gt;assertEquals(1, $transport-&gt;send($message1));
        $this-&gt;assertEquals(1, $transport-&gt;send($message2));
        $this-&gt;assertEquals(1, $transport-&gt;send($message3));
        $this-&gt;assertEquals(1, $transport-&gt;send($message4));
    }

    public function testExceptionIsThrownIfAllTransportsDie()
    {
        $e = new Swift_TransportException('b0rken');

        $message = $this-&gt;getMockery('Swift_Mime_SimpleMessage');
        $t1 = $this-&gt;getMockery('Swift_Transport');
        $t2 = $this-&gt;getMockery('Swift_Transport');
        $connectionState1 = false;
        $connectionState2 = false;

        $t1-&gt;shouldReceive('isStarted')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               return $connectionState1;
           });
        $t1-&gt;shouldReceive('start')
           -&gt;once()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               if (!$connectionState1) {
                   $connectionState1 = true;
               }
           });
        $t1-&gt;shouldReceive('send')
           -&gt;once()
           -&gt;with($message, \Mockery::any())
           -&gt;andReturnUsing(function () use (&amp;$connectionState1, $e) {
               if ($connectionState1) {
                   throw $e;
               }
           });

        $t2-&gt;shouldReceive('isStarted')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing(function () use (&amp;$connectionState2) {
               return $connectionState2;
           });
        $t2-&gt;shouldReceive('start')
           -&gt;once()
           -&gt;andReturnUsing(function () use (&amp;$connectionState2) {
               if (!$connectionState2) {
                   $connectionState2 = true;
               }
           });
        $t2-&gt;shouldReceive('send')
           -&gt;once()
           -&gt;with($message, \Mockery::any())
           -&gt;andReturnUsing(function () use (&amp;$connectionState2, $e) {
               if ($connectionState2) {
                   throw $e;
               }
           });

        $transport = $this-&gt;getTransport(array($t1, $t2));
        $transport-&gt;start();
        try {
            $transport-&gt;send($message);
            $this-&gt;fail('All transports failed so Exception should be thrown');
        } catch (Exception $e) {
        }
    }

    public function testStoppingTransportStopsAllDelegates()
    {
        $t1 = $this-&gt;getMockery('Swift_Transport');
        $t2 = $this-&gt;getMockery('Swift_Transport');
        $connectionState1 = true;
        $connectionState2 = true;

        $t1-&gt;shouldReceive('isStarted')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               return $connectionState1;
           });
        $t1-&gt;shouldReceive('stop')
           -&gt;once()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               if ($connectionState1) {
                   $connectionState1 = false;
               }
           });

        $t2-&gt;shouldReceive('isStarted')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing(function () use (&amp;$connectionState2) {
               return $connectionState2;
           });
        $t2-&gt;shouldReceive('stop')
           -&gt;once()
           -&gt;andReturnUsing(function () use (&amp;$connectionState2) {
               if ($connectionState2) {
                   $connectionState2 = false;
               }
           });

        $transport = $this-&gt;getTransport(array($t1, $t2));
        $transport-&gt;start();
        $transport-&gt;stop();
    }

    public function testTransportShowsAsNotStartedIfAllDelegatesDead()
    {
        $e = new Swift_TransportException('b0rken');

        $message = $this-&gt;getMockery('Swift_Mime_SimpleMessage');
        $t1 = $this-&gt;getMockery('Swift_Transport');
        $t2 = $this-&gt;getMockery('Swift_Transport');
        $connectionState1 = false;
        $connectionState2 = false;

        $t1-&gt;shouldReceive('isStarted')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               return $connectionState1;
           });
        $t1-&gt;shouldReceive('start')
           -&gt;once()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               if (!$connectionState1) {
                   $connectionState1 = true;
               }
           });
        $t1-&gt;shouldReceive('send')
           -&gt;once()
           -&gt;with($message, \Mockery::any())
           -&gt;andReturnUsing(function () use (&amp;$connectionState1, $e) {
               if ($connectionState1) {
                   throw $e;
               }
</codefragment>
  </duplication>
  <duplication lines="52" tokens="132">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php" line="566"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/FailoverTransportTest.php" line="357"/>
    <codefragment>                   throw $e;
               }
           });

        $transport = $this-&gt;getTransport(array($t1, $t2));
        $transport-&gt;start();
        $this-&gt;assertTrue($transport-&gt;isStarted());
        try {
            $transport-&gt;send($message);
            $this-&gt;fail('All transports failed so Exception should be thrown');
        } catch (Exception $e) {
            $this-&gt;assertFalse($transport-&gt;isStarted());
        }
    }

    public function testRestartingTransportRestartsDeadDelegates()
    {
        $e = new Swift_TransportException('b0rken');

        $message1 = $this-&gt;getMockery('Swift_Mime_SimpleMessage');
        $message2 = $this-&gt;getMockery('Swift_Mime_SimpleMessage');
        $t1 = $this-&gt;getMockery('Swift_Transport');
        $t2 = $this-&gt;getMockery('Swift_Transport');
        $connectionState1 = false;
        $connectionState2 = false;

        $t1-&gt;shouldReceive('isStarted')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               return $connectionState1;
           });
        $t1-&gt;shouldReceive('start')
           -&gt;twice()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               if (!$connectionState1) {
                   $connectionState1 = true;
               }
           });
        $t1-&gt;shouldReceive('send')
           -&gt;once()
           -&gt;with($message1, \Mockery::any())
           -&gt;andReturnUsing(function () use (&amp;$connectionState1, $e) {
               if ($connectionState1) {
                   $connectionState1 = false;
                   throw $e;
               }
           });
        $t1-&gt;shouldReceive('send')
           -&gt;once()
           -&gt;with($message2, \Mockery::any())
           -&gt;andReturnUsing(function () use (&amp;$connectionState1, $e) {
               if ($connectionState1) {
</codefragment>
  </duplication>
  <duplication lines="25" tokens="70">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php" line="639"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/FailoverTransportTest.php" line="432"/>
    <codefragment>                   throw $e;
               }
           });
        $t2-&gt;shouldReceive('send')
           -&gt;never()
           -&gt;with($message2, \Mockery::any());

        $transport = $this-&gt;getTransport(array($t1, $t2));
        $transport-&gt;start();
        $this-&gt;assertTrue($transport-&gt;isStarted());
        try {
            $transport-&gt;send($message1);
            $this-&gt;fail('All transports failed so Exception should be thrown');
        } catch (Exception $e) {
            $this-&gt;assertFalse($transport-&gt;isStarted());
        }
        //Restart and re-try
        $transport-&gt;start();
        $this-&gt;assertTrue($transport-&gt;isStarted());
        $this-&gt;assertEquals(10, $transport-&gt;send($message2));
    }

    public function testFailureReferenceIsPassedToDelegates()
    {
        $failures = array();
</codefragment>
  </duplication>
  <duplication lines="33" tokens="82">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php" line="685"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/FailoverTransportTest.php" line="477"/>
    <codefragment>               return $testCase-&gt;varsAreReferences($var, $failures);
           }))
           -&gt;andReturnUsing(function () use (&amp;$connectionState) {
               if ($connectionState) {
                   return 1;
               }
           });

        $transport = $this-&gt;getTransport(array($t1));
        $transport-&gt;start();
        $transport-&gt;send($message, $failures);
    }

    public function testRegisterPluginDelegatesToLoadedTransports()
    {
        $plugin = $this-&gt;createPlugin();

        $t1 = $this-&gt;getMockery('Swift_Transport');
        $t2 = $this-&gt;getMockery('Swift_Transport');

        $t1-&gt;shouldReceive('registerPlugin')
           -&gt;once()
           -&gt;with($plugin);
        $t2-&gt;shouldReceive('registerPlugin')
           -&gt;once()
           -&gt;with($plugin);

        $transport = $this-&gt;getTransport(array($t1, $t2));
        $transport-&gt;registerPlugin($plugin);
    }

    public function testEachDelegateIsPinged()
    {
</codefragment>
  </duplication>
  <duplication lines="26" tokens="79">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php" line="777"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/FailoverTransportTest.php" line="560"/>
    <codefragment>        $t1 = $this-&gt;getMockery('Swift_Transport');
        $t2 = $this-&gt;getMockery('Swift_Transport');

        $testCase = $this;
        $t1-&gt;shouldReceive('isStarted')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing(function () use (&amp;$connectionState1) {
               return $connectionState1;
           });
        $t1-&gt;shouldReceive('ping')
           -&gt;once()
           -&gt;andReturn(false);

        $t2-&gt;shouldReceive('isStarted')
           -&gt;zeroOrMoreTimes()
           -&gt;andReturnUsing(function () use (&amp;$connectionState2) {
               return $connectionState2;
           });
        $t2-&gt;shouldReceive('ping')
           -&gt;once()
           -&gt;andReturn(false);

        $transport = $this-&gt;getTransport(array($t1, $t2));
        $this-&gt;assertFalse($transport-&gt;ping());
        $this-&gt;assertFalse($transport-&gt;isStarted());
        $this-&gt;assertFalse($transport-&gt;ping());
</codefragment>
  </duplication>
  <duplication lines="26" tokens="87">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpTest.php" line="394"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpTest.php" line="432"/>
    <codefragment>        $buf = $this-&gt;getBuffer();
        $smtp = $this-&gt;getTransport($buf);
        $message = $this-&gt;createMessage();

        $message-&gt;shouldReceive('getFrom')
                -&gt;once()
                -&gt;andReturn(array('me@domain.com' =&gt; 'Me'));
        $message-&gt;shouldReceive('getTo')
                -&gt;once()
                -&gt;andReturn(array('foo@bar' =&gt; null));
        $buf-&gt;shouldReceive('write')
            -&gt;once()
            -&gt;with("MAIL FROM:&lt;me@domain.com&gt;\r\n")
            -&gt;andReturn(1);
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(1)
            -&gt;andReturn('250 OK'."\r\n");
        $buf-&gt;shouldReceive('write')
            -&gt;once()
            -&gt;with("RCPT TO:&lt;foo@bar&gt;\r\n")
            -&gt;andReturn(2);
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(2)
            -&gt;andReturn('250 OK'."\r\n");
</codefragment>
  </duplication>
  <duplication lines="34" tokens="94">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpTest.php" line="480"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpTest.php" line="528"/>
    <codefragment>                    'zip@button' =&gt; 'Zip Button',
                    'test@domain' =&gt; 'Test user',
                ));
        $buf-&gt;shouldReceive('write')
            -&gt;once()
            -&gt;with("RCPT TO:&lt;foo@bar&gt;\r\n")
            -&gt;andReturn(1);
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(1)
            -&gt;andReturn('250 OK'."\r\n");
        $buf-&gt;shouldReceive('write')
            -&gt;once()
            -&gt;with("RCPT TO:&lt;zip@button&gt;\r\n")
            -&gt;andReturn(2);
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(2)
            -&gt;andReturn('250 OK'."\r\n");
        $buf-&gt;shouldReceive('write')
            -&gt;once()
            -&gt;with("RCPT TO:&lt;test@domain&gt;\r\n")
            -&gt;andReturn(3);
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(3)
            -&gt;andReturn('250 OK'."\r\n");

        $this-&gt;finishBuffer($buf);
        $smtp-&gt;start();
        $smtp-&gt;send($message);
    }

    public function testCcRecipientsSendsMultipleRcpt()
</codefragment>
  </duplication>
  <duplication lines="32" tokens="100">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpTest.php" line="515"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpTest.php" line="563"/>
    <codefragment>        $buf = $this-&gt;getBuffer();
        $smtp = $this-&gt;getTransport($buf);
        $message = $this-&gt;createMessage();

        $message-&gt;shouldReceive('getFrom')
                -&gt;once()
                -&gt;andReturn(array('me@domain.com' =&gt; 'Me'));
        $message-&gt;shouldReceive('getTo')
                -&gt;once()
                -&gt;andReturn(array('foo@bar' =&gt; null));
        $message-&gt;shouldReceive('getCc')
                -&gt;once()
                -&gt;andReturn(array(
                    'zip@button' =&gt; 'Zip Button',
                    'test@domain' =&gt; 'Test user',
                ));
        $buf-&gt;shouldReceive('write')
            -&gt;once()
            -&gt;with("RCPT TO:&lt;foo@bar&gt;\r\n")
            -&gt;andReturn(1);
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(1)
            -&gt;andReturn('250 OK'."\r\n");
        $buf-&gt;shouldReceive('write')
            -&gt;once()
            -&gt;with("RCPT TO:&lt;zip@button&gt;\r\n")
            -&gt;andReturn(2);
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(2)
            -&gt;andReturn('250 OK'."\r\n");
</codefragment>
  </duplication>
  <duplication lines="26" tokens="85">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpTest.php" line="753"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpTest.php" line="787"/>
    <codefragment>        $buf = $this-&gt;getBuffer();
        $smtp = $this-&gt;getTransport($buf);
        $message = $this-&gt;createMessage();

        $message-&gt;shouldReceive('getFrom')
                -&gt;once()
                -&gt;andReturn(array('me@domain.com' =&gt; 'Me'));
        $message-&gt;shouldReceive('getTo')
                -&gt;once()
                -&gt;andReturn(array('foo@bar' =&gt; null));
        $buf-&gt;shouldReceive('write')
            -&gt;once()
            -&gt;with("DATA\r\n")
            -&gt;andReturn(1);
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(1)
            -&gt;andReturn('354 OK'."\r\n");
        $buf-&gt;shouldReceive('write')
            -&gt;once()
            -&gt;with("\r\n.\r\n")
            -&gt;andReturn(2);
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(2)
            -&gt;andReturn('250 OK'."\r\n");
</codefragment>
  </duplication>
  <duplication lines="29" tokens="82">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpTest.php" line="896"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpTest.php" line="956"/>
    <codefragment>                -&gt;atLeast()-&gt;once()
                -&gt;with(array(
                    'zip@button' =&gt; 'Zip Button',
                    'test@domain' =&gt; 'Test user',
                ));

        $buf-&gt;shouldReceive('write')-&gt;once()-&gt;with("MAIL FROM:&lt;me@domain.com&gt;\r\n")-&gt;andReturn(1);
        $buf-&gt;shouldReceive('readLine')-&gt;once()-&gt;with(1)-&gt;andReturn("250 OK\r\n");
        $buf-&gt;shouldReceive('write')-&gt;once()-&gt;with("RCPT TO:&lt;foo@bar&gt;\r\n")-&gt;andReturn(2);
        $buf-&gt;shouldReceive('readLine')-&gt;once()-&gt;with(2)-&gt;andReturn("250 OK\r\n");
        $buf-&gt;shouldReceive('write')-&gt;once()-&gt;with("DATA\r\n")-&gt;andReturn(3);
        $buf-&gt;shouldReceive('readLine')-&gt;once()-&gt;with(3)-&gt;andReturn("354 OK\r\n");
        $buf-&gt;shouldReceive('write')-&gt;once()-&gt;with("\r\n.\r\n")-&gt;andReturn(4);
        $buf-&gt;shouldReceive('readLine')-&gt;once()-&gt;with(4)-&gt;andReturn("250 OK\r\n");

        $buf-&gt;shouldReceive('write')-&gt;once()-&gt;with("MAIL FROM:&lt;me@domain.com&gt;\r\n")-&gt;andReturn(5);
        $buf-&gt;shouldReceive('readLine')-&gt;once()-&gt;with(5)-&gt;andReturn("250 OK\r\n");
        $buf-&gt;shouldReceive('write')-&gt;once()-&gt;with("RCPT TO:&lt;zip@button&gt;\r\n")-&gt;andReturn(6);
        $buf-&gt;shouldReceive('readLine')-&gt;once()-&gt;with(6)-&gt;andReturn("250 OK\r\n");
        $buf-&gt;shouldReceive('write')-&gt;once()-&gt;with("DATA\r\n")-&gt;andReturn(7);
        $buf-&gt;shouldReceive('readLine')-&gt;once()-&gt;with(7)-&gt;andReturn("354 OK\r\n");
        $buf-&gt;shouldReceive('write')-&gt;once()-&gt;with("\r\n.\r\n")-&gt;andReturn(8);
        $buf-&gt;shouldReceive('readLine')-&gt;once()-&gt;with(8)-&gt;andReturn("250 OK\r\n");

        $buf-&gt;shouldReceive('write')-&gt;once()-&gt;with("MAIL FROM:&lt;me@domain.com&gt;\r\n")-&gt;andReturn(9);
        $buf-&gt;shouldReceive('readLine')-&gt;once()-&gt;with(9)-&gt;andReturn("250 OK\r\n");
        $buf-&gt;shouldReceive('write')-&gt;once()-&gt;with("RCPT TO:&lt;test@domain&gt;\r\n")-&gt;andReturn(10);
        $buf-&gt;shouldReceive('readLine')-&gt;once()-&gt;with(10)-&gt;andReturn("250 OK\r\n");
        $buf-&gt;shouldReceive('write')-&gt;once()-&gt;with("DATA\r\n")-&gt;andReturn(11);
</codefragment>
  </duplication>
  <duplication lines="45" tokens="247">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpTest.php" line="870"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpTest.php" line="1094"/>
    <codefragment>        $buf = $this-&gt;getBuffer();
        $smtp = $this-&gt;getTransport($buf);
        $message = $this-&gt;createMessage();

        $message-&gt;shouldReceive('getFrom')
                -&gt;zeroOrMoreTimes()
                -&gt;andReturn(array('me@domain.com' =&gt; 'Me'));
        $message-&gt;shouldReceive('getTo')
                -&gt;zeroOrMoreTimes()
                -&gt;andReturn(array('foo@bar' =&gt; null));
        $message-&gt;shouldReceive('getBcc')
                -&gt;zeroOrMoreTimes()
                -&gt;andReturn(array(
                    'zip@button' =&gt; 'Zip Button',
                    'test@domain' =&gt; 'Test user',
                ));
        $message-&gt;shouldReceive('setBcc')
                -&gt;atLeast()-&gt;once()
                -&gt;with(array());
        $message-&gt;shouldReceive('setBcc')
                -&gt;once()
                -&gt;with(array('zip@button' =&gt; 'Zip Button'));
        $message-&gt;shouldReceive('setBcc')
                -&gt;once()
                -&gt;with(array('test@domain' =&gt; 'Test user'));
        $message-&gt;shouldReceive('setBcc')
                -&gt;atLeast()-&gt;once()
                -&gt;with(array(
                    'zip@button' =&gt; 'Zip Button',
                    'test@domain' =&gt; 'Test user',
                ));

        $buf-&gt;shouldReceive('write')-&gt;once()-&gt;with("MAIL FROM:&lt;me@domain.com&gt;\r\n")-&gt;andReturn(1);
        $buf-&gt;shouldReceive('readLine')-&gt;once()-&gt;with(1)-&gt;andReturn("250 OK\r\n");
        $buf-&gt;shouldReceive('write')-&gt;once()-&gt;with("RCPT TO:&lt;foo@bar&gt;\r\n")-&gt;andReturn(2);
        $buf-&gt;shouldReceive('readLine')-&gt;once()-&gt;with(2)-&gt;andReturn("250 OK\r\n");
        $buf-&gt;shouldReceive('write')-&gt;once()-&gt;with("DATA\r\n")-&gt;andReturn(3);
        $buf-&gt;shouldReceive('readLine')-&gt;once()-&gt;with(3)-&gt;andReturn("354 OK\r\n");
        $buf-&gt;shouldReceive('write')-&gt;once()-&gt;with("\r\n.\r\n")-&gt;andReturn(4);
        $buf-&gt;shouldReceive('readLine')-&gt;once()-&gt;with(4)-&gt;andReturn("250 OK\r\n");

        $buf-&gt;shouldReceive('write')-&gt;once()-&gt;with("MAIL FROM:&lt;me@domain.com&gt;\r\n")-&gt;andReturn(5);
        $buf-&gt;shouldReceive('readLine')-&gt;once()-&gt;with(5)-&gt;andReturn("250 OK\r\n");
        $buf-&gt;shouldReceive('write')-&gt;once()-&gt;with("RCPT TO:&lt;zip@button&gt;\r\n")-&gt;andReturn(6);
        $buf-&gt;shouldReceive('readLine')-&gt;once()-&gt;with(6)-&gt;andReturn("250 OK\r\n");
</codefragment>
  </duplication>
  <duplication lines="27" tokens="78">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/EsmtpTransport/ExtensionSupportTest.php" line="46"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/EsmtpTransport/ExtensionSupportTest.php" line="93"/>
    <codefragment>        $ext2 = $this-&gt;getMockery('Swift_Transport_EsmtpHandler')-&gt;shouldIgnoreMissing();

        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(0)
            -&gt;andReturn("220 server.com foo\r\n");
        $buf-&gt;shouldReceive('write')
            -&gt;once()
            -&gt;with('~^EHLO .*?\r\n$~D')
            -&gt;andReturn(1);
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(1)
            -&gt;andReturn("250-ServerName.tld\r\n");
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(1)
            -&gt;andReturn("250-AUTH PLAIN LOGIN\r\n");
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(1)
            -&gt;andReturn("250 SIZE=123456\r\n");

        $ext1-&gt;shouldReceive('getHandledKeyword')
             -&gt;zeroOrMoreTimes()
             -&gt;andReturn('AUTH');
        $ext1-&gt;shouldReceive('setKeywordParams')
</codefragment>
  </duplication>
  <duplication lines="22" tokens="84">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/EsmtpTransport/ExtensionSupportTest.php" line="142"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/EsmtpTransport/ExtensionSupportTest.php" line="244"/>
    <codefragment>        $buf = $this-&gt;getBuffer();
        $dispatcher = $this-&gt;createEventDispatcher();
        $smtp = new Swift_Transport_EsmtpTransport($buf, array(), $dispatcher, 'example.org');
        $ext1 = $this-&gt;getMockery('Swift_Transport_EsmtpHandler')-&gt;shouldIgnoreMissing();
        $ext2 = $this-&gt;getMockery('Swift_Transport_EsmtpHandler')-&gt;shouldIgnoreMissing();
        $ext3 = $this-&gt;getMockery('Swift_Transport_EsmtpHandler')-&gt;shouldIgnoreMissing();
        $message = $this-&gt;createMessage();

        $message-&gt;shouldReceive('getFrom')
                -&gt;zeroOrMoreTimes()
                -&gt;andReturn(array('me@domain' =&gt; 'Me'));
        $message-&gt;shouldReceive('getTo')
                -&gt;zeroOrMoreTimes()
                -&gt;andReturn(array('foo@bar' =&gt; null));

        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(0)
            -&gt;andReturn("220 server.com foo\r\n");
        $buf-&gt;shouldReceive('write')
            -&gt;once()
            -&gt;with('~^EHLO .*?\r\n$~D')
</codefragment>
  </duplication>
  <duplication lines="28" tokens="95">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/EsmtpTransport/ExtensionSupportTest.php" line="346"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/EsmtpTransport/ExtensionSupportTest.php" line="408"/>
    <codefragment>        $buf = $this-&gt;getBuffer();
        $smtp = $this-&gt;getTransport($buf);
        $ext1 = $this-&gt;getMockery('Swift_Transport_EsmtpHandler')-&gt;shouldIgnoreMissing();
        $ext2 = $this-&gt;getMockery('Swift_Transport_EsmtpHandler')-&gt;shouldIgnoreMissing();
        $ext3 = $this-&gt;getMockery('Swift_Transport_EsmtpHandler')-&gt;shouldIgnoreMissing();

        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(0)
            -&gt;andReturn("220 server.com foo\r\n");
        $buf-&gt;shouldReceive('write')
            -&gt;once()
            -&gt;with('~^EHLO .+?\r\n$~D')
            -&gt;andReturn(1);
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(1)
            -&gt;andReturn("250-ServerName.tld\r\n");
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(1)
            -&gt;andReturn("250-AUTH PLAIN LOGIN\r\n");
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(1)
            -&gt;andReturn("250 SIZE=123456\r\n");
        $buf-&gt;shouldReceive('write')
            -&gt;once()
</codefragment>
  </duplication>
  <duplication lines="41" tokens="141">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpEventSupportTest.php" line="84"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpEventSupportTest.php" line="135"/>
    <codefragment>        $buf = $this-&gt;getBuffer();
        $dispatcher = $this-&gt;createEventDispatcher(false);
        $evt = $this-&gt;getMockery('Swift_Events_SendEvent')-&gt;shouldIgnoreMissing();
        $smtp = $this-&gt;getTransport($buf, $dispatcher);
        $message = $this-&gt;createMessage();

        $message-&gt;shouldReceive('getFrom')
                -&gt;zeroOrMoreTimes()
                -&gt;andReturn(array('chris@swiftmailer.org' =&gt; null));
        $message-&gt;shouldReceive('getTo')
                -&gt;zeroOrMoreTimes()
                -&gt;andReturn(array('mark@swiftmailer.org' =&gt; 'Mark'));
        $buf-&gt;shouldReceive('write')
            -&gt;once()
            -&gt;with("MAIL FROM:&lt;chris@swiftmailer.org&gt;\r\n")
            -&gt;andReturn(1);
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(1)
            -&gt;andReturn("250 OK\r\n");
        $buf-&gt;shouldReceive('write')
            -&gt;once()
            -&gt;with("RCPT TO:&lt;mark@swiftmailer.org&gt;\r\n")
            -&gt;andReturn(2);
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(2)
            -&gt;andReturn("500 Not now\r\n");
        $dispatcher-&gt;shouldReceive('createSendEvent')
                   -&gt;zeroOrMoreTimes()
                   -&gt;with($smtp, \Mockery::any())
                   -&gt;andReturn($evt);
        $dispatcher-&gt;shouldReceive('dispatchEvent')
                   -&gt;once()
                   -&gt;with($evt, 'sendPerformed');
        $dispatcher-&gt;shouldReceive('dispatchEvent')
                   -&gt;zeroOrMoreTimes();
        $evt-&gt;shouldReceive('bubbleCancelled')
            -&gt;zeroOrMoreTimes()
            -&gt;andReturn(false);
        $evt-&gt;shouldReceive('setFailedRecipients')
</codefragment>
  </duplication>
  <duplication lines="31" tokens="98">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpEventSupportTest.php" line="96"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpEventSupportTest.php" line="201"/>
    <codefragment>        $buf-&gt;shouldReceive('write')
            -&gt;once()
            -&gt;with("MAIL FROM:&lt;chris@swiftmailer.org&gt;\r\n")
            -&gt;andReturn(1);
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(1)
            -&gt;andReturn("250 OK\r\n");
        $buf-&gt;shouldReceive('write')
            -&gt;once()
            -&gt;with("RCPT TO:&lt;mark@swiftmailer.org&gt;\r\n")
            -&gt;andReturn(2);
        $buf-&gt;shouldReceive('readLine')
            -&gt;once()
            -&gt;with(2)
            -&gt;andReturn("500 Not now\r\n");
        $dispatcher-&gt;shouldReceive('createSendEvent')
                   -&gt;zeroOrMoreTimes()
                   -&gt;with($smtp, \Mockery::any())
                   -&gt;andReturn($evt);
        $dispatcher-&gt;shouldReceive('dispatchEvent')
                   -&gt;once()
                   -&gt;with($evt, 'sendPerformed');
        $dispatcher-&gt;shouldReceive('dispatchEvent')
                   -&gt;zeroOrMoreTimes();
        $evt-&gt;shouldReceive('bubbleCancelled')
            -&gt;zeroOrMoreTimes()
            -&gt;andReturn(false);
        $evt-&gt;shouldReceive('setFailedRecipients')
            -&gt;once()
            -&gt;with(array('mark@swiftmailer.org'));
</codefragment>
  </duplication>
  <duplication lines="22" tokens="73">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/SendmailTransportTest.php" line="65"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/SendmailTransportTest.php" line="92"/>
    <codefragment>        $buf = $this-&gt;getBuffer();
        $sendmail = $this-&gt;getSendmail($buf);
        $message = $this-&gt;createMessage();

        $message-&gt;shouldReceive('getTo')
                -&gt;zeroOrMoreTimes()
                -&gt;andReturn(array('foo@bar' =&gt; 'Foobar', 'zip@button' =&gt; 'Zippy'));
        $message-&gt;shouldReceive('toByteStream')
                -&gt;once()
                -&gt;with($buf);
        $buf-&gt;shouldReceive('initialize')
            -&gt;once();
        $buf-&gt;shouldReceive('terminate')
            -&gt;once();
        $buf-&gt;shouldReceive('setWriteTranslations')
            -&gt;once()
            -&gt;with(array("\r\n" =&gt; "\n"));
        $buf-&gt;shouldReceive('setWriteTranslations')
            -&gt;once()
            -&gt;with(array());

        $sendmail-&gt;setCommand('/usr/sbin/sendmail -i -t');
</codefragment>
  </duplication>
  <duplication lines="25" tokens="74">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/SMimeSignerTest.php" line="226"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/SMimeSignerTest.php" line="264"/>
    <codefragment>        $message-&gt;attachSigner($signer);

        $messageStream = new Swift_ByteStream_TemporaryFileByteStream();
        $message-&gt;toByteStream($messageStream);
        $messageStream-&gt;commit();

        $entityString = $messageStream-&gt;getContent();
        $headers = self::getHeadersOfMessage($entityString);

        if (!preg_match('#^application/(x\-)?pkcs7-mime; smime-type=enveloped\-data;#', $headers['content-type'])) {
            $this-&gt;fail('Content-type does not match.');

            return false;
        }

        $expectedBody = '(?:^[a-zA-Z0-9\/\\r\\n+]*={0,2})';

        $decryptedMessageStream = new Swift_ByteStream_TemporaryFileByteStream();

        if (!openssl_pkcs7_decrypt($messageStream-&gt;getPath(), $decryptedMessageStream-&gt;getPath(), 'file://'.$this-&gt;samplesDir.'smime/encrypt.crt', array('file://'.$this-&gt;samplesDir.'smime/encrypt.key', 'swift'))) {
            $this-&gt;fail(sprintf('Decrypt of the message failed. Internal error "%s".', openssl_error_string()));
        }

        $this-&gt;assertEquals($originalMessage, $decryptedMessageStream-&gt;getContent());
        unset($decryptedMessageStream, $messageStream);
</codefragment>
  </duplication>
  <duplication lines="22" tokens="72">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/SMimeSignerTest.php" line="225"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/SMimeSignerTest.php" line="309"/>
    <codefragment>        $signer-&gt;setEncryptCertificate($this-&gt;samplesDir.'smime/encrypt.crt');
        $message-&gt;attachSigner($signer);

        $messageStream = new Swift_ByteStream_TemporaryFileByteStream();
        $message-&gt;toByteStream($messageStream);
        $messageStream-&gt;commit();

        $entityString = $messageStream-&gt;getContent();
        $headers = self::getHeadersOfMessage($entityString);

        if (!preg_match('#^application/(x\-)?pkcs7-mime; smime-type=enveloped\-data;#', $headers['content-type'])) {
            $this-&gt;fail('Content-type does not match.');

            return false;
        }

        $expectedBody = '(?:^[a-zA-Z0-9\/\\r\\n+]*={0,2})';

        $decryptedMessageStream = new Swift_ByteStream_TemporaryFileByteStream();

        if (!openssl_pkcs7_decrypt($messageStream-&gt;getPath(), $decryptedMessageStream-&gt;getPath(), 'file://'.$this-&gt;samplesDir.'smime/encrypt.crt', array('file://'.$this-&gt;samplesDir.'smime/encrypt.key', 'swift'))) {
            $this-&gt;fail(sprintf('Decrypt of the message failed. Internal error "%s".', openssl_error_string()));
</codefragment>
  </duplication>
  <duplication lines="51" tokens="72">
    <file path="/home/feighen/workspace/ussd/src/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/MorphOne.php" line="11"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/HasOne.php" line="11"/>
    <codefragment>    use SupportsDefaultModels;

    /**
     * Get the results of the relationship.
     *
     * @return mixed
     */
    public function getResults()
    {
        return $this-&gt;query-&gt;first() ?: $this-&gt;getDefaultFor($this-&gt;parent);
    }

    /**
     * Initialize the relation on a set of models.
     *
     * @param  array   $models
     * @param  string  $relation
     * @return array
     */
    public function initRelation(array $models, $relation)
    {
        foreach ($models as $model) {
            $model-&gt;setRelation($relation, $this-&gt;getDefaultFor($model));
        }

        return $models;
    }

    /**
     * Match the eagerly loaded results to their parents.
     *
     * @param  array   $models
     * @param  \Illuminate\Database\Eloquent\Collection  $results
     * @param  string  $relation
     * @return array
     */
    public function match(array $models, Collection $results, $relation)
    {
        return $this-&gt;matchOne($models, $results, $relation);
    }

    /**
     * Make a new related instance for the given model.
     *
     * @param  \Illuminate\Database\Eloquent\Model  $parent
     * @return \Illuminate\Database\Eloquent\Model
     */
    public function newRelatedInstanceFor(Model $parent)
    {
        return $this-&gt;related-&gt;newInstance()
                    -&gt;setAttribute($this-&gt;getForeignKeyName(), $parent-&gt;{$this-&gt;localKey})
</codefragment>
  </duplication>
  <duplication lines="53" tokens="96">
    <file path="/home/feighen/workspace/ussd/src/vendor/laravel/framework/src/Illuminate/Foundation/Console/MailMakeCommand.php" line="36"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravel/framework/src/Illuminate/Foundation/Console/NotificationMakeCommand.php" line="36"/>
    <codefragment>    public function handle()
    {
        if (parent::handle() === false &amp;&amp; ! $this-&gt;option('force')) {
            return;
        }

        if ($this-&gt;option('markdown')) {
            $this-&gt;writeMarkdownTemplate();
        }
    }

    /**
     * Write the Markdown template for the mailable.
     *
     * @return void
     */
    protected function writeMarkdownTemplate()
    {
        $path = resource_path('views/'.str_replace('.', '/', $this-&gt;option('markdown'))).'.blade.php';

        if (! $this-&gt;files-&gt;isDirectory(dirname($path))) {
            $this-&gt;files-&gt;makeDirectory(dirname($path), 0755, true);
        }

        $this-&gt;files-&gt;put($path, file_get_contents(__DIR__.'/stubs/markdown.stub'));
    }

    /**
     * Build the class with the given name.
     *
     * @param  string  $name
     * @return string
     */
    protected function buildClass($name)
    {
        $class = parent::buildClass($name);

        if ($this-&gt;option('markdown')) {
            $class = str_replace('DummyView', $this-&gt;option('markdown'), $class);
        }

        return $class;
    }

    /**
     * Get the stub file for the generator.
     *
     * @return string
     */
    protected function getStub()
    {
        return $this-&gt;option('markdown')
                        ? __DIR__.'/stubs/markdown-mail.stub'
</codefragment>
  </duplication>
  <duplication lines="18" tokens="83">
    <file path="/home/feighen/workspace/ussd/src/vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php" line="50"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-kernel/Tests/Log/LoggerTest.php" line="82"/>
    <codefragment>        $this-&gt;assertEquals($expected, $this-&gt;getLogs());
    }

    public function provideLevelsAndMessages()
    {
        return array(
            LogLevel::EMERGENCY =&gt; array(LogLevel::EMERGENCY, 'message of level emergency with context: {user}'),
            LogLevel::ALERT =&gt; array(LogLevel::ALERT, 'message of level alert with context: {user}'),
            LogLevel::CRITICAL =&gt; array(LogLevel::CRITICAL, 'message of level critical with context: {user}'),
            LogLevel::ERROR =&gt; array(LogLevel::ERROR, 'message of level error with context: {user}'),
            LogLevel::WARNING =&gt; array(LogLevel::WARNING, 'message of level warning with context: {user}'),
            LogLevel::NOTICE =&gt; array(LogLevel::NOTICE, 'message of level notice with context: {user}'),
            LogLevel::INFO =&gt; array(LogLevel::INFO, 'message of level info with context: {user}'),
            LogLevel::DEBUG =&gt; array(LogLevel::DEBUG, 'message of level debug with context: {user}'),
        );
    }

    /**
</codefragment>
  </duplication>
  <duplication lines="18" tokens="83">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-kernel/Tests/HttpCache/HttpCacheTest.php" line="270"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-kernel/Tests/HttpCache/HttpCacheTest.php" line="297"/>
    <codefragment>        $count = 0;

        $this-&gt;setNextResponse(200, array('Cache-Control' =&gt; 'public, max-age=10000'), '', function ($request, $response) use (&amp;$count) {
            ++$count;
            $response-&gt;setContent(1 == $count ? 'Hello World' : 'Goodbye World');
        });

        $this-&gt;request('GET', '/');
        $this-&gt;assertEquals(200, $this-&gt;response-&gt;getStatusCode());
        $this-&gt;assertEquals('Hello World', $this-&gt;response-&gt;getContent());
        $this-&gt;assertTraceContains('store');

        $this-&gt;request('GET', '/');
        $this-&gt;assertEquals(200, $this-&gt;response-&gt;getStatusCode());
        $this-&gt;assertEquals('Hello World', $this-&gt;response-&gt;getContent());
        $this-&gt;assertTraceContains('fresh');

        $this-&gt;cacheConfig['allow_reload'] = true;
</codefragment>
  </duplication>
  <duplication lines="20" tokens="91">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-kernel/Tests/HttpCache/HttpCacheTest.php" line="328"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-kernel/Tests/HttpCache/HttpCacheTest.php" line="358"/>
    <codefragment>        $count = 0;

        $this-&gt;setNextResponse(200, array(), '', function ($request, $response) use (&amp;$count) {
            ++$count;
            $response-&gt;headers-&gt;set('Cache-Control', 'public, max-age=10000');
            $response-&gt;setETag($count);
            $response-&gt;setContent(1 == $count ? 'Hello World' : 'Goodbye World');
        });

        $this-&gt;request('GET', '/');
        $this-&gt;assertEquals(200, $this-&gt;response-&gt;getStatusCode());
        $this-&gt;assertEquals('Hello World', $this-&gt;response-&gt;getContent());
        $this-&gt;assertTraceContains('store');

        $this-&gt;request('GET', '/');
        $this-&gt;assertEquals(200, $this-&gt;response-&gt;getStatusCode());
        $this-&gt;assertEquals('Hello World', $this-&gt;response-&gt;getContent());
        $this-&gt;assertTraceContains('fresh');

        $this-&gt;cacheConfig['allow_revalidate'] = true;
</codefragment>
  </duplication>
  <duplication lines="20" tokens="127">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-kernel/Tests/HttpCache/HttpCacheTest.php" line="524"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-kernel/Tests/HttpCache/HttpCacheTest.php" line="548"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-kernel/Tests/HttpCache/HttpCacheTest.php" line="612"/>
    <codefragment>        $this-&gt;request('GET', '/');
        $this-&gt;assertHttpKernelIsCalled();
        $this-&gt;assertEquals(200, $this-&gt;response-&gt;getStatusCode());
        $this-&gt;assertNotNull($this-&gt;response-&gt;headers-&gt;get('Date'));
        $this-&gt;assertTraceContains('miss');
        $this-&gt;assertTraceContains('store');
        $this-&gt;assertEquals('Hello World', $this-&gt;response-&gt;getContent());

        $this-&gt;request('GET', '/');
        $this-&gt;assertHttpKernelIsNotCalled();
        $this-&gt;assertEquals(200, $this-&gt;response-&gt;getStatusCode());
        $this-&gt;assertLessThan(2, strtotime($this-&gt;responses[0]-&gt;headers-&gt;get('Date')) - strtotime($this-&gt;response-&gt;headers-&gt;get('Date')));
        $this-&gt;assertGreaterThan(0, $this-&gt;response-&gt;headers-&gt;get('Age'));
        $this-&gt;assertNotNull($this-&gt;response-&gt;headers-&gt;get('X-Content-Digest'));
        $this-&gt;assertTraceContains('fresh');
        $this-&gt;assertTraceNotContains('store');
        $this-&gt;assertEquals('Hello World', $this-&gt;response-&gt;getContent());
    }

    public function testHitsCachedResponseWithMaxAgeDirective()
</codefragment>
  </duplication>
  <duplication lines="16" tokens="79">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-kernel/Tests/HttpCache/HttpCacheTest.php" line="655"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-kernel/Tests/HttpCache/HttpCacheTest.php" line="706"/>
    <codefragment>        $this-&gt;setNextResponse();

        $this-&gt;cacheConfig['default_ttl'] = 2;
        $this-&gt;request('GET', '/');
        $this-&gt;assertHttpKernelIsCalled();
        $this-&gt;assertTraceContains('miss');
        $this-&gt;assertTraceContains('store');
        $this-&gt;assertEquals('Hello World', $this-&gt;response-&gt;getContent());
        $this-&gt;assertRegExp('/s-maxage=2/', $this-&gt;response-&gt;headers-&gt;get('Cache-Control'));

        $this-&gt;request('GET', '/');
        $this-&gt;assertHttpKernelIsNotCalled();
        $this-&gt;assertEquals(200, $this-&gt;response-&gt;getStatusCode());
        $this-&gt;assertTraceContains('fresh');
        $this-&gt;assertTraceNotContains('store');
        $this-&gt;assertEquals('Hello World', $this-&gt;response-&gt;getContent());
</codefragment>
  </duplication>
  <duplication lines="15" tokens="79">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-kernel/Tests/HttpCache/HttpCacheTest.php" line="674"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-kernel/Tests/HttpCache/HttpCacheTest.php" line="724"/>
    <codefragment>        $values = $this-&gt;getMetaStorageValues();
        $this-&gt;assertCount(1, $values);
        $tmp = unserialize($values[0]);
        $time = \DateTime::createFromFormat('U', time() - 5);
        $tmp[0][1]['date'] = $time-&gt;format(DATE_RFC2822);
        $r = new \ReflectionObject($this-&gt;store);
        $m = $r-&gt;getMethod('save');
        $m-&gt;setAccessible(true);
        $m-&gt;invoke($this-&gt;store, 'md'.hash('sha256', 'http://localhost/'), serialize($tmp));

        $this-&gt;request('GET', '/');
        $this-&gt;assertHttpKernelIsCalled();
        $this-&gt;assertEquals(200, $this-&gt;response-&gt;getStatusCode());
        $this-&gt;assertTraceContains('stale');
        $this-&gt;assertTraceContains('invalid');
</codefragment>
  </duplication>
  <duplication lines="12" tokens="78">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-kernel/Tests/HttpCache/HttpCacheTest.php" line="1068"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-kernel/Tests/HttpCache/HttpCacheTest.php" line="1092"/>
    <codefragment>        $count = 0;
        $this-&gt;setNextResponse(200, array('Cache-Control' =&gt; 'max-age=10000'), '', function ($request, $response) use (&amp;$count) {
            $response-&gt;headers-&gt;set('Vary', 'Accept User-Agent Foo');
            $response-&gt;headers-&gt;set('Cache-Control', 'public, max-age=10');
            $response-&gt;headers-&gt;set('X-Response-Count', ++$count);
            $response-&gt;setContent($request-&gt;headers-&gt;get('USER_AGENT'));
        });

        $this-&gt;request('GET', '/', array('HTTP_ACCEPT' =&gt; 'text/html', 'HTTP_USER_AGENT' =&gt; 'Bob/1.0'));
        $this-&gt;assertEquals(200, $this-&gt;response-&gt;getStatusCode());
        $this-&gt;assertEquals('Bob/1.0', $this-&gt;response-&gt;getContent());
        $this-&gt;assertTraceContains('miss');
</codefragment>
  </duplication>
  <duplication lines="23" tokens="77">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-kernel/Tests/HttpCache/SsiTest.php" line="191"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-kernel/Tests/HttpCache/EsiTest.php" line="224"/>
    <codefragment>        $this-&gt;assertEquals('bar', $ssi-&gt;handle($cache, '/', '/alt', false));
    }

    protected function getCache($request, $response)
    {
        $cache = $this-&gt;getMockBuilder('Symfony\Component\HttpKernel\HttpCache\HttpCache')-&gt;setMethods(array('getRequest', 'handle'))-&gt;disableOriginalConstructor()-&gt;getMock();
        $cache-&gt;expects($this-&gt;any())
              -&gt;method('getRequest')
              -&gt;will($this-&gt;returnValue($request))
        ;
        if (is_array($response)) {
            $cache-&gt;expects($this-&gt;any())
                  -&gt;method('handle')
                  -&gt;will(call_user_func_array(array($this, 'onConsecutiveCalls'), $response))
            ;
        } else {
            $cache-&gt;expects($this-&gt;any())
                  -&gt;method('handle')
                  -&gt;will($this-&gt;returnValue($response))
            ;
        }

        return $cache;
</codefragment>
  </duplication>
  <duplication lines="11" tokens="77">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/debug/ErrorHandler.php" line="73"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/debug/Tests/ErrorHandlerTest.php" line="155"/>
    <codefragment>        E_STRICT =&gt; array(null, LogLevel::WARNING),
        E_WARNING =&gt; array(null, LogLevel::WARNING),
        E_USER_WARNING =&gt; array(null, LogLevel::WARNING),
        E_COMPILE_WARNING =&gt; array(null, LogLevel::WARNING),
        E_CORE_WARNING =&gt; array(null, LogLevel::WARNING),
        E_USER_ERROR =&gt; array(null, LogLevel::CRITICAL),
        E_RECOVERABLE_ERROR =&gt; array(null, LogLevel::CRITICAL),
        E_COMPILE_ERROR =&gt; array(null, LogLevel::CRITICAL),
        E_PARSE =&gt; array(null, LogLevel::CRITICAL),
        E_ERROR =&gt; array(null, LogLevel::CRITICAL),
        E_CORE_ERROR =&gt; array(null, LogLevel::CRITICAL),
</codefragment>
  </duplication>
  <duplication lines="57" tokens="181">
    <file path="/home/feighen/workspace/ussd/src/vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php" line="32"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php" line="109"/>
    <codefragment>    public function testImplements()
    {
        $this-&gt;assertInstanceOf('Psr\Log\LoggerInterface', $this-&gt;getLogger());
    }

    /**
     * @dataProvider provideLevelsAndMessages
     */
    public function testLogsAtAllLevels($level, $message)
    {
        $logger = $this-&gt;getLogger();
        $logger-&gt;{$level}($message, array('user' =&gt; 'Bob'));
        $logger-&gt;log($level, $message, array('user' =&gt; 'Bob'));

        $expected = array(
            $level.' message of level '.$level.' with context: Bob',
            $level.' message of level '.$level.' with context: Bob',
        );
        $this-&gt;assertEquals($expected, $this-&gt;getLogs());
    }

    public function provideLevelsAndMessages()
    {
        return array(
            LogLevel::EMERGENCY =&gt; array(LogLevel::EMERGENCY, 'message of level emergency with context: {user}'),
            LogLevel::ALERT =&gt; array(LogLevel::ALERT, 'message of level alert with context: {user}'),
            LogLevel::CRITICAL =&gt; array(LogLevel::CRITICAL, 'message of level critical with context: {user}'),
            LogLevel::ERROR =&gt; array(LogLevel::ERROR, 'message of level error with context: {user}'),
            LogLevel::WARNING =&gt; array(LogLevel::WARNING, 'message of level warning with context: {user}'),
            LogLevel::NOTICE =&gt; array(LogLevel::NOTICE, 'message of level notice with context: {user}'),
            LogLevel::INFO =&gt; array(LogLevel::INFO, 'message of level info with context: {user}'),
            LogLevel::DEBUG =&gt; array(LogLevel::DEBUG, 'message of level debug with context: {user}'),
        );
    }

    /**
     * @expectedException \Psr\Log\InvalidArgumentException
     */
    public function testThrowsOnInvalidLevel()
    {
        $logger = $this-&gt;getLogger();
        $logger-&gt;log('invalid level', 'Foo');
    }

    public function testContextReplacement()
    {
        $logger = $this-&gt;getLogger();
        $logger-&gt;info('{Message {nothing} {user} {foo.bar} a}', array('user' =&gt; 'Bob', 'foo.bar' =&gt; 'Bar'));

        $expected = array('info {Message {nothing} Bob Bar a}');
        $this-&gt;assertEquals($expected, $this-&gt;getLogs());
    }

    public function testObjectCastToString()
    {
        if (method_exists($this, 'createPartialMock')) {
            $dummy = $this-&gt;createPartialMock('Psr\Log\Test\DummyTest', array('__toString'));
</codefragment>
  </duplication>
  <duplication lines="44" tokens="119">
    <file path="/home/feighen/workspace/ussd/src/vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php" line="93"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php" line="169"/>
    <codefragment>            -&gt;method('__toString')
            -&gt;will($this-&gt;returnValue('DUMMY'));

        $this-&gt;getLogger()-&gt;warning($dummy);

        $expected = array('warning DUMMY');
        $this-&gt;assertEquals($expected, $this-&gt;getLogs());
    }

    public function testContextCanContainAnything()
    {
        $context = array(
            'bool' =&gt; true,
            'null' =&gt; null,
            'string' =&gt; 'Foo',
            'int' =&gt; 0,
            'float' =&gt; 0.5,
            'nested' =&gt; array('with object' =&gt; new DummyTest),
            'object' =&gt; new \DateTime,
            'resource' =&gt; fopen('php://memory', 'r'),
        );

        $this-&gt;getLogger()-&gt;warning('Crazy context data', $context);

        $expected = array('warning Crazy context data');
        $this-&gt;assertEquals($expected, $this-&gt;getLogs());
    }

    public function testContextExceptionKeyCanBeExceptionOrOtherValues()
    {
        $logger = $this-&gt;getLogger();
        $logger-&gt;warning('Random message', array('exception' =&gt; 'oops'));
        $logger-&gt;critical('Uncaught Exception!', array('exception' =&gt; new \LogicException('Fail')));

        $expected = array(
            'warning Random message',
            'critical Uncaught Exception!'
        );
        $this-&gt;assertEquals($expected, $this-&gt;getLogs());
    }
}

class DummyTest
{
</codefragment>
  </duplication>
  <duplication lines="10" tokens="124">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/console/Tests/Helper/QuestionHelperTest.php" line="129"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/console/Tests/Helper/QuestionHelperTest.php" line="551"/>
    <codefragment>        $question-&gt;setAutocompleterValues(array('AcmeDemoBundle', 'AsseticBundle', 'SecurityBundle', 'FooBundle'));

        $this-&gt;assertEquals('AcmeDemoBundle', $dialog-&gt;ask($this-&gt;createStreamableInputInterfaceMock($inputStream), $this-&gt;createOutputInterface(), $question));
        $this-&gt;assertEquals('AsseticBundleTest', $dialog-&gt;ask($this-&gt;createStreamableInputInterfaceMock($inputStream), $this-&gt;createOutputInterface(), $question));
        $this-&gt;assertEquals('FrameworkBundle', $dialog-&gt;ask($this-&gt;createStreamableInputInterfaceMock($inputStream), $this-&gt;createOutputInterface(), $question));
        $this-&gt;assertEquals('SecurityBundle', $dialog-&gt;ask($this-&gt;createStreamableInputInterfaceMock($inputStream), $this-&gt;createOutputInterface(), $question));
        $this-&gt;assertEquals('FooBundleTest', $dialog-&gt;ask($this-&gt;createStreamableInputInterfaceMock($inputStream), $this-&gt;createOutputInterface(), $question));
        $this-&gt;assertEquals('AcmeDemoBundle', $dialog-&gt;ask($this-&gt;createStreamableInputInterfaceMock($inputStream), $this-&gt;createOutputInterface(), $question));
        $this-&gt;assertEquals('AsseticBundle', $dialog-&gt;ask($this-&gt;createStreamableInputInterfaceMock($inputStream), $this-&gt;createOutputInterface(), $question));
        $this-&gt;assertEquals('FooBundle', $dialog-&gt;ask($this-&gt;createStreamableInputInterfaceMock($inputStream), $this-&gt;createOutputInterface(), $question));
</codefragment>
  </duplication>
  <duplication lines="22" tokens="127">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/console/Tests/Helper/QuestionHelperTest.php" line="58"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php" line="45"/>
    <codefragment>        try {
            $question = new ChoiceQuestion('What is your favorite superhero?', $heroes, '1');
            $question-&gt;setMaxAttempts(1);
            $questionHelper-&gt;ask($this-&gt;createStreamableInputInterfaceMock($inputStream), $output = $this-&gt;createOutputInterface(), $question);
            $this-&gt;fail();
        } catch (\InvalidArgumentException $e) {
            $this-&gt;assertEquals('Value "Fabien" is invalid', $e-&gt;getMessage());
        }

        $question = new ChoiceQuestion('What is your favorite superhero?', $heroes, null);
        $question-&gt;setMaxAttempts(1);
        $question-&gt;setMultiselect(true);

        $this-&gt;assertEquals(array('Batman'), $questionHelper-&gt;ask($this-&gt;createStreamableInputInterfaceMock($inputStream), $this-&gt;createOutputInterface(), $question));
        $this-&gt;assertEquals(array('Superman', 'Spiderman'), $questionHelper-&gt;ask($this-&gt;createStreamableInputInterfaceMock($inputStream), $this-&gt;createOutputInterface(), $question));
        $this-&gt;assertEquals(array('Superman', 'Spiderman'), $questionHelper-&gt;ask($this-&gt;createStreamableInputInterfaceMock($inputStream), $this-&gt;createOutputInterface(), $question));

        $question = new ChoiceQuestion('What is your favorite superhero?', $heroes, '0,1');
        $question-&gt;setMaxAttempts(1);
        $question-&gt;setMultiselect(true);

        $this-&gt;assertEquals(array('Superman', 'Batman'), $questionHelper-&gt;ask($this-&gt;createStreamableInputInterfaceMock($inputStream), $this-&gt;createOutputInterface(), $question));
</codefragment>
  </duplication>
  <duplication lines="22" tokens="93">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/console/Tests/Tester/CommandTesterTest.php" line="48"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/console/Tests/Tester/ApplicationTesterTest.php" line="49"/>
    <codefragment>        $this-&gt;assertFalse($this-&gt;tester-&gt;getInput()-&gt;isInteractive(), '-&gt;execute() takes an interactive option');
        $this-&gt;assertFalse($this-&gt;tester-&gt;getOutput()-&gt;isDecorated(), '-&gt;execute() takes a decorated option');
        $this-&gt;assertEquals(Output::VERBOSITY_VERBOSE, $this-&gt;tester-&gt;getOutput()-&gt;getVerbosity(), '-&gt;execute() takes a verbosity option');
    }

    public function testGetInput()
    {
        $this-&gt;assertEquals('bar', $this-&gt;tester-&gt;getInput()-&gt;getArgument('foo'), '-&gt;getInput() returns the current input instance');
    }

    public function testGetOutput()
    {
        rewind($this-&gt;tester-&gt;getOutput()-&gt;getStream());
        $this-&gt;assertEquals('foo'.PHP_EOL, stream_get_contents($this-&gt;tester-&gt;getOutput()-&gt;getStream()), '-&gt;getOutput() returns the current output instance');
    }

    public function testGetDisplay()
    {
        $this-&gt;assertEquals('foo'.PHP_EOL, $this-&gt;tester-&gt;getDisplay(), '-&gt;getDisplay() returns the display of the last execution');
    }

    public function testGetStatusCode()
</codefragment>
  </duplication>
  <duplication lines="17" tokens="73">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/yaml/Tests/InlineTest.php" line="345"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/yaml/Tests/InlineTest.php" line="416"/>
    <codefragment>            array('2007-10-30', gmmktime(0, 0, 0, 10, 30, 2007)),
            array('2007-10-30T02:59:43Z', gmmktime(2, 59, 43, 10, 30, 2007)),
            array('2007-10-30 02:59:43 Z', gmmktime(2, 59, 43, 10, 30, 2007)),
            array('1960-10-30 02:59:43 Z', gmmktime(2, 59, 43, 10, 30, 1960)),
            array('1730-10-30T02:59:43Z', gmmktime(2, 59, 43, 10, 30, 1730)),

            array('"a \\"string\\" with \'quoted strings inside\'"', 'a "string" with \'quoted strings inside\''),
            array("'a \"string\" with ''quoted strings inside'''", 'a "string" with \'quoted strings inside\''),

            // sequences
            // urls are no key value mapping. see #3609. Valid yaml "key: value" mappings require a space after the colon
            array('[foo, http://urls.are/no/mappings, false, null, 12]', array('foo', 'http://urls.are/no/mappings', false, null, 12)),
            array('[  foo  ,   bar , false  ,  null     ,  12  ]', array('foo', 'bar', false, null, 12)),
            array('[\'foo,bar\', \'foo bar\']', array('foo,bar', 'foo bar')),

            // mappings
            array('{foo: bar,bar: foo,"false": false, "null": null,integer: 12}', array('foo' =&gt; 'bar', 'bar' =&gt; 'foo', 'false' =&gt; false, 'null' =&gt; null, 'integer' =&gt; 12)),
</codefragment>
  </duplication>
  <duplication lines="13" tokens="78">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Compiler/RegisterServiceSubscribersPassTest.php" line="72"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Compiler/RegisterServiceSubscribersPassTest.php" line="102"/>
    <codefragment>        (new RegisterServiceSubscribersPass())-&gt;process($container);
        (new ResolveServiceSubscribersPass())-&gt;process($container);

        $foo = $container-&gt;getDefinition('foo');
        $locator = $container-&gt;getDefinition((string) $foo-&gt;getArgument(0));

        $this-&gt;assertFalse($locator-&gt;isPublic());
        $this-&gt;assertSame(ServiceLocator::class, $locator-&gt;getClass());

        $expected = array(
            TestServiceSubscriber::class =&gt; new ServiceClosureArgument(new TypedReference(TestServiceSubscriber::class, TestServiceSubscriber::class)),
            CustomDefinition::class =&gt; new ServiceClosureArgument(new TypedReference(CustomDefinition::class, CustomDefinition::class, ContainerInterface::IGNORE_ON_INVALID_REFERENCE)),
            'bar' =&gt; new ServiceClosureArgument(new TypedReference(CustomDefinition::class, CustomDefinition::class)),
</codefragment>
  </duplication>
  <duplication lines="40" tokens="134">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services10.php" line="73"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services_rot13_env.php" line="86"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services_array_params.php" line="81"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services12.php" line="77"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services26.php" line="90"/>
    <codefragment>    public function getParameter($name)
    {
        $name = (string) $name;

        if (!(isset($this-&gt;parameters[$name]) || isset($this-&gt;loadedDynamicParameters[$name]) || array_key_exists($name, $this-&gt;parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }
        if (isset($this-&gt;loadedDynamicParameters[$name])) {
            return $this-&gt;loadedDynamicParameters[$name] ? $this-&gt;dynamicParameters[$name] : $this-&gt;getDynamicParameter($name);
        }

        return $this-&gt;parameters[$name];
    }

    public function hasParameter($name)
    {
        $name = (string) $name;

        return isset($this-&gt;parameters[$name]) || isset($this-&gt;loadedDynamicParameters[$name]) || array_key_exists($name, $this-&gt;parameters);
    }

    public function setParameter($name, $value)
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag()
    {
        if (null === $this-&gt;parameterBag) {
            $parameters = $this-&gt;parameters;
            foreach ($this-&gt;loadedDynamicParameters as $name =&gt; $loaded) {
                $parameters[$name] = $loaded ? $this-&gt;dynamicParameters[$name] : $this-&gt;getDynamicParameter($name);
            }
            $this-&gt;parameterBag = new FrozenParameterBag($parameters);
        }

        return $this-&gt;parameterBag;
    }

    private $loadedDynamicParameters = array();
</codefragment>
  </duplication>
  <duplication lines="64" tokens="152">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services10.php" line="73"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services_env_in_id.php" line="86"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services_errored_definition.php" line="434"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services_inline_requires.php" line="110"/>
    <codefragment>    public function getParameter($name)
    {
        $name = (string) $name;

        if (!(isset($this-&gt;parameters[$name]) || isset($this-&gt;loadedDynamicParameters[$name]) || array_key_exists($name, $this-&gt;parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }
        if (isset($this-&gt;loadedDynamicParameters[$name])) {
            return $this-&gt;loadedDynamicParameters[$name] ? $this-&gt;dynamicParameters[$name] : $this-&gt;getDynamicParameter($name);
        }

        return $this-&gt;parameters[$name];
    }

    public function hasParameter($name)
    {
        $name = (string) $name;

        return isset($this-&gt;parameters[$name]) || isset($this-&gt;loadedDynamicParameters[$name]) || array_key_exists($name, $this-&gt;parameters);
    }

    public function setParameter($name, $value)
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag()
    {
        if (null === $this-&gt;parameterBag) {
            $parameters = $this-&gt;parameters;
            foreach ($this-&gt;loadedDynamicParameters as $name =&gt; $loaded) {
                $parameters[$name] = $loaded ? $this-&gt;dynamicParameters[$name] : $this-&gt;getDynamicParameter($name);
            }
            $this-&gt;parameterBag = new FrozenParameterBag($parameters);
        }

        return $this-&gt;parameterBag;
    }

    private $loadedDynamicParameters = array();
    private $dynamicParameters = array();

    /**
     * Computes a dynamic parameter.
     *
     * @param string The name of the dynamic parameter to load
     *
     * @return mixed The value of the dynamic parameter
     *
     * @throws InvalidArgumentException When the dynamic parameter does not exist
     */
    private function getDynamicParameter($name)
    {
        throw new InvalidArgumentException(sprintf('The dynamic parameter "%s" must be defined.', $name));
    }

    /**
     * Gets the default parameters.
     *
     * @return array An array of the default parameters
     */
    protected function getDefaultParameters()
    {
        return array(
</codefragment>
  </duplication>
  <duplication lines="41" tokens="137">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services10.php" line="73"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services_json_env.php" line="60"/>
    <codefragment>    public function getParameter($name)
    {
        $name = (string) $name;

        if (!(isset($this-&gt;parameters[$name]) || isset($this-&gt;loadedDynamicParameters[$name]) || array_key_exists($name, $this-&gt;parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }
        if (isset($this-&gt;loadedDynamicParameters[$name])) {
            return $this-&gt;loadedDynamicParameters[$name] ? $this-&gt;dynamicParameters[$name] : $this-&gt;getDynamicParameter($name);
        }

        return $this-&gt;parameters[$name];
    }

    public function hasParameter($name)
    {
        $name = (string) $name;

        return isset($this-&gt;parameters[$name]) || isset($this-&gt;loadedDynamicParameters[$name]) || array_key_exists($name, $this-&gt;parameters);
    }

    public function setParameter($name, $value)
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag()
    {
        if (null === $this-&gt;parameterBag) {
            $parameters = $this-&gt;parameters;
            foreach ($this-&gt;loadedDynamicParameters as $name =&gt; $loaded) {
                $parameters[$name] = $loaded ? $this-&gt;dynamicParameters[$name] : $this-&gt;getDynamicParameter($name);
            }
            $this-&gt;parameterBag = new FrozenParameterBag($parameters);
        }

        return $this-&gt;parameterBag;
    }

    private $loadedDynamicParameters = array();
    private $dynamicParameters = array();
</codefragment>
  </duplication>
  <duplication lines="51" tokens="71">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services_non_shared_lazy.php" line="17"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services13.php" line="17"/>
    <codefragment>class ProjectServiceContainer extends Container
{
    private $parameters;
    private $targetDirs = array();

    /**
     * @internal but protected for BC on cache:clear
     */
    protected $privates = array();

    public function __construct()
    {
        $this-&gt;services = $this-&gt;privates = array();
        $this-&gt;methodMap = array(
            'bar' =&gt; 'getBarService',
        );

        $this-&gt;aliases = array();
    }

    public function reset()
    {
        $this-&gt;privates = array();
        parent::reset();
    }

    public function compile()
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled()
    {
        return true;
    }

    public function getRemovedIds()
    {
        return array(
            'Psr\\Container\\ContainerInterface' =&gt; true,
            'Symfony\\Component\\DependencyInjection\\ContainerInterface' =&gt; true,
            'foo' =&gt; true,
        );
    }

    protected function createProxy($class, \Closure $factory)
    {
        return $factory();
    }

    /**
</codefragment>
  </duplication>
  <duplication lines="100" tokens="215">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services_json_env.php" line="17"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services_base64_env.php" line="17"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services_csv_env.php" line="17"/>
    <codefragment>class Symfony_DI_PhpDumper_Test_JsonParameters extends Container
{
    private $parameters;
    private $targetDirs = array();

    /**
     * @internal but protected for BC on cache:clear
     */
    protected $privates = array();

    public function __construct()
    {
        $this-&gt;parameters = $this-&gt;getDefaultParameters();

        $this-&gt;services = $this-&gt;privates = array();

        $this-&gt;aliases = array();
    }

    public function reset()
    {
        $this-&gt;privates = array();
        parent::reset();
    }

    public function compile()
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled()
    {
        return true;
    }

    public function getRemovedIds()
    {
        return array(
            'Psr\\Container\\ContainerInterface' =&gt; true,
            'Symfony\\Component\\DependencyInjection\\ContainerInterface' =&gt; true,
        );
    }

    public function getParameter($name)
    {
        $name = (string) $name;

        if (!(isset($this-&gt;parameters[$name]) || isset($this-&gt;loadedDynamicParameters[$name]) || array_key_exists($name, $this-&gt;parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }
        if (isset($this-&gt;loadedDynamicParameters[$name])) {
            return $this-&gt;loadedDynamicParameters[$name] ? $this-&gt;dynamicParameters[$name] : $this-&gt;getDynamicParameter($name);
        }

        return $this-&gt;parameters[$name];
    }

    public function hasParameter($name)
    {
        $name = (string) $name;

        return isset($this-&gt;parameters[$name]) || isset($this-&gt;loadedDynamicParameters[$name]) || array_key_exists($name, $this-&gt;parameters);
    }

    public function setParameter($name, $value)
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag()
    {
        if (null === $this-&gt;parameterBag) {
            $parameters = $this-&gt;parameters;
            foreach ($this-&gt;loadedDynamicParameters as $name =&gt; $loaded) {
                $parameters[$name] = $loaded ? $this-&gt;dynamicParameters[$name] : $this-&gt;getDynamicParameter($name);
            }
            $this-&gt;parameterBag = new FrozenParameterBag($parameters);
        }

        return $this-&gt;parameterBag;
    }

    private $loadedDynamicParameters = array(
        'hello' =&gt; false,
        'hello-bar' =&gt; false,
    );
    private $dynamicParameters = array();

    /**
     * Computes a dynamic parameter.
     *
     * @param string The name of the dynamic parameter to load
     *
     * @return mixed The value of the dynamic parameter
     *
     * @throws InvalidArgumentException When the dynamic parameter does not exist
     */
    private function getDynamicParameter($name)
    {
        switch ($name) {
</codefragment>
  </duplication>
  <duplication lines="32" tokens="70">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services_array_params.php" line="5"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services_inline_requires.php" line="5"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services12.php" line="5"/>
    <codefragment>use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

/**
 * This class has been auto-generated
 * by the Symfony Dependency Injection Component.
 *
 * @final since Symfony 3.3
 */
class ProjectServiceContainer extends Container
{
    private $parameters;
    private $targetDirs = array();

    /**
     * @internal but protected for BC on cache:clear
     */
    protected $privates = array();

    public function __construct()
    {
        $dir = __DIR__;
        for ($i = 1; $i &lt;= 5; ++$i) {
            $this-&gt;targetDirs[$i] = $dir = \dirname($dir);
        }
        $this-&gt;parameters = $this-&gt;getDefaultParameters();

        $this-&gt;services = $this-&gt;privates = array();
        $this-&gt;methodMap = array(
</codefragment>
  </duplication>
  <duplication lines="107" tokens="215">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services_json_env.php" line="17"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services8.php" line="17"/>
    <codefragment>class Symfony_DI_PhpDumper_Test_JsonParameters extends Container
{
    private $parameters;
    private $targetDirs = array();

    /**
     * @internal but protected for BC on cache:clear
     */
    protected $privates = array();

    public function __construct()
    {
        $this-&gt;parameters = $this-&gt;getDefaultParameters();

        $this-&gt;services = $this-&gt;privates = array();

        $this-&gt;aliases = array();
    }

    public function reset()
    {
        $this-&gt;privates = array();
        parent::reset();
    }

    public function compile()
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled()
    {
        return true;
    }

    public function getRemovedIds()
    {
        return array(
            'Psr\\Container\\ContainerInterface' =&gt; true,
            'Symfony\\Component\\DependencyInjection\\ContainerInterface' =&gt; true,
        );
    }

    public function getParameter($name)
    {
        $name = (string) $name;

        if (!(isset($this-&gt;parameters[$name]) || isset($this-&gt;loadedDynamicParameters[$name]) || array_key_exists($name, $this-&gt;parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }
        if (isset($this-&gt;loadedDynamicParameters[$name])) {
            return $this-&gt;loadedDynamicParameters[$name] ? $this-&gt;dynamicParameters[$name] : $this-&gt;getDynamicParameter($name);
        }

        return $this-&gt;parameters[$name];
    }

    public function hasParameter($name)
    {
        $name = (string) $name;

        return isset($this-&gt;parameters[$name]) || isset($this-&gt;loadedDynamicParameters[$name]) || array_key_exists($name, $this-&gt;parameters);
    }

    public function setParameter($name, $value)
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag()
    {
        if (null === $this-&gt;parameterBag) {
            $parameters = $this-&gt;parameters;
            foreach ($this-&gt;loadedDynamicParameters as $name =&gt; $loaded) {
                $parameters[$name] = $loaded ? $this-&gt;dynamicParameters[$name] : $this-&gt;getDynamicParameter($name);
            }
            $this-&gt;parameterBag = new FrozenParameterBag($parameters);
        }

        return $this-&gt;parameterBag;
    }

    private $loadedDynamicParameters = array(
        'hello' =&gt; false,
        'hello-bar' =&gt; false,
    );
    private $dynamicParameters = array();

    /**
     * Computes a dynamic parameter.
     *
     * @param string The name of the dynamic parameter to load
     *
     * @return mixed The value of the dynamic parameter
     *
     * @throws InvalidArgumentException When the dynamic parameter does not exist
     */
    private function getDynamicParameter($name)
    {
        switch ($name) {
            case 'hello': $value = $this-&gt;getEnv('json:foo'); break;
            case 'hello-bar': $value = $this-&gt;getEnv('json:bar'); break;
            default: throw new InvalidArgumentException(sprintf('The dynamic parameter "%s" must be defined.', $name));
        }
        $this-&gt;loadedDynamicParameters[$name] = true;

        return $this-&gt;dynamicParameters[$name] = $value;
</codefragment>
  </duplication>
  <duplication lines="117" tokens="234">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services_errored_definition.php" line="17"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services9_compiled.php" line="17"/>
    <codefragment>class Symfony_DI_PhpDumper_Errored_Definition extends Container
{
    private $parameters;
    private $targetDirs = array();

    /**
     * @internal but protected for BC on cache:clear
     */
    protected $privates = array();

    public function __construct()
    {
        $this-&gt;parameters = $this-&gt;getDefaultParameters();

        $this-&gt;services = $this-&gt;privates = array();
        $this-&gt;syntheticIds = array(
            'request' =&gt; true,
        );
        $this-&gt;methodMap = array(
            'BAR' =&gt; 'getBARService',
            'BAR2' =&gt; 'getBAR2Service',
            'bar' =&gt; 'getBar3Service',
            'bar2' =&gt; 'getBar22Service',
            'baz' =&gt; 'getBazService',
            'configured_service' =&gt; 'getConfiguredServiceService',
            'configured_service_simple' =&gt; 'getConfiguredServiceSimpleService',
            'decorator_service' =&gt; 'getDecoratorServiceService',
            'decorator_service_with_name' =&gt; 'getDecoratorServiceWithNameService',
            'deprecated_service' =&gt; 'getDeprecatedServiceService',
            'factory_service' =&gt; 'getFactoryServiceService',
            'factory_service_simple' =&gt; 'getFactoryServiceSimpleService',
            'foo' =&gt; 'getFooService',
            'foo.baz' =&gt; 'getFoo_BazService',
            'foo_bar' =&gt; 'getFooBarService',
            'foo_with_inline' =&gt; 'getFooWithInlineService',
            'lazy_context' =&gt; 'getLazyContextService',
            'lazy_context_ignore_invalid_ref' =&gt; 'getLazyContextIgnoreInvalidRefService',
            'method_call1' =&gt; 'getMethodCall1Service',
            'new_factory_service' =&gt; 'getNewFactoryServiceService',
            'runtime_error' =&gt; 'getRuntimeErrorService',
            'service_from_static_method' =&gt; 'getServiceFromStaticMethodService',
            'tagged_iterator' =&gt; 'getTaggedIteratorService',
        );
        $this-&gt;aliases = array(
            'alias_for_alias' =&gt; 'foo',
            'alias_for_foo' =&gt; 'foo',
            'decorated' =&gt; 'decorator_service_with_name',
        );
    }

    public function reset()
    {
        $this-&gt;privates = array();
        parent::reset();
    }

    public function compile()
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled()
    {
        return true;
    }

    public function getRemovedIds()
    {
        return array(
            'Psr\\Container\\ContainerInterface' =&gt; true,
            'Symfony\\Component\\DependencyInjection\\ContainerInterface' =&gt; true,
            'configurator_service' =&gt; true,
            'configurator_service_simple' =&gt; true,
            'decorated.pif-pouf' =&gt; true,
            'decorator_service.inner' =&gt; true,
            'errored_definition' =&gt; true,
            'factory_simple' =&gt; true,
            'inlined' =&gt; true,
            'new_factory' =&gt; true,
            'tagged_iterator_foo' =&gt; true,
        );
    }

    /**
     * Gets the public 'BAR' shared service.
     *
     * @return \stdClass
     */
    protected function getBARService()
    {
        $this-&gt;services['BAR'] = $instance = new \stdClass();

        $instance-&gt;bar = ($this-&gt;services['bar'] ?? $this-&gt;getBar3Service());

        return $instance;
    }

    /**
     * Gets the public 'BAR2' shared service.
     *
     * @return \stdClass
     */
    protected function getBAR2Service()
    {
        return $this-&gt;services['BAR2'] = new \stdClass();
    }

    /**
     * Gets the public 'bar' shared service.
     *
     * @return \Bar\FooClass
     */
    protected function getBar3Service()
    {
        $a = ($this-&gt;services['foo.baz'] ?? $this-&gt;getFoo_BazService());

        $this-&gt;services['bar'] = $instance = new \Bar\FooClass('foo', $a, 'foo_bar');
</codefragment>
  </duplication>
  <duplication lines="368" tokens="686">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services_errored_definition.php" line="133"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Fixtures/php/services9_compiled.php" line="133"/>
    <codefragment>        $this-&gt;services['bar'] = $instance = new \Bar\FooClass('foo', $a, 'foo_bar');

        $a-&gt;configure($instance);

        return $instance;
    }

    /**
     * Gets the public 'bar2' shared service.
     *
     * @return \stdClass
     */
    protected function getBar22Service()
    {
        return $this-&gt;services['bar2'] = new \stdClass();
    }

    /**
     * Gets the public 'baz' shared service.
     *
     * @return \Baz
     */
    protected function getBazService()
    {
        $this-&gt;services['baz'] = $instance = new \Baz();

        $instance-&gt;setFoo(($this-&gt;services['foo_with_inline'] ?? $this-&gt;getFooWithInlineService()));

        return $instance;
    }

    /**
     * Gets the public 'configured_service' shared service.
     *
     * @return \stdClass
     */
    protected function getConfiguredServiceService()
    {
        $this-&gt;services['configured_service'] = $instance = new \stdClass();

        $a = new \ConfClass();
        $a-&gt;setFoo(($this-&gt;services['baz'] ?? $this-&gt;getBazService()));

        $a-&gt;configureStdClass($instance);

        return $instance;
    }

    /**
     * Gets the public 'configured_service_simple' shared service.
     *
     * @return \stdClass
     */
    protected function getConfiguredServiceSimpleService()
    {
        $this-&gt;services['configured_service_simple'] = $instance = new \stdClass();

        (new \ConfClass('bar'))-&gt;configureStdClass($instance);

        return $instance;
    }

    /**
     * Gets the public 'decorator_service' shared service.
     *
     * @return \stdClass
     */
    protected function getDecoratorServiceService()
    {
        return $this-&gt;services['decorator_service'] = new \stdClass();
    }

    /**
     * Gets the public 'decorator_service_with_name' shared service.
     *
     * @return \stdClass
     */
    protected function getDecoratorServiceWithNameService()
    {
        return $this-&gt;services['decorator_service_with_name'] = new \stdClass();
    }

    /**
     * Gets the public 'deprecated_service' shared service.
     *
     * @return \stdClass
     *
     * @deprecated The "deprecated_service" service is deprecated. You should stop using it, as it will soon be removed.
     */
    protected function getDeprecatedServiceService()
    {
        @trigger_error('The "deprecated_service" service is deprecated. You should stop using it, as it will soon be removed.', E_USER_DEPRECATED);

        return $this-&gt;services['deprecated_service'] = new \stdClass();
    }

    /**
     * Gets the public 'factory_service' shared service.
     *
     * @return \Bar
     */
    protected function getFactoryServiceService()
    {
        return $this-&gt;services['factory_service'] = ($this-&gt;services['foo.baz'] ?? $this-&gt;getFoo_BazService())-&gt;getInstance();
    }

    /**
     * Gets the public 'factory_service_simple' shared service.
     *
     * @return \Bar
     */
    protected function getFactoryServiceSimpleService()
    {
        return $this-&gt;services['factory_service_simple'] = ($this-&gt;privates['factory_simple'] ?? $this-&gt;getFactorySimpleService())-&gt;getInstance();
    }

    /**
     * Gets the public 'foo' shared service.
     *
     * @return \Bar\FooClass
     */
    protected function getFooService()
    {
        $a = ($this-&gt;services['foo.baz'] ?? $this-&gt;getFoo_BazService());

        $this-&gt;services['foo'] = $instance = \Bar\FooClass::getInstance('foo', $a, array('bar' =&gt; 'foo is bar', 'foobar' =&gt; 'bar'), true, $this);

        $instance-&gt;foo = 'bar';
        $instance-&gt;moo = $a;
        $instance-&gt;qux = array('bar' =&gt; 'foo is bar', 'foobar' =&gt; 'bar');
        $instance-&gt;setBar(($this-&gt;services['bar'] ?? $this-&gt;getBar3Service()));
        $instance-&gt;initialize();
        sc_configure($instance);

        return $instance;
    }

    /**
     * Gets the public 'foo.baz' shared service.
     *
     * @return \BazClass
     */
    protected function getFoo_BazService()
    {
        $this-&gt;services['foo.baz'] = $instance = \BazClass::getInstance();

        \BazClass::configureStatic1($instance);

        return $instance;
    }

    /**
     * Gets the public 'foo_bar' service.
     *
     * @return \Bar\FooClass
     */
    protected function getFooBarService()
    {
        return new \Bar\FooClass(($this-&gt;services['deprecated_service'] ?? $this-&gt;getDeprecatedServiceService()));
    }

    /**
     * Gets the public 'foo_with_inline' shared service.
     *
     * @return \Foo
     */
    protected function getFooWithInlineService()
    {
        $this-&gt;services['foo_with_inline'] = $instance = new \Foo();

        $a = new \Bar();

        $a-&gt;pub = 'pub';
        $a-&gt;setBaz(($this-&gt;services['baz'] ?? $this-&gt;getBazService()));

        $instance-&gt;setBar($a);

        return $instance;
    }

    /**
     * Gets the public 'lazy_context' shared service.
     *
     * @return \LazyContext
     */
    protected function getLazyContextService()
    {
        return $this-&gt;services['lazy_context'] = new \LazyContext(new RewindableGenerator(function () {
            yield 'k1' =&gt; ($this-&gt;services['foo.baz'] ?? $this-&gt;getFoo_BazService());
            yield 'k2' =&gt; $this;
        }, 2), new RewindableGenerator(function () {
            return new \EmptyIterator();
        }, 0));
    }

    /**
     * Gets the public 'lazy_context_ignore_invalid_ref' shared service.
     *
     * @return \LazyContext
     */
    protected function getLazyContextIgnoreInvalidRefService()
    {
        return $this-&gt;services['lazy_context_ignore_invalid_ref'] = new \LazyContext(new RewindableGenerator(function () {
            yield 0 =&gt; ($this-&gt;services['foo.baz'] ?? $this-&gt;getFoo_BazService());
        }, 1), new RewindableGenerator(function () {
            return new \EmptyIterator();
        }, 0));
    }

    /**
     * Gets the public 'method_call1' shared service.
     *
     * @return \Bar\FooClass
     */
    protected function getMethodCall1Service()
    {
        include_once '%path%foo.php';

        $this-&gt;services['method_call1'] = $instance = new \Bar\FooClass();

        $instance-&gt;setBar(($this-&gt;services['foo'] ?? $this-&gt;getFooService()));
        $instance-&gt;setBar(NULL);
        $instance-&gt;setBar((($this-&gt;services['foo'] ?? $this-&gt;getFooService())-&gt;foo() . (($this-&gt;hasParameter("foo")) ? ($this-&gt;getParameter("foo")) : ("default"))));

        return $instance;
    }

    /**
     * Gets the public 'new_factory_service' shared service.
     *
     * @return \FooBarBaz
     */
    protected function getNewFactoryServiceService()
    {
        $a = new \FactoryClass();
        $a-&gt;foo = 'bar';

        $this-&gt;services['new_factory_service'] = $instance = $a-&gt;getInstance();

        $instance-&gt;foo = 'bar';

        return $instance;
    }

    /**
     * Gets the public 'runtime_error' shared service.
     *
     * @return \stdClass
     */
    protected function getRuntimeErrorService()
    {
        return $this-&gt;services['runtime_error'] = new \stdClass(($this-&gt;privates['errored_definition'] ?? $this-&gt;getErroredDefinitionService()));
    }

    /**
     * Gets the public 'service_from_static_method' shared service.
     *
     * @return \Bar\FooClass
     */
    protected function getServiceFromStaticMethodService()
    {
        return $this-&gt;services['service_from_static_method'] = \Bar\FooClass::getInstance();
    }

    /**
     * Gets the public 'tagged_iterator' shared service.
     *
     * @return \Bar
     */
    protected function getTaggedIteratorService()
    {
        return $this-&gt;services['tagged_iterator'] = new \Bar(new RewindableGenerator(function () {
            yield 0 =&gt; ($this-&gt;services['foo'] ?? $this-&gt;getFooService());
            yield 1 =&gt; ($this-&gt;privates['tagged_iterator_foo'] ?? $this-&gt;privates['tagged_iterator_foo'] = new \Bar());
        }, 2));
    }

    /**
     * Gets the private 'errored_definition' shared service.
     *
     * @return \stdClass
     */
    protected function getErroredDefinitionService()
    {
        throw new RuntimeException('Service "errored_definition" is broken.');
    }

    /**
     * Gets the private 'factory_simple' shared service.
     *
     * @return \SimpleFactoryClass
     *
     * @deprecated The "factory_simple" service is deprecated. You should stop using it, as it will soon be removed.
     */
    protected function getFactorySimpleService()
    {
        @trigger_error('The "factory_simple" service is deprecated. You should stop using it, as it will soon be removed.', E_USER_DEPRECATED);

        return $this-&gt;privates['factory_simple'] = new \SimpleFactoryClass('foo');
    }

    public function getParameter($name)
    {
        $name = (string) $name;

        if (!(isset($this-&gt;parameters[$name]) || isset($this-&gt;loadedDynamicParameters[$name]) || array_key_exists($name, $this-&gt;parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }
        if (isset($this-&gt;loadedDynamicParameters[$name])) {
            return $this-&gt;loadedDynamicParameters[$name] ? $this-&gt;dynamicParameters[$name] : $this-&gt;getDynamicParameter($name);
        }

        return $this-&gt;parameters[$name];
    }

    public function hasParameter($name)
    {
        $name = (string) $name;

        return isset($this-&gt;parameters[$name]) || isset($this-&gt;loadedDynamicParameters[$name]) || array_key_exists($name, $this-&gt;parameters);
    }

    public function setParameter($name, $value)
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag()
    {
        if (null === $this-&gt;parameterBag) {
            $parameters = $this-&gt;parameters;
            foreach ($this-&gt;loadedDynamicParameters as $name =&gt; $loaded) {
                $parameters[$name] = $loaded ? $this-&gt;dynamicParameters[$name] : $this-&gt;getDynamicParameter($name);
            }
            $this-&gt;parameterBag = new FrozenParameterBag($parameters);
        }

        return $this-&gt;parameterBag;
    }

    private $loadedDynamicParameters = array();
    private $dynamicParameters = array();

    /**
     * Computes a dynamic parameter.
     *
     * @param string The name of the dynamic parameter to load
     *
     * @return mixed The value of the dynamic parameter
     *
     * @throws InvalidArgumentException When the dynamic parameter does not exist
     */
    private function getDynamicParameter($name)
    {
        throw new InvalidArgumentException(sprintf('The dynamic parameter "%s" must be defined.', $name));
    }

    /**
     * Gets the default parameters.
     *
     * @return array An array of the default parameters
     */
    protected function getDefaultParameters()
    {
        return array(
            'baz_class' =&gt; 'BazClass',
            'foo_class' =&gt; 'Bar\\FooClass',
            'foo' =&gt; 'bar',
</codefragment>
  </duplication>
  <duplication lines="7" tokens="77">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Loader/YamlFileLoaderTest.php" line="148"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Loader/XmlFileLoaderTest.php" line="257"/>
    <codefragment>        $this-&gt;assertEquals('FooClass', $services['foo']-&gt;getClass(), '-&gt;load() parses the class attribute');
        $this-&gt;assertEquals('%path%/foo.php', $services['file']-&gt;getFile(), '-&gt;load() parses the file tag');
        $this-&gt;assertEquals(array('foo', new Reference('foo'), array(true, false)), $services['arguments']-&gt;getArguments(), '-&gt;load() parses the argument tags');
        $this-&gt;assertEquals('sc_configure', $services['configurator1']-&gt;getConfigurator(), '-&gt;load() parses the configurator tag');
        $this-&gt;assertEquals(array(new Reference('baz'), 'configure'), $services['configurator2']-&gt;getConfigurator(), '-&gt;load() parses the configurator tag');
        $this-&gt;assertEquals(array('BazClass', 'configureStatic'), $services['configurator3']-&gt;getConfigurator(), '-&gt;load() parses the configurator tag');
        $this-&gt;assertEquals(array(array('setBar', array()), array('setBar', array()), array('setBar', array(new Expression('service("foo").foo() ~ (container.hasParameter("foo") ? parameter("foo") : "default")')))), $services['method_call1']-&gt;getMethodCalls(), '-&gt;load() parses the method_call tag');
</codefragment>
  </duplication>
  <duplication lines="6" tokens="78">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Loader/YamlFileLoaderTest.php" line="154"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Loader/XmlFileLoaderTest.php" line="263"/>
    <codefragment>        $this-&gt;assertEquals(array(array('setBar', array()), array('setBar', array()), array('setBar', array(new Expression('service("foo").foo() ~ (container.hasParameter("foo") ? parameter("foo") : "default")')))), $services['method_call1']-&gt;getMethodCalls(), '-&gt;load() parses the method_call tag');
        $this-&gt;assertEquals(array(array('setBar', array('foo', new Reference('foo'), array(true, false)))), $services['method_call2']-&gt;getMethodCalls(), '-&gt;load() parses the method_call tag');
        $this-&gt;assertEquals('factory', $services['new_factory1']-&gt;getFactory(), '-&gt;load() parses the factory tag');
        $this-&gt;assertEquals(array(new Reference('baz'), 'getClass'), $services['new_factory2']-&gt;getFactory(), '-&gt;load() parses the factory tag');
        $this-&gt;assertEquals(array('BazClass', 'getInstance'), $services['new_factory3']-&gt;getFactory(), '-&gt;load() parses the factory tag');
        $this-&gt;assertSame(array(null, 'getInstance'), $services['new_factory4']-&gt;getFactory(), '-&gt;load() accepts factory tag without class');
</codefragment>
  </duplication>
  <duplication lines="14" tokens="71">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Loader/YamlFileLoaderTest.php" line="699"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Loader/XmlFileLoaderTest.php" line="756"/>
    <codefragment>        $container-&gt;compile();

        $this-&gt;assertTrue($container-&gt;has('bar'));
        $this-&gt;assertTrue($container-&gt;has('BAR'));
        $this-&gt;assertFalse($container-&gt;has('baR'));
        $this-&gt;assertNotSame($container-&gt;get('BAR'), $container-&gt;get('bar'));
        $this-&gt;assertSame($container-&gt;get('BAR')-&gt;arguments-&gt;bar, $container-&gt;get('bar'));
        $this-&gt;assertSame($container-&gt;get('BAR')-&gt;bar, $container-&gt;get('bar'));
    }

    public function testBindings()
    {
        $container = new ContainerBuilder();
        $loader = new YamlFileLoader($container, new FileLocator(self::$fixturesPath.'/yaml'));
</codefragment>
  </duplication>
  <duplication lines="27" tokens="103">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Loader/YamlFileLoaderTest.php" line="714"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Loader/XmlFileLoaderTest.php" line="771"/>
    <codefragment>        $container-&gt;compile();

        $definition = $container-&gt;getDefinition('bar');
        $this-&gt;assertEquals(array(
            'NonExistent' =&gt; null,
            BarInterface::class =&gt; new Reference(Bar::class),
            '$foo' =&gt; array(null),
            '$quz' =&gt; 'quz',
            '$factory' =&gt; 'factory',
        ), array_map(function (BoundArgument $v) { return $v-&gt;getValues()[0]; }, $definition-&gt;getBindings()));
        $this-&gt;assertEquals(array(
            'quz',
            null,
            new Reference(Bar::class),
            array(null),
        ), $definition-&gt;getArguments());

        $definition = $container-&gt;getDefinition(Bar::class);
        $this-&gt;assertEquals(array(
            null,
            'factory',
        ), $definition-&gt;getArguments());
        $this-&gt;assertEquals(array(
            'NonExistent' =&gt; null,
            '$quz' =&gt; 'quz',
            '$factory' =&gt; 'factory',
        ), array_map(function (BoundArgument $v) { return $v-&gt;getValues()[0]; }, $definition-&gt;getBindings()));
</codefragment>
  </duplication>
  <duplication lines="20" tokens="82">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/Dumper/PhpDumperTest.php" line="854"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/dependency-injection/Tests/ContainerBuilderTest.php" line="1301"/>
    <codefragment>        $container-&gt;get('foo1');
        $container-&gt;get('baz');

        $bar = $container-&gt;get('bar');

        $this-&gt;assertEquals(new \stdClass(), $bar-&gt;foo1);
        $this-&gt;assertNull($bar-&gt;foo2);
        $this-&gt;assertEquals(new \stdClass(), $bar-&gt;foo3);
        $this-&gt;assertEquals(new \stdClass(), $bar-&gt;closures[0]());
        $this-&gt;assertNull($bar-&gt;closures[1]());
        $this-&gt;assertEquals(new \stdClass(), $bar-&gt;closures[2]());
        $this-&gt;assertEquals(array('foo1' =&gt; new \stdClass(), 'foo3' =&gt; new \stdClass()), iterator_to_array($bar-&gt;iter));
    }

    /**
     * @dataProvider provideAlmostCircular
     */
    public function testAlmostCircular($visibility)
    {
        $container = include self::$fixturesPath.'/containers/container_almost_circular.php';
</codefragment>
  </duplication>
  <duplication lines="48" tokens="161">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher5.php" line="11"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher2.php" line="11"/>
    <codefragment>class ProjectUrlMatcher extends Symfony\Component\Routing\Tests\Fixtures\RedirectableUrlMatcher
{
    public function __construct(RequestContext $context)
    {
        $this-&gt;context = $context;
    }

    public function match($pathinfo)
    {
        $allow = $allowSchemes = array();
        if ($ret = $this-&gt;doMatch($pathinfo, $allow, $allowSchemes)) {
            return $ret;
        }
        if ($allow) {
            throw new MethodNotAllowedException(array_keys($allow));
        }
        if (!in_array($this-&gt;context-&gt;getMethod(), array('HEAD', 'GET'), true)) {
            // no-op
        } elseif ($allowSchemes) {
            redirect_scheme:
            $scheme = $this-&gt;context-&gt;getScheme();
            $this-&gt;context-&gt;setScheme(key($allowSchemes));
            try {
                if ($ret = $this-&gt;doMatch($pathinfo)) {
                    return $this-&gt;redirect($pathinfo, $ret['_route'], $this-&gt;context-&gt;getScheme()) + $ret;
                }
            } finally {
                $this-&gt;context-&gt;setScheme($scheme);
            }
        } elseif ('/' !== $pathinfo) {
            $pathinfo = '/' !== $pathinfo[-1] ? $pathinfo.'/' : substr($pathinfo, 0, -1);
            if ($ret = $this-&gt;doMatch($pathinfo, $allow, $allowSchemes)) {
                return $this-&gt;redirect($pathinfo, $ret['_route']) + $ret;
            }
            if ($allowSchemes) {
                goto redirect_scheme;
            }
        }

        throw new ResourceNotFoundException();
    }

    private function doMatch(string $rawPathinfo, array &amp;$allow = array(), array &amp;$allowSchemes = array()): ?array
    {
        $allow = $allowSchemes = array();
        $pathinfo = rawurldecode($rawPathinfo);
        $context = $this-&gt;context;
        $requestMethod = $canonicalMethod = $context-&gt;getMethod();
</codefragment>
  </duplication>
  <duplication lines="30" tokens="207">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher1.php" line="20"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher2.php" line="55"/>
    <codefragment>        $allow = $allowSchemes = array();
        $pathinfo = rawurldecode($rawPathinfo);
        $context = $this-&gt;context;
        $requestMethod = $canonicalMethod = $context-&gt;getMethod();
        $host = strtolower($context-&gt;getHost());

        if ('HEAD' === $requestMethod) {
            $canonicalMethod = 'GET';
        }

        switch ($pathinfo) {
            default:
                $routes = array(
                    '/test/baz' =&gt; array(array('_route' =&gt; 'baz'), null, null, null),
                    '/test/baz.html' =&gt; array(array('_route' =&gt; 'baz2'), null, null, null),
                    '/test/baz3/' =&gt; array(array('_route' =&gt; 'baz3'), null, null, null),
                    '/foofoo' =&gt; array(array('_route' =&gt; 'foofoo', 'def' =&gt; 'test'), null, null, null),
                    '/spa ce' =&gt; array(array('_route' =&gt; 'space'), null, null, null),
                    '/multi/new' =&gt; array(array('_route' =&gt; 'overridden2'), null, null, null),
                    '/multi/hey/' =&gt; array(array('_route' =&gt; 'hey'), null, null, null),
                    '/ababa' =&gt; array(array('_route' =&gt; 'ababa'), null, null, null),
                    '/route1' =&gt; array(array('_route' =&gt; 'route1'), 'a.example.com', null, null),
                    '/c2/route2' =&gt; array(array('_route' =&gt; 'route2'), 'a.example.com', null, null),
                    '/route4' =&gt; array(array('_route' =&gt; 'route4'), 'a.example.com', null, null),
                    '/c2/route3' =&gt; array(array('_route' =&gt; 'route3'), 'b.example.com', null, null),
                    '/route5' =&gt; array(array('_route' =&gt; 'route5'), 'c.example.com', null, null),
                    '/route6' =&gt; array(array('_route' =&gt; 'route6'), null, null, null),
                    '/route11' =&gt; array(array('_route' =&gt; 'route11'), '#^(?P&lt;var1&gt;[^\\.]++)\\.example\\.com$#sDi', null, null),
                    '/route12' =&gt; array(array('_route' =&gt; 'route12', 'var1' =&gt; 'val'), '#^(?P&lt;var1&gt;[^\\.]++)\\.example\\.com$#sDi', null, null),
                    '/route17' =&gt; array(array('_route' =&gt; 'route17'), null, null, null),
</codefragment>
  </duplication>
  <duplication lines="191" tokens="603">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher1.php" line="52"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher2.php" line="89"/>
    <codefragment>                if (!isset($routes[$pathinfo])) {
                    break;
                }
                list($ret, $requiredHost, $requiredMethods, $requiredSchemes) = $routes[$pathinfo];

                if ($requiredHost) {
                    if ('#' !== $requiredHost[0] ? $requiredHost !== $host : !preg_match($requiredHost, $host, $hostMatches)) {
                        break;
                    }
                    if ('#' === $requiredHost[0] &amp;&amp; $hostMatches) {
                        $hostMatches['_route'] = $ret['_route'];
                        $ret = $this-&gt;mergeDefaults($hostMatches, $ret);
                    }
                }

                $hasRequiredScheme = !$requiredSchemes || isset($requiredSchemes[$context-&gt;getScheme()]);
                if ($requiredMethods &amp;&amp; !isset($requiredMethods[$canonicalMethod]) &amp;&amp; !isset($requiredMethods[$requestMethod])) {
                    if ($hasRequiredScheme) {
                        $allow += $requiredMethods;
                    }
                    break;
                }
                if (!$hasRequiredScheme) {
                    $allowSchemes += $requiredSchemes;
                    break;
                }

                return $ret;
        }

        $matchedPathinfo = $host.'.'.$pathinfo;
        $regexList = array(
            0 =&gt; '{^(?'
                .'|(?:(?:[^.]*+\\.)++)(?'
                    .'|/foo/(baz|symfony)(*:46)'
                    .'|/bar(?'
                        .'|/([^/]++)(*:69)'
                        .'|head/([^/]++)(*:89)'
                    .')'
                    .'|/test/([^/]++)/(?'
                        .'|(*:115)'
                    .')'
                    .'|/([\']+)(*:131)'
                    .'|/a/(?'
                        .'|b\'b/([^/]++)(?'
                            .'|(*:160)'
                            .'|(*:168)'
                        .')'
                        .'|(.*)(*:181)'
                        .'|b\'b/([^/]++)(?'
                            .'|(*:204)'
                            .'|(*:212)'
                        .')'
                    .')'
                    .'|/multi/hello(?:/([^/]++))?(*:248)'
                    .'|/([^/]++)/b/([^/]++)(?'
                        .'|(*:279)'
                        .'|(*:287)'
                    .')'
                    .'|/aba/([^/]++)(*:309)'
                .')|(?i:([^\\.]++)\\.example\\.com)\\.(?'
                    .'|/route1(?'
                        .'|3/([^/]++)(*:371)'
                        .'|4/([^/]++)(*:389)'
                    .')'
                .')|(?i:c\\.example\\.com)\\.(?'
                    .'|/route15/([^/]++)(*:441)'
                .')|(?:(?:[^.]*+\\.)++)(?'
                    .'|/route16/([^/]++)(*:488)'
                    .'|/a/(?'
                        .'|a\\.\\.\\.(*:509)'
                        .'|b/(?'
                            .'|([^/]++)(*:530)'
                            .'|c/([^/]++)(*:548)'
                        .')'
                    .')'
                .')'
                .')$}sD',
        );

        foreach ($regexList as $offset =&gt; $regex) {
            while (preg_match($regex, $matchedPathinfo, $matches)) {
                switch ($m = (int) $matches['MARK']) {
                    case 115:
                        $matches = array('foo' =&gt; $matches[1] ?? null);

                        // baz4
                        return $this-&gt;mergeDefaults(array('_route' =&gt; 'baz4') + $matches, array());

                        // baz5
                        $ret = $this-&gt;mergeDefaults(array('_route' =&gt; 'baz5') + $matches, array());
                        if (!isset(($a = array('POST' =&gt; 0))[$requestMethod])) {
                            $allow += $a;
                            goto not_baz5;
                        }

                        return $ret;
                        not_baz5:

                        // baz.baz6
                        $ret = $this-&gt;mergeDefaults(array('_route' =&gt; 'baz.baz6') + $matches, array());
                        if (!isset(($a = array('PUT' =&gt; 0))[$requestMethod])) {
                            $allow += $a;
                            goto not_bazbaz6;
                        }

                        return $ret;
                        not_bazbaz6:

                        break;
                    case 160:
                        $matches = array('foo' =&gt; $matches[1] ?? null);

                        // foo1
                        $ret = $this-&gt;mergeDefaults(array('_route' =&gt; 'foo1') + $matches, array());
                        if (!isset(($a = array('PUT' =&gt; 0))[$requestMethod])) {
                            $allow += $a;
                            goto not_foo1;
                        }

                        return $ret;
                        not_foo1:

                        break;
                    case 204:
                        $matches = array('foo1' =&gt; $matches[1] ?? null);

                        // foo2
                        return $this-&gt;mergeDefaults(array('_route' =&gt; 'foo2') + $matches, array());

                        break;
                    case 279:
                        $matches = array('_locale' =&gt; $matches[1] ?? null, 'foo' =&gt; $matches[2] ?? null);

                        // foo3
                        return $this-&gt;mergeDefaults(array('_route' =&gt; 'foo3') + $matches, array());

                        break;
                    default:
                        $routes = array(
                            46 =&gt; array(array('_route' =&gt; 'foo', 'def' =&gt; 'test'), array('bar'), null, null),
                            69 =&gt; array(array('_route' =&gt; 'bar'), array('foo'), array('GET' =&gt; 0, 'HEAD' =&gt; 1), null),
                            89 =&gt; array(array('_route' =&gt; 'barhead'), array('foo'), array('GET' =&gt; 0), null),
                            131 =&gt; array(array('_route' =&gt; 'quoter'), array('quoter'), null, null),
                            168 =&gt; array(array('_route' =&gt; 'bar1'), array('bar'), null, null),
                            181 =&gt; array(array('_route' =&gt; 'overridden'), array('var'), null, null),
                            212 =&gt; array(array('_route' =&gt; 'bar2'), array('bar1'), null, null),
                            248 =&gt; array(array('_route' =&gt; 'helloWorld', 'who' =&gt; 'World!'), array('who'), null, null),
                            287 =&gt; array(array('_route' =&gt; 'bar3'), array('_locale', 'bar'), null, null),
                            309 =&gt; array(array('_route' =&gt; 'foo4'), array('foo'), null, null),
                            371 =&gt; array(array('_route' =&gt; 'route13'), array('var1', 'name'), null, null),
                            389 =&gt; array(array('_route' =&gt; 'route14', 'var1' =&gt; 'val'), array('var1', 'name'), null, null),
                            441 =&gt; array(array('_route' =&gt; 'route15'), array('name'), null, null),
                            488 =&gt; array(array('_route' =&gt; 'route16', 'var1' =&gt; 'val'), array('name'), null, null),
                            509 =&gt; array(array('_route' =&gt; 'a'), array(), null, null),
                            530 =&gt; array(array('_route' =&gt; 'b'), array('var'), null, null),
                            548 =&gt; array(array('_route' =&gt; 'c'), array('var'), null, null),
                        );

                        list($ret, $vars, $requiredMethods, $requiredSchemes) = $routes[$m];

                        foreach ($vars as $i =&gt; $v) {
                            if (isset($matches[1 + $i])) {
                                $ret[$v] = $matches[1 + $i];
                            }
                        }

                        $hasRequiredScheme = !$requiredSchemes || isset($requiredSchemes[$context-&gt;getScheme()]);
                        if ($requiredMethods &amp;&amp; !isset($requiredMethods[$canonicalMethod]) &amp;&amp; !isset($requiredMethods[$requestMethod])) {
                            if ($hasRequiredScheme) {
                                $allow += $requiredMethods;
                            }
                            break;
                        }
                        if (!$hasRequiredScheme) {
                            $allowSchemes += $requiredSchemes;
                            break;
                        }

                        return $ret;
                }

                if (548 === $m) {
                    break;
                }
                $regex = substr_replace($regex, 'F', $m - $offset, 1 + strlen($m));
                $offset += strlen($m);
            }
        }
        if ('/' === $pathinfo &amp;&amp; !$allow) {
            throw new Symfony\Component\Routing\Exception\NoConfigurationException();
</codefragment>
  </duplication>
  <duplication lines="51" tokens="167">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher5.php" line="11"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher11.php" line="11"/>
    <codefragment>class ProjectUrlMatcher extends Symfony\Component\Routing\Tests\Fixtures\RedirectableUrlMatcher
{
    public function __construct(RequestContext $context)
    {
        $this-&gt;context = $context;
    }

    public function match($pathinfo)
    {
        $allow = $allowSchemes = array();
        if ($ret = $this-&gt;doMatch($pathinfo, $allow, $allowSchemes)) {
            return $ret;
        }
        if ($allow) {
            throw new MethodNotAllowedException(array_keys($allow));
        }
        if (!in_array($this-&gt;context-&gt;getMethod(), array('HEAD', 'GET'), true)) {
            // no-op
        } elseif ($allowSchemes) {
            redirect_scheme:
            $scheme = $this-&gt;context-&gt;getScheme();
            $this-&gt;context-&gt;setScheme(key($allowSchemes));
            try {
                if ($ret = $this-&gt;doMatch($pathinfo)) {
                    return $this-&gt;redirect($pathinfo, $ret['_route'], $this-&gt;context-&gt;getScheme()) + $ret;
                }
            } finally {
                $this-&gt;context-&gt;setScheme($scheme);
            }
        } elseif ('/' !== $pathinfo) {
            $pathinfo = '/' !== $pathinfo[-1] ? $pathinfo.'/' : substr($pathinfo, 0, -1);
            if ($ret = $this-&gt;doMatch($pathinfo, $allow, $allowSchemes)) {
                return $this-&gt;redirect($pathinfo, $ret['_route']) + $ret;
            }
            if ($allowSchemes) {
                goto redirect_scheme;
            }
        }

        throw new ResourceNotFoundException();
    }

    private function doMatch(string $rawPathinfo, array &amp;$allow = array(), array &amp;$allowSchemes = array()): ?array
    {
        $allow = $allowSchemes = array();
        $pathinfo = rawurldecode($rawPathinfo);
        $context = $this-&gt;context;
        $requestMethod = $canonicalMethod = $context-&gt;getMethod();

        if ('HEAD' === $requestMethod) {
            $canonicalMethod = 'GET';
</codefragment>
  </duplication>
  <duplication lines="56" tokens="172">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher5.php" line="11"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher7.php" line="11"/>
    <codefragment>class ProjectUrlMatcher extends Symfony\Component\Routing\Tests\Fixtures\RedirectableUrlMatcher
{
    public function __construct(RequestContext $context)
    {
        $this-&gt;context = $context;
    }

    public function match($pathinfo)
    {
        $allow = $allowSchemes = array();
        if ($ret = $this-&gt;doMatch($pathinfo, $allow, $allowSchemes)) {
            return $ret;
        }
        if ($allow) {
            throw new MethodNotAllowedException(array_keys($allow));
        }
        if (!in_array($this-&gt;context-&gt;getMethod(), array('HEAD', 'GET'), true)) {
            // no-op
        } elseif ($allowSchemes) {
            redirect_scheme:
            $scheme = $this-&gt;context-&gt;getScheme();
            $this-&gt;context-&gt;setScheme(key($allowSchemes));
            try {
                if ($ret = $this-&gt;doMatch($pathinfo)) {
                    return $this-&gt;redirect($pathinfo, $ret['_route'], $this-&gt;context-&gt;getScheme()) + $ret;
                }
            } finally {
                $this-&gt;context-&gt;setScheme($scheme);
            }
        } elseif ('/' !== $pathinfo) {
            $pathinfo = '/' !== $pathinfo[-1] ? $pathinfo.'/' : substr($pathinfo, 0, -1);
            if ($ret = $this-&gt;doMatch($pathinfo, $allow, $allowSchemes)) {
                return $this-&gt;redirect($pathinfo, $ret['_route']) + $ret;
            }
            if ($allowSchemes) {
                goto redirect_scheme;
            }
        }

        throw new ResourceNotFoundException();
    }

    private function doMatch(string $rawPathinfo, array &amp;$allow = array(), array &amp;$allowSchemes = array()): ?array
    {
        $allow = $allowSchemes = array();
        $pathinfo = rawurldecode($rawPathinfo);
        $context = $this-&gt;context;
        $requestMethod = $canonicalMethod = $context-&gt;getMethod();

        if ('HEAD' === $requestMethod) {
            $canonicalMethod = 'GET';
        }

        switch ($pathinfo) {
            default:
                $routes = array(
</codefragment>
  </duplication>
  <duplication lines="107" tokens="399">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher6.php" line="20"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher7.php" line="55"/>
    <codefragment>        $allow = $allowSchemes = array();
        $pathinfo = rawurldecode($rawPathinfo);
        $context = $this-&gt;context;
        $requestMethod = $canonicalMethod = $context-&gt;getMethod();

        if ('HEAD' === $requestMethod) {
            $canonicalMethod = 'GET';
        }

        switch ($pathinfo) {
            default:
                $routes = array(
                    '/trailing/simple/no-methods/' =&gt; array(array('_route' =&gt; 'simple_trailing_slash_no_methods'), null, null, null),
                    '/trailing/simple/get-method/' =&gt; array(array('_route' =&gt; 'simple_trailing_slash_GET_method'), null, array('GET' =&gt; 0), null),
                    '/trailing/simple/head-method/' =&gt; array(array('_route' =&gt; 'simple_trailing_slash_HEAD_method'), null, array('HEAD' =&gt; 0), null),
                    '/trailing/simple/post-method/' =&gt; array(array('_route' =&gt; 'simple_trailing_slash_POST_method'), null, array('POST' =&gt; 0), null),
                    '/not-trailing/simple/no-methods' =&gt; array(array('_route' =&gt; 'simple_not_trailing_slash_no_methods'), null, null, null),
                    '/not-trailing/simple/get-method' =&gt; array(array('_route' =&gt; 'simple_not_trailing_slash_GET_method'), null, array('GET' =&gt; 0), null),
                    '/not-trailing/simple/head-method' =&gt; array(array('_route' =&gt; 'simple_not_trailing_slash_HEAD_method'), null, array('HEAD' =&gt; 0), null),
                    '/not-trailing/simple/post-method' =&gt; array(array('_route' =&gt; 'simple_not_trailing_slash_POST_method'), null, array('POST' =&gt; 0), null),
                );

                if (!isset($routes[$pathinfo])) {
                    break;
                }
                list($ret, $requiredHost, $requiredMethods, $requiredSchemes) = $routes[$pathinfo];

                $hasRequiredScheme = !$requiredSchemes || isset($requiredSchemes[$context-&gt;getScheme()]);
                if ($requiredMethods &amp;&amp; !isset($requiredMethods[$canonicalMethod]) &amp;&amp; !isset($requiredMethods[$requestMethod])) {
                    if ($hasRequiredScheme) {
                        $allow += $requiredMethods;
                    }
                    break;
                }
                if (!$hasRequiredScheme) {
                    $allowSchemes += $requiredSchemes;
                    break;
                }

                return $ret;
        }

        $matchedPathinfo = $pathinfo;
        $regexList = array(
            0 =&gt; '{^(?'
                    .'|/trailing/regex/(?'
                        .'|no\\-methods/([^/]++)/(*:47)'
                        .'|get\\-method/([^/]++)/(*:75)'
                        .'|head\\-method/([^/]++)/(*:104)'
                        .'|post\\-method/([^/]++)/(*:134)'
                    .')'
                    .'|/not\\-trailing/regex/(?'
                        .'|no\\-methods/([^/]++)(*:187)'
                        .'|get\\-method/([^/]++)(*:215)'
                        .'|head\\-method/([^/]++)(*:244)'
                        .'|post\\-method/([^/]++)(*:273)'
                    .')'
                .')$}sD',
        );

        foreach ($regexList as $offset =&gt; $regex) {
            while (preg_match($regex, $matchedPathinfo, $matches)) {
                switch ($m = (int) $matches['MARK']) {
                    default:
                        $routes = array(
                            47 =&gt; array(array('_route' =&gt; 'regex_trailing_slash_no_methods'), array('param'), null, null),
                            75 =&gt; array(array('_route' =&gt; 'regex_trailing_slash_GET_method'), array('param'), array('GET' =&gt; 0), null),
                            104 =&gt; array(array('_route' =&gt; 'regex_trailing_slash_HEAD_method'), array('param'), array('HEAD' =&gt; 0), null),
                            134 =&gt; array(array('_route' =&gt; 'regex_trailing_slash_POST_method'), array('param'), array('POST' =&gt; 0), null),
                            187 =&gt; array(array('_route' =&gt; 'regex_not_trailing_slash_no_methods'), array('param'), null, null),
                            215 =&gt; array(array('_route' =&gt; 'regex_not_trailing_slash_GET_method'), array('param'), array('GET' =&gt; 0), null),
                            244 =&gt; array(array('_route' =&gt; 'regex_not_trailing_slash_HEAD_method'), array('param'), array('HEAD' =&gt; 0), null),
                            273 =&gt; array(array('_route' =&gt; 'regex_not_trailing_slash_POST_method'), array('param'), array('POST' =&gt; 0), null),
                        );

                        list($ret, $vars, $requiredMethods, $requiredSchemes) = $routes[$m];

                        foreach ($vars as $i =&gt; $v) {
                            if (isset($matches[1 + $i])) {
                                $ret[$v] = $matches[1 + $i];
                            }
                        }

                        $hasRequiredScheme = !$requiredSchemes || isset($requiredSchemes[$context-&gt;getScheme()]);
                        if ($requiredMethods &amp;&amp; !isset($requiredMethods[$canonicalMethod]) &amp;&amp; !isset($requiredMethods[$requestMethod])) {
                            if ($hasRequiredScheme) {
                                $allow += $requiredMethods;
                            }
                            break;
                        }
                        if (!$hasRequiredScheme) {
                            $allowSchemes += $requiredSchemes;
                            break;
                        }

                        return $ret;
                }

                if (273 === $m) {
                    break;
                }
                $regex = substr_replace($regex, 'F', $m - $offset, 1 + strlen($m));
                $offset += strlen($m);
            }
        }
        if ('/' === $pathinfo &amp;&amp; !$allow) {
            throw new Symfony\Component\Routing\Exception\NoConfigurationException();
</codefragment>
  </duplication>
  <duplication lines="24" tokens="75">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/routing/Tests/Fixtures/php_object_dsl.php" line="6"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/routing/Tests/Fixtures/php_dsl.php" line="5"/>
    <codefragment>    public function __invoke(RoutingConfigurator $routes)
    {
        $routes
            -&gt;collection()
            -&gt;add('foo', '/foo')
            -&gt;condition('abc')
            -&gt;options(array('utf8' =&gt; true))
            -&gt;add('buz', 'zub')
            -&gt;controller('foo:act');

        $routes-&gt;import('php_dsl_sub.php')
            -&gt;prefix('/sub')
            -&gt;requirements(array('id' =&gt; '\d+'));

        $routes-&gt;import('php_dsl_sub.php')
            -&gt;namePrefix('z_')
            -&gt;prefix('/zub');

        $routes-&gt;import('php_dsl_sub_root.php')
            -&gt;prefix('/bus', false);

        $routes-&gt;add('ouf', '/ouf')
            -&gt;schemes(array('https'))
            -&gt;methods(array('GET'))
</codefragment>
  </duplication>
  <duplication lines="14" tokens="76">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/routing/Tests/Loader/YamlFileLoaderTest.php" line="80"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/routing/Tests/Loader/XmlFileLoaderTest.php" line="36"/>
    <codefragment>        $route = $routeCollection-&gt;get('blog_show');

        $this-&gt;assertInstanceOf('Symfony\Component\Routing\Route', $route);
        $this-&gt;assertSame('/blog/{slug}', $route-&gt;getPath());
        $this-&gt;assertSame('{locale}.example.com', $route-&gt;getHost());
        $this-&gt;assertSame('MyBundle:Blog:show', $route-&gt;getDefault('_controller'));
        $this-&gt;assertSame('\w+', $route-&gt;getRequirement('locale'));
        $this-&gt;assertSame('RouteCompiler', $route-&gt;getOption('compiler_class'));
        $this-&gt;assertEquals(array('GET', 'POST', 'PUT', 'OPTIONS'), $route-&gt;getMethods());
        $this-&gt;assertEquals(array('https'), $route-&gt;getSchemes());
        $this-&gt;assertEquals('context.getMethod() == "GET"', $route-&gt;getCondition());
    }

    public function testLoadWithResource()
</codefragment>
  </duplication>
  <duplication lines="18" tokens="73">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-foundation/Tests/Session/Flash/AutoExpireFlashBagTest.php" line="60"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-foundation/Tests/Session/Flash/FlashBagTest.php" line="55"/>
    <codefragment>    public function testGetStorageKey()
    {
        $this-&gt;assertEquals('_symfony_flashes', $this-&gt;bag-&gt;getStorageKey());
        $attributeBag = new FlashBag('test');
        $this-&gt;assertEquals('test', $attributeBag-&gt;getStorageKey());
    }

    public function testGetSetName()
    {
        $this-&gt;assertEquals('flashes', $this-&gt;bag-&gt;getName());
        $this-&gt;bag-&gt;setName('foo');
        $this-&gt;assertEquals('foo', $this-&gt;bag-&gt;getName());
    }

    public function testPeek()
    {
        $this-&gt;assertEquals(array(), $this-&gt;bag-&gt;peek('non_existing'));
        $this-&gt;assertEquals(array('default'), $this-&gt;bag-&gt;peek('non_existing', array('default')));
</codefragment>
  </duplication>
  <duplication lines="66" tokens="248">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-foundation/Tests/Session/Attribute/AttributeBagTest.php" line="85"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-foundation/Tests/Session/Attribute/NamespacedAttributeBagTest.php" line="80"/>
    <codefragment>    public function testHas($key, $value, $exists)
    {
        $this-&gt;assertEquals($exists, $this-&gt;bag-&gt;has($key));
    }

    /**
     * @dataProvider attributesProvider
     */
    public function testGet($key, $value, $expected)
    {
        $this-&gt;assertEquals($value, $this-&gt;bag-&gt;get($key));
    }

    public function testGetDefaults()
    {
        $this-&gt;assertNull($this-&gt;bag-&gt;get('user2.login'));
        $this-&gt;assertEquals('default', $this-&gt;bag-&gt;get('user2.login', 'default'));
    }

    /**
     * @dataProvider attributesProvider
     */
    public function testSet($key, $value, $expected)
    {
        $this-&gt;bag-&gt;set($key, $value);
        $this-&gt;assertEquals($value, $this-&gt;bag-&gt;get($key));
    }

    public function testAll()
    {
        $this-&gt;assertEquals($this-&gt;array, $this-&gt;bag-&gt;all());

        $this-&gt;bag-&gt;set('hello', 'fabien');
        $array = $this-&gt;array;
        $array['hello'] = 'fabien';
        $this-&gt;assertEquals($array, $this-&gt;bag-&gt;all());
    }

    public function testReplace()
    {
        $array = array();
        $array['name'] = 'jack';
        $array['foo.bar'] = 'beep';
        $this-&gt;bag-&gt;replace($array);
        $this-&gt;assertEquals($array, $this-&gt;bag-&gt;all());
        $this-&gt;assertNull($this-&gt;bag-&gt;get('hello'));
        $this-&gt;assertNull($this-&gt;bag-&gt;get('always'));
        $this-&gt;assertNull($this-&gt;bag-&gt;get('user.login'));
    }

    public function testRemove()
    {
        $this-&gt;assertEquals('world', $this-&gt;bag-&gt;get('hello'));
        $this-&gt;bag-&gt;remove('hello');
        $this-&gt;assertNull($this-&gt;bag-&gt;get('hello'));

        $this-&gt;assertEquals('be happy', $this-&gt;bag-&gt;get('always'));
        $this-&gt;bag-&gt;remove('always');
        $this-&gt;assertNull($this-&gt;bag-&gt;get('always'));

        $this-&gt;assertEquals('drak', $this-&gt;bag-&gt;get('user.login'));
        $this-&gt;bag-&gt;remove('user.login');
        $this-&gt;assertNull($this-&gt;bag-&gt;get('user.login'));
    }

    public function testClear()
</codefragment>
  </duplication>
  <duplication lines="24" tokens="88">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/yaml/Command/LintCommand.php" line="130"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/translation/Command/XliffLintCommand.php" line="145"/>
    <codefragment>    private function display(SymfonyStyle $io, array $files)
    {
        switch ($this-&gt;format) {
            case 'txt':
                return $this-&gt;displayTxt($io, $files);
            case 'json':
                return $this-&gt;displayJson($io, $files);
            default:
                throw new InvalidArgumentException(sprintf('The format "%s" is not supported.', $this-&gt;format));
        }
    }

    private function displayTxt(SymfonyStyle $io, array $filesInfo)
    {
        $countFiles = count($filesInfo);
        $erroredFiles = 0;

        foreach ($filesInfo as $info) {
            if ($info['valid'] &amp;&amp; $this-&gt;displayCorrectFiles) {
                $io-&gt;comment('&lt;info&gt;OK&lt;/info&gt;'.($info['file'] ? sprintf(' in %s', $info['file']) : ''));
            } elseif (!$info['valid']) {
                ++$erroredFiles;
                $io-&gt;text('&lt;error&gt; ERROR &lt;/error&gt;'.($info['file'] ? sprintf(' in %s', $info['file']) : ''));
                $io-&gt;text(sprintf('&lt;error&gt; &gt;&gt; %s&lt;/error&gt;', $info['message']));
</codefragment>
  </duplication>
  <duplication lines="17" tokens="89">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/translation/Tests/Catalogue/TargetOperationTest.php" line="47"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/translation/Tests/Catalogue/MergeOperationTest.php" line="47"/>
    <codefragment>                'messages' =&gt; array('a' =&gt; 'old_a', 'c' =&gt; 'new_c'),
            )),
            $this-&gt;createOperation(
                new MessageCatalogue('en', array('messages' =&gt; array('a' =&gt; 'old_a', 'b' =&gt; 'old_b'))),
                new MessageCatalogue('en', array('messages' =&gt; array('a' =&gt; 'new_a', 'c' =&gt; 'new_c')))
            )-&gt;getResult()
        );
    }

    public function testGetResultWithMetadata()
    {
        $leftCatalogue = new MessageCatalogue('en', array('messages' =&gt; array('a' =&gt; 'old_a', 'b' =&gt; 'old_b')));
        $leftCatalogue-&gt;setMetadata('a', 'foo', 'messages');
        $leftCatalogue-&gt;setMetadata('b', 'bar', 'messages');
        $rightCatalogue = new MessageCatalogue('en', array('messages' =&gt; array('b' =&gt; 'new_b', 'c' =&gt; 'new_c')));
        $rightCatalogue-&gt;setMetadata('b', 'baz', 'messages');
        $rightCatalogue-&gt;setMetadata('c', 'qux', 'messages');
</codefragment>
  </duplication>
  <duplication lines="36" tokens="96">
    <file path="/home/feighen/workspace/ussd/src/vendor/hamcrest/hamcrest-php/tests/Hamcrest/Text/StringContainsTest.php" line="23"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/hamcrest/hamcrest-php/tests/Hamcrest/Text/StringContainsIgnoringCaseTest.php" line="25"/>
    <codefragment>        $this-&gt;assertTrue(
            $this-&gt;_stringContains-&gt;matches(self::EXCERPT . 'END'),
            'should be true if excerpt at beginning'
        );
        $this-&gt;assertTrue(
            $this-&gt;_stringContains-&gt;matches('START' . self::EXCERPT),
            'should be true if excerpt at end'
        );
        $this-&gt;assertTrue(
            $this-&gt;_stringContains-&gt;matches('START' . self::EXCERPT . 'END'),
            'should be true if excerpt in middle'
        );
        $this-&gt;assertTrue(
            $this-&gt;_stringContains-&gt;matches(self::EXCERPT . self::EXCERPT),
            'should be true if excerpt is repeated'
        );

        $this-&gt;assertFalse(
            $this-&gt;_stringContains-&gt;matches('Something else'),
            'should not be true if excerpt is not in string'
        );
        $this-&gt;assertFalse(
            $this-&gt;_stringContains-&gt;matches(substr(self::EXCERPT, 1)),
            'should not be true if part of excerpt is in string'
        );
    }

    public function testEvaluatesToTrueIfArgumentIsEqualToSubstring()
    {
        $this-&gt;assertTrue(
            $this-&gt;_stringContains-&gt;matches(self::EXCERPT),
            'should be true if excerpt is entire string'
        );
    }

    public function testEvaluatesToFalseIfArgumentContainsSubstringIgnoringCase()
</codefragment>
  </duplication>
  <duplication lines="46" tokens="86">
    <file path="/home/feighen/workspace/ussd/src/vendor/phpunit/phpunit/src/Framework/TestListenerDefaultImplementation.php" line="14"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phpunit/phpunit/src/Framework/TestListener.php" line="20"/>
    <codefragment>    public function addError(Test $test, \Throwable $t, float $time): void
    {
    }

    public function addWarning(Test $test, Warning $e, float $time): void
    {
    }

    public function addFailure(Test $test, AssertionFailedError $e, float $time): void
    {
    }

    public function addIncompleteTest(Test $test, \Throwable $t, float $time): void
    {
    }

    public function addRiskyTest(Test $test, \Throwable $t, float $time): void
    {
    }

    public function addSkippedTest(Test $test, \Throwable $t, float $time): void
    {
    }

    public function startTestSuite(TestSuite $suite): void
    {
    }

    public function endTestSuite(TestSuite $suite): void
    {
    }

    public function startTest(Test $test): void
    {
    }

    public function endTest(Test $test, float $time): void
    {
    }
}
</codefragment>
  </duplication>
  <duplication lines="42" tokens="112">
    <file path="/home/feighen/workspace/ussd/src/vendor/sebastian/comparator/tests/DateTimeComparatorTest.php" line="107"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phpunit/phpunit/tests/Framework/AssertTest.php" line="2638"/>
    <codefragment>                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),
                new DateTime('2013-03-29 03:13:35', new DateTimeZone('America/New_York'))
            ],
            [
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),
                new DateTime('2013-03-29 03:13:35', new DateTimeZone('America/New_York')),
                3500
            ],
            [
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),
                new DateTime('2013-03-29 05:13:35', new DateTimeZone('America/New_York')),
                3500
            ],
            [
                new DateTime('2013-03-29', new DateTimeZone('America/New_York')),
                new DateTime('2013-03-30', new DateTimeZone('America/New_York'))
            ],
            [
                new DateTime('2013-03-29', new DateTimeZone('America/New_York')),
                new DateTime('2013-03-30', new DateTimeZone('America/New_York')),
                43200
            ],
            [
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/Chicago')),
            ],
            [
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/Chicago')),
                3500
            ],
            [
                new DateTime('2013-03-30', new DateTimeZone('America/New_York')),
                new DateTime('2013-03-30', new DateTimeZone('America/Chicago'))
            ],
            [
                new DateTime('2013-03-29T05:13:35-0600'),
                new DateTime('2013-03-29T04:13:35-0600')
            ],
            [
                new DateTime('2013-03-29T05:13:35-0600'),
                new DateTime('2013-03-29T05:13:35-0500')
</codefragment>
  </duplication>
  <duplication lines="38" tokens="103">
    <file path="/home/feighen/workspace/ussd/src/vendor/sebastian/comparator/tests/DateTimeComparatorTest.php" line="51"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phpunit/phpunit/tests/Framework/AssertTest.php" line="2758"/>
    <codefragment>                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),
                new DateTime('2013-03-29 04:13:25', new DateTimeZone('America/New_York')),
                10
            ],
            [
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),
                new DateTime('2013-03-29 04:14:40', new DateTimeZone('America/New_York')),
                65
            ],
            [
                new DateTime('2013-03-29', new DateTimeZone('America/New_York')),
                new DateTime('2013-03-29', new DateTimeZone('America/New_York'))
            ],
            [
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),
                new DateTime('2013-03-29 03:13:35', new DateTimeZone('America/Chicago'))
            ],
            [
                new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York')),
                new DateTime('2013-03-29 03:13:49', new DateTimeZone('America/Chicago')),
                15
            ],
            [
                new DateTime('2013-03-30', new DateTimeZone('America/New_York')),
                new DateTime('2013-03-29 23:00:00', new DateTimeZone('America/Chicago'))
            ],
            [
                new DateTime('2013-03-30', new DateTimeZone('America/New_York')),
                new DateTime('2013-03-29 23:01:30', new DateTimeZone('America/Chicago')),
                100
            ],
            [
                new DateTime('@1364616000'),
                new DateTime('2013-03-29 23:00:00', new DateTimeZone('America/Chicago'))
            ],
            [
                new DateTime('2013-03-29T05:13:35-0500'),
                new DateTime('2013-03-29T04:13:35-0600')
</codefragment>
  </duplication>
  <duplication lines="40" tokens="80">
    <file path="/home/feighen/workspace/ussd/src/vendor/phpunit/phpunit/tests/_files/BankAccountTest.php" line="17"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phpunit/phpunit/tests/_files/BankAccountTest2.php" line="15"/>
    <codefragment>    protected $ba;

    protected function setUp(): void
    {
        $this-&gt;ba = new BankAccount;
    }

    /**
     * @covers BankAccount::getBalance
     * @group balanceIsInitiallyZero
     * @group specification
     */
    public function testBalanceIsInitiallyZero(): void
    {
        /* @Given a fresh bank account */
        $ba = new BankAccount;

        /* @When I ask it for its balance */
        $balance = $ba-&gt;getBalance();

        /* @Then I should get 0 */
        $this-&gt;assertEquals(0, $balance);
    }

    /**
     * @covers BankAccount::withdrawMoney
     * @group balanceCannotBecomeNegative
     * @group specification
     */
    public function testBalanceCannotBecomeNegative(): void
    {
        try {
            $this-&gt;ba-&gt;withdrawMoney(1);
        } catch (BankAccountException $e) {
            $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());

            return;
        }

        $this-&gt;fail();
</codefragment>
  </duplication>
  <duplication lines="97" tokens="142">
    <file path="/home/feighen/workspace/ussd/src/vendor/laravel/framework/src/Illuminate/Foundation/Console/ObserverMakeCommand.php" line="3"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/Console/ObserverMakeCommand.php" line="3"/>
    <codefragment>namespace Illuminate\Foundation\Console;

use Illuminate\Support\Str;
use Illuminate\Console\GeneratorCommand;
use Symfony\Component\Console\Input\InputOption;

class ObserverMakeCommand extends GeneratorCommand
{
    /**
     * The console command name.
     *
     * @var string
     */
    protected $name = 'make:observer';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a new observer class';

    /**
     * The type of class being generated.
     *
     * @var string
     */
    protected $type = 'Observer';

    /**
     * Build the class with the given name.
     *
     * @param  string  $name
     * @return string
     */
    protected function buildClass($name)
    {
        $stub = parent::buildClass($name);

        $model = $this-&gt;option('model');

        return $model ? $this-&gt;replaceModel($stub, $model) : $stub;
    }

    /**
     * Get the stub file for the generator.
     *
     * @return string
     */
    protected function getStub()
    {
        return $this-&gt;option('model')
                    ? __DIR__.'/stubs/observer.stub'
                    : __DIR__.'/stubs/observer.plain.stub';
    }

    /**
     * Replace the model for the given stub.
     *
     * @param  string  $stub
     * @param  string  $model
     * @return string
     */
    protected function replaceModel($stub, $model)
    {
        $model = str_replace('/', '\\', $model);

        $namespaceModel = $this-&gt;laravel-&gt;getNamespace().$model;

        if (Str::startsWith($model, '\\')) {
            $stub = str_replace('NamespacedDummyModel', trim($model, '\\'), $stub);
        } else {
            $stub = str_replace('NamespacedDummyModel', $namespaceModel, $stub);
        }

        $stub = str_replace(
            "use {$namespaceModel};\nuse {$namespaceModel};", "use {$namespaceModel};", $stub
        );

        $model = class_basename(trim($model, '\\'));

        $stub = str_replace('DocDummyModel', Str::snake($model, ' '), $stub);

        $stub = str_replace('DummyModel', $model, $stub);

        return str_replace('dummyModel', Str::camel($model), $stub);
    }

    /**
     * Get the default namespace for the class.
     *
     * @param  string  $rootNamespace
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace)
    {
        return $rootNamespace.'\Observers';
</codefragment>
  </duplication>
  <duplication lines="98" tokens="127">
    <file path="/home/feighen/workspace/ussd/src/vendor/laravel/framework/src/Illuminate/Foundation/Console/MailMakeCommand.php" line="3"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/Console/MailMakeCommand.php" line="3"/>
    <codefragment>namespace Illuminate\Foundation\Console;

use Illuminate\Console\GeneratorCommand;
use Symfony\Component\Console\Input\InputOption;

class MailMakeCommand extends GeneratorCommand
{
    /**
     * The console command name.
     *
     * @var string
     */
    protected $name = 'make:mail';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a new email class';

    /**
     * The type of class being generated.
     *
     * @var string
     */
    protected $type = 'Mail';

    /**
     * Execute the console command.
     *
     * @return void
     */
    public function handle()
    {
        if (parent::handle() === false &amp;&amp; ! $this-&gt;option('force')) {
            return;
        }

        if ($this-&gt;option('markdown')) {
            $this-&gt;writeMarkdownTemplate();
        }
    }

    /**
     * Write the Markdown template for the mailable.
     *
     * @return void
     */
    protected function writeMarkdownTemplate()
    {
        $path = resource_path('views/'.str_replace('.', '/', $this-&gt;option('markdown'))).'.blade.php';

        if (! $this-&gt;files-&gt;isDirectory(dirname($path))) {
            $this-&gt;files-&gt;makeDirectory(dirname($path), 0755, true);
        }

        $this-&gt;files-&gt;put($path, file_get_contents(__DIR__.'/stubs/markdown.stub'));
    }

    /**
     * Build the class with the given name.
     *
     * @param  string  $name
     * @return string
     */
    protected function buildClass($name)
    {
        $class = parent::buildClass($name);

        if ($this-&gt;option('markdown')) {
            $class = str_replace('DummyView', $this-&gt;option('markdown'), $class);
        }

        return $class;
    }

    /**
     * Get the stub file for the generator.
     *
     * @return string
     */
    protected function getStub()
    {
        return $this-&gt;option('markdown')
                        ? __DIR__.'/stubs/markdown-mail.stub'
                        : __DIR__.'/stubs/mail.stub';
    }

    /**
     * Get the default namespace for the class.
     *
     * @param  string  $rootNamespace
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace)
    {
        return $rootNamespace.'\Mail';
</codefragment>
  </duplication>
  <duplication lines="126" tokens="193">
    <file path="/home/feighen/workspace/ussd/src/vendor/laravel/framework/src/Illuminate/Foundation/Console/PolicyMakeCommand.php" line="3"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/Console/PolicyMakeCommand.php" line="3"/>
    <codefragment>namespace Illuminate\Foundation\Console;

use Illuminate\Support\Str;
use Illuminate\Console\GeneratorCommand;
use Symfony\Component\Console\Input\InputOption;

class PolicyMakeCommand extends GeneratorCommand
{
    /**
     * The console command name.
     *
     * @var string
     */
    protected $name = 'make:policy';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a new policy class';

    /**
     * The type of class being generated.
     *
     * @var string
     */
    protected $type = 'Policy';

    /**
     * Build the class with the given name.
     *
     * @param  string  $name
     * @return string
     */
    protected function buildClass($name)
    {
        $stub = $this-&gt;replaceUserNamespace(
            parent::buildClass($name)
        );

        $model = $this-&gt;option('model');

        return $model ? $this-&gt;replaceModel($stub, $model) : $stub;
    }

    /**
     * Replace the User model namespace.
     *
     * @param  string  $stub
     * @return string
     */
    protected function replaceUserNamespace($stub)
    {
        if (! config('auth.providers.users.model')) {
            return $stub;
        }

        return str_replace(
            $this-&gt;rootNamespace().'User',
            config('auth.providers.users.model'),
            $stub
        );
    }

    /**
     * Replace the model for the given stub.
     *
     * @param  string  $stub
     * @param  string  $model
     * @return string
     */
    protected function replaceModel($stub, $model)
    {
        $model = str_replace('/', '\\', $model);

        $namespaceModel = $this-&gt;laravel-&gt;getNamespace().$model;

        if (Str::startsWith($model, '\\')) {
            $stub = str_replace('NamespacedDummyModel', trim($model, '\\'), $stub);
        } else {
            $stub = str_replace('NamespacedDummyModel', $namespaceModel, $stub);
        }

        $stub = str_replace(
            "use {$namespaceModel};\nuse {$namespaceModel};", "use {$namespaceModel};", $stub
        );

        $model = class_basename(trim($model, '\\'));

        $dummyUser = class_basename(config('auth.providers.users.model'));

        $dummyModel = Str::camel($model) === 'user' ? 'model' : $model;

        $stub = str_replace('DocDummyModel', Str::snake($dummyModel, ' '), $stub);

        $stub = str_replace('DummyModel', $model, $stub);

        $stub = str_replace('dummyModel', Str::camel($dummyModel), $stub);

        $stub = str_replace('DummyUser', $dummyUser, $stub);

        return str_replace('DocDummyPluralModel', Str::snake(Str::plural($dummyModel), ' '), $stub);
    }

    /**
     * Get the stub file for the generator.
     *
     * @return string
     */
    protected function getStub()
    {
        return $this-&gt;option('model')
                    ? __DIR__.'/stubs/policy.stub'
                    : __DIR__.'/stubs/policy.plain.stub';
    }

    /**
     * Get the default namespace for the class.
     *
     * @param  string  $rootNamespace
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace)
    {
        return $rootNamespace.'\Policies';
</codefragment>
  </duplication>
  <duplication lines="98" tokens="127">
    <file path="/home/feighen/workspace/ussd/src/vendor/laravel/framework/src/Illuminate/Foundation/Console/NotificationMakeCommand.php" line="3"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/Console/NotificationMakeCommand.php" line="3"/>
    <codefragment>namespace Illuminate\Foundation\Console;

use Illuminate\Console\GeneratorCommand;
use Symfony\Component\Console\Input\InputOption;

class NotificationMakeCommand extends GeneratorCommand
{
    /**
     * The console command name.
     *
     * @var string
     */
    protected $name = 'make:notification';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a new notification class';

    /**
     * The type of class being generated.
     *
     * @var string
     */
    protected $type = 'Notification';

    /**
     * Execute the console command.
     *
     * @return void
     */
    public function handle()
    {
        if (parent::handle() === false &amp;&amp; ! $this-&gt;option('force')) {
            return;
        }

        if ($this-&gt;option('markdown')) {
            $this-&gt;writeMarkdownTemplate();
        }
    }

    /**
     * Write the Markdown template for the mailable.
     *
     * @return void
     */
    protected function writeMarkdownTemplate()
    {
        $path = resource_path('views/'.str_replace('.', '/', $this-&gt;option('markdown'))).'.blade.php';

        if (! $this-&gt;files-&gt;isDirectory(dirname($path))) {
            $this-&gt;files-&gt;makeDirectory(dirname($path), 0755, true);
        }

        $this-&gt;files-&gt;put($path, file_get_contents(__DIR__.'/stubs/markdown.stub'));
    }

    /**
     * Build the class with the given name.
     *
     * @param  string  $name
     * @return string
     */
    protected function buildClass($name)
    {
        $class = parent::buildClass($name);

        if ($this-&gt;option('markdown')) {
            $class = str_replace('DummyView', $this-&gt;option('markdown'), $class);
        }

        return $class;
    }

    /**
     * Get the stub file for the generator.
     *
     * @return string
     */
    protected function getStub()
    {
        return $this-&gt;option('markdown')
                        ? __DIR__.'/stubs/markdown-notification.stub'
                        : __DIR__.'/stubs/notification.stub';
    }

    /**
     * Get the default namespace for the class.
     *
     * @param  string  $rootNamespace
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace)
    {
        return $rootNamespace.'\Notifications';
</codefragment>
  </duplication>
  <duplication lines="129" tokens="164">
    <file path="/home/feighen/workspace/ussd/src/vendor/laravel/framework/src/Illuminate/Foundation/Console/AppNameCommand.php" line="3"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/Console/AppNameCommand.php" line="3"/>
    <codefragment>namespace Illuminate\Foundation\Console;

use Illuminate\Console\Command;
use Illuminate\Support\Composer;
use Symfony\Component\Finder\Finder;
use Illuminate\Filesystem\Filesystem;
use Symfony\Component\Console\Input\InputArgument;

class AppNameCommand extends Command
{
    /**
     * The console command name.
     *
     * @var string
     */
    protected $name = 'app:name';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Set the application namespace';

    /**
     * The Composer class instance.
     *
     * @var \Illuminate\Support\Composer
     */
    protected $composer;

    /**
     * The filesystem instance.
     *
     * @var \Illuminate\Filesystem\Filesystem
     */
    protected $files;

    /**
     * Current root application namespace.
     *
     * @var string
     */
    protected $currentRoot;

    /**
     * Create a new key generator command.
     *
     * @param  \Illuminate\Support\Composer  $composer
     * @param  \Illuminate\Filesystem\Filesystem  $files
     * @return void
     */
    public function __construct(Composer $composer, Filesystem $files)
    {
        parent::__construct();

        $this-&gt;files = $files;
        $this-&gt;composer = $composer;
    }

    /**
     * Execute the console command.
     *
     * @return void
     */
    public function handle()
    {
        $this-&gt;currentRoot = trim($this-&gt;laravel-&gt;getNamespace(), '\\');

        $this-&gt;setAppDirectoryNamespace();
        $this-&gt;setBootstrapNamespaces();
        $this-&gt;setConfigNamespaces();
        $this-&gt;setComposerNamespace();
        $this-&gt;setDatabaseFactoryNamespaces();

        $this-&gt;info('Application namespace set!');

        $this-&gt;composer-&gt;dumpAutoloads();

        $this-&gt;call('clear-compiled');
    }

    /**
     * Set the namespace on the files in the app directory.
     *
     * @return void
     */
    protected function setAppDirectoryNamespace()
    {
        $files = Finder::create()
                            -&gt;in($this-&gt;laravel['path'])
                            -&gt;contains($this-&gt;currentRoot)
                            -&gt;name('*.php');

        foreach ($files as $file) {
            $this-&gt;replaceNamespace($file-&gt;getRealPath());
        }
    }

    /**
     * Replace the App namespace at the given path.
     *
     * @param  string  $path
     * @return void
     */
    protected function replaceNamespace($path)
    {
        $search = [
            'namespace '.$this-&gt;currentRoot.';',
            $this-&gt;currentRoot.'\\',
        ];

        $replace = [
            'namespace '.$this-&gt;argument('name').';',
            $this-&gt;argument('name').'\\',
        ];

        $this-&gt;replaceIn($path, $search, $replace);
    }

    /**
     * Set the bootstrap namespaces.
     *
     * @return void
     */
    protected function setBootstrapNamespaces()
    {
        $search = [
            $this-&gt;currentRoot.'\\Http',
</codefragment>
  </duplication>
  <duplication lines="84" tokens="125">
    <file path="/home/feighen/workspace/ussd/src/vendor/laravel/framework/src/Illuminate/Foundation/Console/AppNameCommand.php" line="210"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/Console/AppNameCommand.php" line="204"/>
    <codefragment>    protected function setComposerNamespace()
    {
        $this-&gt;replaceIn(
            $this-&gt;getComposerPath(),
            str_replace('\\', '\\\\', $this-&gt;currentRoot).'\\\\',
            str_replace('\\', '\\\\', $this-&gt;argument('name')).'\\\\'
        );
    }

    /**
     * Set the namespace in database factory files.
     *
     * @return void
     */
    protected function setDatabaseFactoryNamespaces()
    {
        $files = Finder::create()
                            -&gt;in(database_path('factories'))
                            -&gt;contains($this-&gt;currentRoot)
                            -&gt;name('*.php');

        foreach ($files as $file) {
            $this-&gt;replaceIn(
                $file-&gt;getRealPath(),
                $this-&gt;currentRoot, $this-&gt;argument('name')
            );
        }
    }

    /**
     * Replace the given string in the given file.
     *
     * @param  string  $path
     * @param  string|array  $search
     * @param  string|array  $replace
     * @return void
     */
    protected function replaceIn($path, $search, $replace)
    {
        if ($this-&gt;files-&gt;exists($path)) {
            $this-&gt;files-&gt;put($path, str_replace($search, $replace, $this-&gt;files-&gt;get($path)));
        }
    }

    /**
     * Get the path to the bootstrap/app.php file.
     *
     * @return string
     */
    protected function getBootstrapPath()
    {
        return $this-&gt;laravel-&gt;bootstrapPath().'/app.php';
    }

    /**
     * Get the path to the Composer.json file.
     *
     * @return string
     */
    protected function getComposerPath()
    {
        return base_path('composer.json');
    }

    /**
     * Get the path to the given configuration file.
     *
     * @param  string  $name
     * @return string
     */
    protected function getConfigPath($name)
    {
        return $this-&gt;laravel['path.config'].'/'.$name.'.php';
    }

    /**
     * Get the console command arguments.
     *
     * @return array
     */
    protected function getArguments()
    {
        return [
            ['name', InputArgument::REQUIRED, 'The desired namespace.'],
</codefragment>
  </duplication>
  <duplication lines="72" tokens="104">
    <file path="/home/feighen/workspace/ussd/src/vendor/laravel/framework/src/Illuminate/Foundation/Console/EventGenerateCommand.php" line="3"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/Console/EventGenerateCommand.php" line="3"/>
    <codefragment>namespace Illuminate\Foundation\Console;

use Illuminate\Support\Str;
use Illuminate\Console\Command;
use Illuminate\Foundation\Support\Providers\EventServiceProvider;

class EventGenerateCommand extends Command
{
    /**
     * The console command name.
     *
     * @var string
     */
    protected $name = 'event:generate';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Generate the missing events and listeners based on registration';

    /**
     * Execute the console command.
     *
     * @return void
     */
    public function handle()
    {
        $providers = $this-&gt;laravel-&gt;getProviders(EventServiceProvider::class);

        foreach ($providers as $provider) {
            foreach ($provider-&gt;listens() as $event =&gt; $listeners) {
                $this-&gt;makeEventAndListeners($event, $listeners);
            }
        }

        $this-&gt;info('Events and listeners generated successfully!');
    }

    /**
     * Make the event and listeners for the given event.
     *
     * @param  string  $event
     * @param  array  $listeners
     * @return void
     */
    protected function makeEventAndListeners($event, $listeners)
    {
        if (! Str::contains($event, '\\')) {
            return;
        }

        $this-&gt;callSilent('make:event', ['name' =&gt; $event]);

        $this-&gt;makeListeners($event, $listeners);
    }

    /**
     * Make the listeners for the given event.
     *
     * @param  string  $event
     * @param  array  $listeners
     * @return void
     */
    protected function makeListeners($event, $listeners)
    {
        foreach ($listeners as $listener) {
            $listener = preg_replace('/@.+$/', '', $listener);

            $this-&gt;callSilent('make:listener', array_filter(
                ['name' =&gt; $listener, '--event' =&gt; $event]
</codefragment>
  </duplication>
  <duplication lines="130" tokens="213">
    <file path="/home/feighen/workspace/ussd/src/vendor/laravel/framework/src/Illuminate/Foundation/Console/ModelMakeCommand.php" line="3"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/Console/ModelMakeCommand.php" line="3"/>
    <codefragment>namespace Illuminate\Foundation\Console;

use Illuminate\Support\Str;
use Illuminate\Console\GeneratorCommand;
use Symfony\Component\Console\Input\InputOption;

class ModelMakeCommand extends GeneratorCommand
{
    /**
     * The console command name.
     *
     * @var string
     */
    protected $name = 'make:model';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a new Eloquent model class';

    /**
     * The type of class being generated.
     *
     * @var string
     */
    protected $type = 'Model';

    /**
     * Execute the console command.
     *
     * @return void
     */
    public function handle()
    {
        if (parent::handle() === false &amp;&amp; ! $this-&gt;option('force')) {
            return;
        }

        if ($this-&gt;option('all')) {
            $this-&gt;input-&gt;setOption('factory', true);
            $this-&gt;input-&gt;setOption('migration', true);
            $this-&gt;input-&gt;setOption('controller', true);
            $this-&gt;input-&gt;setOption('resource', true);
        }

        if ($this-&gt;option('factory')) {
            $this-&gt;createFactory();
        }

        if ($this-&gt;option('migration')) {
            $this-&gt;createMigration();
        }

        if ($this-&gt;option('controller') || $this-&gt;option('resource')) {
            $this-&gt;createController();
        }
    }

    /**
     * Create a model factory for the model.
     *
     * @return void
     */
    protected function createFactory()
    {
        $factory = Str::studly(class_basename($this-&gt;argument('name')));

        $this-&gt;call('make:factory', [
            'name' =&gt; "{$factory}Factory",
            '--model' =&gt; $this-&gt;argument('name'),
        ]);
    }

    /**
     * Create a migration file for the model.
     *
     * @return void
     */
    protected function createMigration()
    {
        $table = Str::plural(Str::snake(class_basename($this-&gt;argument('name'))));

        $this-&gt;call('make:migration', [
            'name' =&gt; "create_{$table}_table",
            '--create' =&gt; $table,
        ]);
    }

    /**
     * Create a controller for the model.
     *
     * @return void
     */
    protected function createController()
    {
        $controller = Str::studly(class_basename($this-&gt;argument('name')));

        $modelName = $this-&gt;qualifyClass($this-&gt;getNameInput());

        $this-&gt;call('make:controller', [
            'name' =&gt; "{$controller}Controller",
            '--model' =&gt; $this-&gt;option('resource') ? $modelName : null,
        ]);
    }

    /**
     * Get the stub file for the generator.
     *
     * @return string
     */
    protected function getStub()
    {
        if ($this-&gt;option('pivot')) {
            return __DIR__.'/stubs/pivot.model.stub';
        }

        return __DIR__.'/stubs/model.stub';
    }

    /**
     * Get the default namespace for the class.
     *
     * @param  string  $rootNamespace
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace)
    {
        return $rootNamespace;
</codefragment>
  </duplication>
  <duplication lines="75" tokens="73">
    <file path="/home/feighen/workspace/ussd/src/vendor/laravel/framework/src/Illuminate/Foundation/Console/ResourceMakeCommand.php" line="3"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/Console/ResourceMakeCommand.php" line="3"/>
    <codefragment>namespace Illuminate\Foundation\Console;

use Illuminate\Support\Str;
use Illuminate\Console\GeneratorCommand;
use Symfony\Component\Console\Input\InputOption;

class ResourceMakeCommand extends GeneratorCommand
{
    /**
     * The console command name.
     *
     * @var string
     */
    protected $name = 'make:resource';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a new resource';

    /**
     * The type of class being generated.
     *
     * @var string
     */
    protected $type = 'Resource';

    /**
     * Execute the console command.
     *
     * @return bool|null
     */
    public function handle()
    {
        if ($this-&gt;collection()) {
            $this-&gt;type = 'Resource collection';
        }

        parent::handle();
    }

    /**
     * Get the stub file for the generator.
     *
     * @return string
     */
    protected function getStub()
    {
        return $this-&gt;collection()
                    ? __DIR__.'/stubs/resource-collection.stub'
                    : __DIR__.'/stubs/resource.stub';
    }

    /**
     * Determine if the command is generating a resource collection.
     *
     * @return bool
     */
    protected function collection()
    {
        return $this-&gt;option('collection') ||
               Str::endsWith($this-&gt;argument('name'), 'Collection');
    }

    /**
     * Get the default namespace for the class.
     *
     * @param  string  $rootNamespace
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace)
    {
        return $rootNamespace.'\Http\Resources';
</codefragment>
  </duplication>
  <duplication lines="142" tokens="275">
    <file path="/home/feighen/workspace/ussd/src/resources/lang/en/validation.php" line="3"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/resources/lang/en/validation.php" line="3"/>
    <codefragment>return [

    /*
    |--------------------------------------------------------------------------
    | Validation Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines contain the default error messages used by
    | the validator class. Some of these rules have multiple versions such
    | as the size rules. Feel free to tweak each of these messages here.
    |
    */

    'accepted'             =&gt; 'The :attribute must be accepted.',
    'active_url'           =&gt; 'The :attribute is not a valid URL.',
    'after'                =&gt; 'The :attribute must be a date after :date.',
    'after_or_equal'       =&gt; 'The :attribute must be a date after or equal to :date.',
    'alpha'                =&gt; 'The :attribute may only contain letters.',
    'alpha_dash'           =&gt; 'The :attribute may only contain letters, numbers, dashes and underscores.',
    'alpha_num'            =&gt; 'The :attribute may only contain letters and numbers.',
    'array'                =&gt; 'The :attribute must be an array.',
    'before'               =&gt; 'The :attribute must be a date before :date.',
    'before_or_equal'      =&gt; 'The :attribute must be a date before or equal to :date.',
    'between'              =&gt; [
        'numeric' =&gt; 'The :attribute must be between :min and :max.',
        'file'    =&gt; 'The :attribute must be between :min and :max kilobytes.',
        'string'  =&gt; 'The :attribute must be between :min and :max characters.',
        'array'   =&gt; 'The :attribute must have between :min and :max items.',
    ],
    'boolean'              =&gt; 'The :attribute field must be true or false.',
    'confirmed'            =&gt; 'The :attribute confirmation does not match.',
    'date'                 =&gt; 'The :attribute is not a valid date.',
    'date_format'          =&gt; 'The :attribute does not match the format :format.',
    'different'            =&gt; 'The :attribute and :other must be different.',
    'digits'               =&gt; 'The :attribute must be :digits digits.',
    'digits_between'       =&gt; 'The :attribute must be between :min and :max digits.',
    'dimensions'           =&gt; 'The :attribute has invalid image dimensions.',
    'distinct'             =&gt; 'The :attribute field has a duplicate value.',
    'email'                =&gt; 'The :attribute must be a valid email address.',
    'exists'               =&gt; 'The selected :attribute is invalid.',
    'file'                 =&gt; 'The :attribute must be a file.',
    'filled'               =&gt; 'The :attribute field must have a value.',
    'gt'                   =&gt; [
        'numeric' =&gt; 'The :attribute must be greater than :value.',
        'file'    =&gt; 'The :attribute must be greater than :value kilobytes.',
        'string'  =&gt; 'The :attribute must be greater than :value characters.',
        'array'   =&gt; 'The :attribute must have more than :value items.',
    ],
    'gte'                  =&gt; [
        'numeric' =&gt; 'The :attribute must be greater than or equal :value.',
        'file'    =&gt; 'The :attribute must be greater than or equal :value kilobytes.',
        'string'  =&gt; 'The :attribute must be greater than or equal :value characters.',
        'array'   =&gt; 'The :attribute must have :value items or more.',
    ],
    'image'                =&gt; 'The :attribute must be an image.',
    'in'                   =&gt; 'The selected :attribute is invalid.',
    'in_array'             =&gt; 'The :attribute field does not exist in :other.',
    'integer'              =&gt; 'The :attribute must be an integer.',
    'ip'                   =&gt; 'The :attribute must be a valid IP address.',
    'ipv4'                 =&gt; 'The :attribute must be a valid IPv4 address.',
    'ipv6'                 =&gt; 'The :attribute must be a valid IPv6 address.',
    'json'                 =&gt; 'The :attribute must be a valid JSON string.',
    'lt'                   =&gt; [
        'numeric' =&gt; 'The :attribute must be less than :value.',
        'file'    =&gt; 'The :attribute must be less than :value kilobytes.',
        'string'  =&gt; 'The :attribute must be less than :value characters.',
        'array'   =&gt; 'The :attribute must have less than :value items.',
    ],
    'lte'                  =&gt; [
        'numeric' =&gt; 'The :attribute must be less than or equal :value.',
        'file'    =&gt; 'The :attribute must be less than or equal :value kilobytes.',
        'string'  =&gt; 'The :attribute must be less than or equal :value characters.',
        'array'   =&gt; 'The :attribute must not have more than :value items.',
    ],
    'max'                  =&gt; [
        'numeric' =&gt; 'The :attribute may not be greater than :max.',
        'file'    =&gt; 'The :attribute may not be greater than :max kilobytes.',
        'string'  =&gt; 'The :attribute may not be greater than :max characters.',
        'array'   =&gt; 'The :attribute may not have more than :max items.',
    ],
    'mimes'                =&gt; 'The :attribute must be a file of type: :values.',
    'mimetypes'            =&gt; 'The :attribute must be a file of type: :values.',
    'min'                  =&gt; [
        'numeric' =&gt; 'The :attribute must be at least :min.',
        'file'    =&gt; 'The :attribute must be at least :min kilobytes.',
        'string'  =&gt; 'The :attribute must be at least :min characters.',
        'array'   =&gt; 'The :attribute must have at least :min items.',
    ],
    'not_in'               =&gt; 'The selected :attribute is invalid.',
    'not_regex'            =&gt; 'The :attribute format is invalid.',
    'numeric'              =&gt; 'The :attribute must be a number.',
    'present'              =&gt; 'The :attribute field must be present.',
    'regex'                =&gt; 'The :attribute format is invalid.',
    'required'             =&gt; 'The :attribute field is required.',
    'required_if'          =&gt; 'The :attribute field is required when :other is :value.',
    'required_unless'      =&gt; 'The :attribute field is required unless :other is in :values.',
    'required_with'        =&gt; 'The :attribute field is required when :values is present.',
    'required_with_all'    =&gt; 'The :attribute field is required when :values is present.',
    'required_without'     =&gt; 'The :attribute field is required when :values is not present.',
    'required_without_all' =&gt; 'The :attribute field is required when none of :values are present.',
    'same'                 =&gt; 'The :attribute and :other must match.',
    'size'                 =&gt; [
        'numeric' =&gt; 'The :attribute must be :size.',
        'file'    =&gt; 'The :attribute must be :size kilobytes.',
        'string'  =&gt; 'The :attribute must be :size characters.',
        'array'   =&gt; 'The :attribute must contain :size items.',
    ],
    'string'               =&gt; 'The :attribute must be a string.',
    'timezone'             =&gt; 'The :attribute must be a valid zone.',
    'unique'               =&gt; 'The :attribute has already been taken.',
    'uploaded'             =&gt; 'The :attribute failed to upload.',
    'url'                  =&gt; 'The :attribute format is invalid.',

    /*
    |--------------------------------------------------------------------------
    | Custom Validation Language Lines
    |--------------------------------------------------------------------------
    |
    | Here you may specify custom validation messages for attributes using the
    | convention "attribute.rule" to name the lines. This makes it quick to
    | specify a specific custom language line for a given attribute rule.
    |
    */

    'custom' =&gt; [
        'attribute-name' =&gt; [
            'rule-name' =&gt; 'custom-message',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Custom Validation Attributes
    |--------------------------------------------------------------------------
    |
    | The following language lines are used to swap attribute place-holders
    | with something more reader friendly such as E-Mail Address instead
    | of "email". This simply helps us make messages a little cleaner.
    |
    */

    'attributes' =&gt; [],
</codefragment>
  </duplication>
  <duplication lines="56" tokens="87">
    <file path="/home/feighen/workspace/ussd/src/app/Domain/Services/Auth/RegisterService.php" line="3"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/app/Domain/Services/Auth/RegisterService.php" line="3"/>
    <codefragment>namespace App\Domain\Services\Auth;

use Illuminate\Http\Request;
use Laravail\Adr\Core\Service;
use Illuminate\Support\Facades\Auth;
use Illuminate\Auth\Events\Registered;
use App\Domain\Repositories\Contracts\UserRepository;

class RegisterService extends Service
{
    /**
     * Use repository.
     *
     * @var \App\Domain\Repositories\Contracts\UserRepository
     */
    protected $users;

    /**
     * Instantiate the class.
     *
     * @param \App\Domain\Repositories\Contracts\UserRepository
     */
    public function __construct(UserRepository $users)
    {
        $this-&gt;users = $users;
    }

    /**
     * Handle a registration request for the application.
     *
     * @param  \Illuminate\Http\Request
     * @return \Illuminate\Http\Response
     */
    public function handle(Request $request)
    {
        $this-&gt;validate($request, [
            'name'     =&gt; 'required|string|max:255',
            'email'    =&gt; 'required|string|email|max:255|unique:users',
            'password' =&gt; 'required|string|min:6|confirmed',
        ]);

        event(new Registered($user = $this-&gt;users-&gt;create($request-&gt;all())));

        Auth::guard()-&gt;login($user);

        return redirect($this-&gt;redirectTo());
    }

    /**
     * Route to redirect authenticated users to.
     *
     * @return string
     */
    protected function redirectTo()
    {
        return route('login.show');
</codefragment>
  </duplication>
  <duplication lines="141" tokens="178">
    <file path="/home/feighen/workspace/ussd/src/app/Domain/Console/Commands/AuthMakeCommand.php" line="3"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/app/Domain/Console/Commands/AuthMakeCommand.php" line="3"/>
    <codefragment>namespace App\Domain\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Console\DetectsApplicationNamespace;

class AuthMakeCommand extends Command
{
    use DetectsApplicationNamespace;

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'make:auth
                    {--views : Only scaffold the authentication views}
                    {--force : Overwrite existing views by default}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Scaffold basic login and registration views and routes';

    /**
     * The views that need to be exported.
     *
     * @var array
     */
    protected $views = [
        'auth/login.stub' =&gt; 'auth/login.blade.php',
        'auth/register.stub' =&gt; 'auth/register.blade.php',
        'auth/passwords/email.stub' =&gt; 'auth/passwords/email.blade.php',
        'auth/passwords/reset.stub' =&gt; 'auth/passwords/reset.blade.php',
        'layouts/app.stub' =&gt; 'layouts/app.blade.php',
        'dashboard.stub' =&gt; 'dashboard.blade.php',
    ];

    /**
     * Execute the console command.
     *
     * @return void
     */
    public function handle()
    {
        $this-&gt;createDirectories();

        $this-&gt;exportViews();

        if (! $this-&gt;option('views')) {
            file_put_contents(
                app_path('Actions/Dashboard/IndexAction.php'),
                $this-&gt;compileActionStub()
            );

            file_put_contents(
                app_path('Responders/Dashboard/IndexResponder.php'),
                $this-&gt;compileResponderStub()
            );

            file_put_contents(
                base_path('routes/web.php'),
                file_get_contents(__DIR__.'/stubs/auth/routes.stub'),
                FILE_APPEND
            );
        }

        $this-&gt;info('Authentication scaffolding generated successfully.');
    }

    /**
     * Create the directories for the files.
     *
     * @return void
     */
    protected function createDirectories()
    {
        if (! is_dir($directory = resource_path('views/layouts'))) {
            mkdir($directory, 0755, true);
        }

        if (! is_dir($directory = resource_path('views/auth/passwords'))) {
            mkdir($directory, 0755, true);
        }

        if (! is_dir($directory = app_path('Actions/Dashboard'))) {
            mkdir($directory, 0755, true);
        }

        if (! is_dir($directory = app_path('Responders/Dashboard'))) {
            mkdir($directory, 0755, true);
        }
    }

    /**
     * Export the authentication views.
     *
     * @return void
     */
    protected function exportViews()
    {
        foreach ($this-&gt;views as $key =&gt; $value) {
            if (file_exists($view = resource_path('views/'.$value)) &amp;&amp; ! $this-&gt;option('force')) {
                if (! $this-&gt;confirm("The [{$value}] view already exists. Do you want to replace it?")) {
                    continue;
                }
            }

            copy(
                __DIR__.'/stubs/auth/views/'.$key,
                $view
            );
        }
    }

    /**
     * Compiles the IndexAction stub.
     *
     * @return string
     */
    protected function compileActionStub()
    {
        return str_replace(
            '{{namespace}}',
            $this-&gt;getAppNamespace(),
            file_get_contents(__DIR__.'/stubs/auth/actions/IndexAction.stub')
        );
    }

    /**
     * Compiles the IndexResponder stub.
     *
     * @return string
     */
    protected function compileResponderStub()
    {
        return str_replace(
            '{{namespace}}',
            $this-&gt;getAppNamespace(),
            file_get_contents(__DIR__.'/stubs/auth/responders/IndexResponder.stub')
</codefragment>
  </duplication>
  <duplication lines="59" tokens="158">
    <file path="/home/feighen/workspace/ussd/src/app/Domain/Kernel.php" line="3"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/app/Domain/Kernel.php" line="3"/>
    <codefragment>namespace App\Domain;

use Illuminate\Foundation\Http\Kernel as HttpKernel;

class Kernel extends HttpKernel
{
    /**
     * The application's global HTTP middleware stack.
     *
     * These middleware are run during every request to your application.
     *
     * @var array
     */
    protected $middleware = [
        \Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,
        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,
        \App\Domain\Middleware\TrimStrings::class,
        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,
        \App\Domain\Middleware\TrustProxies::class,
    ];

    /**
     * The application's route middleware groups.
     *
     * @var array
     */
    protected $middlewareGroups = [
        'web' =&gt; [
            \App\Domain\Middleware\EncryptCookies::class,
            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
            \Illuminate\Session\Middleware\StartSession::class,
            // \Illuminate\Session\Middleware\AuthenticateSession::class,
            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
            \App\Domain\Middleware\VerifyCsrfToken::class,
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],

        'api' =&gt; [
            'throttle:60,1',
            'bindings',
        ],
    ];

    /**
     * The application's route middleware.
     *
     * These middleware may be assigned to groups or used individually.
     *
     * @var array
     */
    protected $routeMiddleware = [
        'auth'          =&gt; \Illuminate\Auth\Middleware\Authenticate::class,
        'auth.basic'    =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
        'bindings'      =&gt; \Illuminate\Routing\Middleware\SubstituteBindings::class,
        'cache.headers' =&gt; \Illuminate\Http\Middleware\SetCacheHeaders::class,
        'can'           =&gt; \Illuminate\Auth\Middleware\Authorize::class,
        'guest'         =&gt; \App\Domain\Middleware\RedirectIfAuthenticated::class,
        'signed'        =&gt; \Illuminate\Routing\Middleware\ValidateSignature::class,
        'throttle'      =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,
</codefragment>
  </duplication>
  <duplication lines="69" tokens="72">
    <file path="/home/feighen/workspace/ussd/src/app/Domain/Providers/RouteServiceProvider.php" line="3"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/app/Domain/Providers/RouteServiceProvider.php" line="3"/>
    <codefragment>namespace App\Domain\Providers;

use Illuminate\Support\Facades\Route;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;

class RouteServiceProvider extends ServiceProvider
{
    /**
     * This namespace is applied to your action routes.
     *
     * In addition, it is set as the URL generator's root namespace.
     *
     * @var string
     */
    protected $namespace = 'App\Actions';

    /**
     * Define your route model bindings, pattern filters, etc.
     *
     * @return void
     */
    public function boot()
    {
        //

        parent::boot();
    }

    /**
     * Define the routes for the application.
     *
     * @return void
     */
    public function map()
    {
        $this-&gt;mapApiRoutes();

        $this-&gt;mapWebRoutes();

        //
    }

    /**
     * Define the "web" routes for the application.
     *
     * These routes all receive session state, CSRF protection, etc.
     *
     * @return void
     */
    protected function mapWebRoutes()
    {
        Route::middleware('web')
             -&gt;namespace($this-&gt;namespace)
             -&gt;group(base_path('routes/web.php'));
    }

    /**
     * Define the "api" routes for the application.
     *
     * These routes are typically stateless.
     *
     * @return void
     */
    protected function mapApiRoutes()
    {
        Route::prefix('api')
             -&gt;middleware('api')
             -&gt;namespace($this-&gt;namespace)
             -&gt;group(base_path('routes/api.php'));
</codefragment>
  </duplication>
  <duplication lines="77" tokens="230">
    <file path="/home/feighen/workspace/ussd/src/vendor/laravel/framework/src/Illuminate/Foundation/Providers/ArtisanServiceProvider.php" line="54"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/Providers/ArtisanServiceProvider.php" line="64"/>
    <codefragment>use Illuminate\Database\Console\Factories\FactoryMakeCommand;
use Illuminate\Queue\Console\WorkCommand as QueueWorkCommand;
use Illuminate\Database\Console\Migrations\MigrateMakeCommand;
use Illuminate\Notifications\Console\NotificationTableCommand;
use Illuminate\Cache\Console\ClearCommand as CacheClearCommand;
use Illuminate\Queue\Console\RetryCommand as QueueRetryCommand;
use Illuminate\Cache\Console\ForgetCommand as CacheForgetCommand;
use Illuminate\Queue\Console\ListenCommand as QueueListenCommand;
use Illuminate\Queue\Console\RestartCommand as QueueRestartCommand;
use Illuminate\Queue\Console\ListFailedCommand as ListFailedQueueCommand;
use Illuminate\Queue\Console\FlushFailedCommand as FlushFailedQueueCommand;
use Illuminate\Queue\Console\ForgetFailedCommand as ForgetFailedQueueCommand;
use Illuminate\Database\Console\Migrations\FreshCommand as MigrateFreshCommand;
use Illuminate\Database\Console\Migrations\ResetCommand as MigrateResetCommand;
use Illuminate\Database\Console\Migrations\StatusCommand as MigrateStatusCommand;
use Illuminate\Database\Console\Migrations\InstallCommand as MigrateInstallCommand;
use Illuminate\Database\Console\Migrations\RefreshCommand as MigrateRefreshCommand;
use Illuminate\Database\Console\Migrations\RollbackCommand as MigrateRollbackCommand;

class ArtisanServiceProvider extends ServiceProvider
{
    /**
     * Indicates if loading of the provider is deferred.
     *
     * @var bool
     */
    protected $defer = true;

    /**
     * The commands to be registered.
     *
     * @var array
     */
    protected $commands = [
        'CacheClear' =&gt; 'command.cache.clear',
        'CacheForget' =&gt; 'command.cache.forget',
        'ClearCompiled' =&gt; 'command.clear-compiled',
        'ClearResets' =&gt; 'command.auth.resets.clear',
        'ConfigCache' =&gt; 'command.config.cache',
        'ConfigClear' =&gt; 'command.config.clear',
        'Down' =&gt; 'command.down',
        'Environment' =&gt; 'command.environment',
        'KeyGenerate' =&gt; 'command.key.generate',
        'Migrate' =&gt; 'command.migrate',
        'MigrateFresh' =&gt; 'command.migrate.fresh',
        'MigrateInstall' =&gt; 'command.migrate.install',
        'MigrateRefresh' =&gt; 'command.migrate.refresh',
        'MigrateReset' =&gt; 'command.migrate.reset',
        'MigrateRollback' =&gt; 'command.migrate.rollback',
        'MigrateStatus' =&gt; 'command.migrate.status',
        'PackageDiscover' =&gt; 'command.package.discover',
        'Preset' =&gt; 'command.preset',
        'QueueFailed' =&gt; 'command.queue.failed',
        'QueueFlush' =&gt; 'command.queue.flush',
        'QueueForget' =&gt; 'command.queue.forget',
        'QueueListen' =&gt; 'command.queue.listen',
        'QueueRestart' =&gt; 'command.queue.restart',
        'QueueRetry' =&gt; 'command.queue.retry',
        'QueueWork' =&gt; 'command.queue.work',
        'RouteCache' =&gt; 'command.route.cache',
        'RouteClear' =&gt; 'command.route.clear',
        'RouteList' =&gt; 'command.route.list',
        'Seed' =&gt; 'command.seed',
        'ScheduleFinish' =&gt; ScheduleFinishCommand::class,
        'ScheduleRun' =&gt; ScheduleRunCommand::class,
        'StorageLink' =&gt; 'command.storage.link',
        'Up' =&gt; 'command.up',
        'ViewCache' =&gt; 'command.view.cache',
        'ViewClear' =&gt; 'command.view.clear',
    ];

    /**
     * The commands to be registered.
     *
     * @var array
     */
    protected $devCommands = [
</codefragment>
  </duplication>
  <duplication lines="133" tokens="176">
    <file path="/home/feighen/workspace/ussd/src/vendor/laravel/framework/src/Illuminate/Foundation/Providers/ArtisanServiceProvider.php" line="196"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/Providers/ArtisanServiceProvider.php" line="240"/>
    <codefragment>    protected function registerAppNameCommand()
    {
        $this-&gt;app-&gt;singleton('command.app.name', function ($app) {
            return new AppNameCommand($app['composer'], $app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerAuthMakeCommand()
    {
        $this-&gt;app-&gt;singleton('command.auth.make', function ($app) {
            return new AuthMakeCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerCacheClearCommand()
    {
        $this-&gt;app-&gt;singleton('command.cache.clear', function ($app) {
            return new CacheClearCommand($app['cache'], $app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerCacheForgetCommand()
    {
        $this-&gt;app-&gt;singleton('command.cache.forget', function ($app) {
            return new CacheForgetCommand($app['cache']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerCacheTableCommand()
    {
        $this-&gt;app-&gt;singleton('command.cache.table', function ($app) {
            return new CacheTableCommand($app['files'], $app['composer']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerChannelMakeCommand()
    {
        $this-&gt;app-&gt;singleton('command.channel.make', function ($app) {
            return new ChannelMakeCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerClearCompiledCommand()
    {
        $this-&gt;app-&gt;singleton('command.clear-compiled', function () {
            return new ClearCompiledCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerClearResetsCommand()
    {
        $this-&gt;app-&gt;singleton('command.auth.resets.clear', function () {
            return new ClearResetsCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerConfigCacheCommand()
    {
        $this-&gt;app-&gt;singleton('command.config.cache', function ($app) {
            return new ConfigCacheCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerConfigClearCommand()
    {
        $this-&gt;app-&gt;singleton('command.config.clear', function ($app) {
            return new ConfigClearCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerConsoleMakeCommand()
    {
        $this-&gt;app-&gt;singleton('command.console.make', function ($app) {
            return new ConsoleMakeCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerControllerMakeCommand()
</codefragment>
  </duplication>
  <duplication lines="305" tokens="376">
    <file path="/home/feighen/workspace/ussd/src/vendor/laravel/framework/src/Illuminate/Foundation/Providers/ArtisanServiceProvider.php" line="331"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/Providers/ArtisanServiceProvider.php" line="399"/>
    <codefragment>            return new ControllerMakeCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerEventGenerateCommand()
    {
        $this-&gt;app-&gt;singleton('command.event.generate', function () {
            return new EventGenerateCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerEventMakeCommand()
    {
        $this-&gt;app-&gt;singleton('command.event.make', function ($app) {
            return new EventMakeCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerExceptionMakeCommand()
    {
        $this-&gt;app-&gt;singleton('command.exception.make', function ($app) {
            return new ExceptionMakeCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerFactoryMakeCommand()
    {
        $this-&gt;app-&gt;singleton('command.factory.make', function ($app) {
            return new FactoryMakeCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerDownCommand()
    {
        $this-&gt;app-&gt;singleton('command.down', function () {
            return new DownCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerEnvironmentCommand()
    {
        $this-&gt;app-&gt;singleton('command.environment', function () {
            return new EnvironmentCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerJobMakeCommand()
    {
        $this-&gt;app-&gt;singleton('command.job.make', function ($app) {
            return new JobMakeCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerKeyGenerateCommand()
    {
        $this-&gt;app-&gt;singleton('command.key.generate', function () {
            return new KeyGenerateCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerListenerMakeCommand()
    {
        $this-&gt;app-&gt;singleton('command.listener.make', function ($app) {
            return new ListenerMakeCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerMailMakeCommand()
    {
        $this-&gt;app-&gt;singleton('command.mail.make', function ($app) {
            return new MailMakeCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerMiddlewareMakeCommand()
    {
        $this-&gt;app-&gt;singleton('command.middleware.make', function ($app) {
            return new MiddlewareMakeCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerMigrateCommand()
    {
        $this-&gt;app-&gt;singleton('command.migrate', function ($app) {
            return new MigrateCommand($app['migrator']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerMigrateFreshCommand()
    {
        $this-&gt;app-&gt;singleton('command.migrate.fresh', function () {
            return new MigrateFreshCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerMigrateInstallCommand()
    {
        $this-&gt;app-&gt;singleton('command.migrate.install', function ($app) {
            return new MigrateInstallCommand($app['migration.repository']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerMigrateMakeCommand()
    {
        $this-&gt;app-&gt;singleton('command.migrate.make', function ($app) {
            // Once we have the migration creator registered, we will create the command
            // and inject the creator. The creator is responsible for the actual file
            // creation of the migrations, and may be extended by these developers.
            $creator = $app['migration.creator'];

            $composer = $app['composer'];

            return new MigrateMakeCommand($creator, $composer);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerMigrateRefreshCommand()
    {
        $this-&gt;app-&gt;singleton('command.migrate.refresh', function () {
            return new MigrateRefreshCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerMigrateResetCommand()
    {
        $this-&gt;app-&gt;singleton('command.migrate.reset', function ($app) {
            return new MigrateResetCommand($app['migrator']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerMigrateRollbackCommand()
    {
        $this-&gt;app-&gt;singleton('command.migrate.rollback', function ($app) {
            return new MigrateRollbackCommand($app['migrator']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerMigrateStatusCommand()
    {
        $this-&gt;app-&gt;singleton('command.migrate.status', function ($app) {
            return new MigrateStatusCommand($app['migrator']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerModelMakeCommand()
    {
        $this-&gt;app-&gt;singleton('command.model.make', function ($app) {
            return new ModelMakeCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerNotificationMakeCommand()
    {
        $this-&gt;app-&gt;singleton('command.notification.make', function ($app) {
            return new NotificationMakeCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerNotificationTableCommand()
    {
        $this-&gt;app-&gt;singleton('command.notification.table', function ($app) {
            return new NotificationTableCommand($app['files'], $app['composer']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerObserverMakeCommand()
    {
        $this-&gt;app-&gt;singleton('command.observer.make', function ($app) {
            return new ObserverMakeCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerPackageDiscoverCommand()
    {
        $this-&gt;app-&gt;singleton('command.package.discover', function ($app) {
            return new PackageDiscoverCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerPolicyMakeCommand()
</codefragment>
  </duplication>
  <duplication lines="145" tokens="180">
    <file path="/home/feighen/workspace/ussd/src/vendor/laravel/framework/src/Illuminate/Foundation/Providers/ArtisanServiceProvider.php" line="635"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/Providers/ArtisanServiceProvider.php" line="715"/>
    <codefragment>    protected function registerPolicyMakeCommand()
    {
        $this-&gt;app-&gt;singleton('command.policy.make', function ($app) {
            return new PolicyMakeCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerPresetCommand()
    {
        $this-&gt;app-&gt;singleton('command.preset', function () {
            return new PresetCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerProviderMakeCommand()
    {
        $this-&gt;app-&gt;singleton('command.provider.make', function ($app) {
            return new ProviderMakeCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerQueueFailedCommand()
    {
        $this-&gt;app-&gt;singleton('command.queue.failed', function () {
            return new ListFailedQueueCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerQueueForgetCommand()
    {
        $this-&gt;app-&gt;singleton('command.queue.forget', function () {
            return new ForgetFailedQueueCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerQueueFlushCommand()
    {
        $this-&gt;app-&gt;singleton('command.queue.flush', function () {
            return new FlushFailedQueueCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerQueueListenCommand()
    {
        $this-&gt;app-&gt;singleton('command.queue.listen', function ($app) {
            return new QueueListenCommand($app['queue.listener']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerQueueRestartCommand()
    {
        $this-&gt;app-&gt;singleton('command.queue.restart', function () {
            return new QueueRestartCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerQueueRetryCommand()
    {
        $this-&gt;app-&gt;singleton('command.queue.retry', function () {
            return new QueueRetryCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerQueueWorkCommand()
    {
        $this-&gt;app-&gt;singleton('command.queue.work', function ($app) {
            return new QueueWorkCommand($app['queue.worker']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerQueueFailedTableCommand()
    {
        $this-&gt;app-&gt;singleton('command.queue.failed-table', function ($app) {
            return new FailedTableCommand($app['files'], $app['composer']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerQueueTableCommand()
    {
        $this-&gt;app-&gt;singleton('command.queue.table', function ($app) {
            return new TableCommand($app['files'], $app['composer']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerRequestMakeCommand()
</codefragment>
  </duplication>
  <duplication lines="188" tokens="238">
    <file path="/home/feighen/workspace/ussd/src/vendor/laravel/framework/src/Illuminate/Foundation/Providers/ArtisanServiceProvider.php" line="806"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/Providers/ArtisanServiceProvider.php" line="946"/>
    <codefragment>            return new RuleMakeCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerSeederMakeCommand()
    {
        $this-&gt;app-&gt;singleton('command.seeder.make', function ($app) {
            return new SeederMakeCommand($app['files'], $app['composer']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerSessionTableCommand()
    {
        $this-&gt;app-&gt;singleton('command.session.table', function ($app) {
            return new SessionTableCommand($app['files'], $app['composer']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerStorageLinkCommand()
    {
        $this-&gt;app-&gt;singleton('command.storage.link', function () {
            return new StorageLinkCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerRouteCacheCommand()
    {
        $this-&gt;app-&gt;singleton('command.route.cache', function ($app) {
            return new RouteCacheCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerRouteClearCommand()
    {
        $this-&gt;app-&gt;singleton('command.route.clear', function ($app) {
            return new RouteClearCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerRouteListCommand()
    {
        $this-&gt;app-&gt;singleton('command.route.list', function ($app) {
            return new RouteListCommand($app['router']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerSeedCommand()
    {
        $this-&gt;app-&gt;singleton('command.seed', function ($app) {
            return new SeedCommand($app['db']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerScheduleFinishCommand()
    {
        $this-&gt;app-&gt;singleton(ScheduleFinishCommand::class);
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerScheduleRunCommand()
    {
        $this-&gt;app-&gt;singleton(ScheduleRunCommand::class);
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerServeCommand()
    {
        $this-&gt;app-&gt;singleton('command.serve', function () {
            return new ServeCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerTestMakeCommand()
    {
        $this-&gt;app-&gt;singleton('command.test.make', function ($app) {
            return new TestMakeCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerUpCommand()
    {
        $this-&gt;app-&gt;singleton('command.up', function () {
            return new UpCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerVendorPublishCommand()
    {
        $this-&gt;app-&gt;singleton('command.vendor.publish', function ($app) {
            return new VendorPublishCommand($app['files']);
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerViewCacheCommand()
    {
        $this-&gt;app-&gt;singleton('command.view.cache', function ($app) {
            return new ViewCacheCommand;
        });
    }

    /**
     * Register the command.
     *
     * @return void
     */
    protected function registerViewClearCommand()
    {
        $this-&gt;app-&gt;singleton('command.view.clear', function ($app) {
            return new ViewClearCommand($app['files']);
        });
    }

    /**
     * Get the services provided by the provider.
     *
     * @return array
     */
    public function provides()
    {
        return array_merge(array_values($this-&gt;commands), array_values($this-&gt;devCommands));
</codefragment>
  </duplication>
  <duplication lines="77" tokens="116">
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/tasks/ext/SmartyTask.php" line="183"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/tasks/ext/CapsuleTask.php" line="124"/>
    <codefragment>    public function setControlTemplate($controlTemplate)
    {
        $this-&gt;controlTemplate = $controlTemplate;
    }

    /**
     * Get the control template for the
     * generating process.
     * @return string
     */
    public function getControlTemplate()
    {
        return $this-&gt;controlTemplate;
    }

    /**
     * [REQUIRED] Set the path where Smarty will look
     * for templates using the file template
     * loader.
     * @param $templatePath
     * @return void
     */
    public function setTemplatePath($templatePath)
    {
        $resolvedPath = "";
        $tok = strtok($templatePath, ",");
        while ($tok) {
            // resolve relative path from basedir and leave
            // absolute path untouched.
            $fullPath = $this-&gt;project-&gt;resolveFile($tok);
            $cpath = $fullPath-&gt;getCanonicalPath();
            if ($cpath === false) {
                $this-&gt;log("Template directory does not exist: " . $fullPath-&gt;getAbsolutePath());
            } else {
                $resolvedPath .= $cpath;
            }
            $tok = strtok(",");
            if ($tok) {
                $resolvedPath .= ",";
            }
        }
        $this-&gt;templatePath = $resolvedPath;
    }

    /**
     * Get the path where Smarty will look
     * for templates using the file template
     * loader.
     * @return string
     */
    public function getTemplatePath()
    {
        return $this-&gt;templatePath;
    }

    /**
     * [REQUIRED] Set the output directory. It will be
     * created if it doesn't exist.
     * @param  PhingFile $outputDirectory
     * @return void
     * @throws Exception
     */
    public function setOutputDirectory(PhingFile $outputDirectory)
    {
        try {
            if (!$outputDirectory-&gt;exists()) {
                $this-&gt;log(
                    "Output directory does not exist, creating: " . $outputDirectory-&gt;getPath(),
                    Project::MSG_VERBOSE
                );
                if (!$outputDirectory-&gt;mkdirs()) {
                    throw new IOException("Unable to create Ouptut directory: " . $outputDirectory-&gt;getAbsolutePath());
                }
            }
            $this-&gt;outputDirectory = $outputDirectory-&gt;getCanonicalPath();
        } catch (IOException $ioe) {
            throw new BuildException($ioe-&gt;getMessage());
</codefragment>
  </duplication>
  <duplication lines="86" tokens="78">
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/tasks/ext/ssh/ScpTask.php" line="135"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/tasks/ext/ssh/SshTask.php" line="94"/>
    <codefragment>    public function setUsername($username)
    {
        $this-&gt;username = $username;
    }

    /**
     * Returns the username
     */
    public function getUsername()
    {
        return $this-&gt;username;
    }

    /**
     * Sets the password of the user to scp
     * @param $password
     */
    public function setPassword($password)
    {
        $this-&gt;password = $password;
    }

    /**
     * Returns the password
     */
    public function getPassword()
    {
        return $this-&gt;password;
    }

    /**
     * Sets the public key file of the user to scp
     * @param $pubkeyfile
     */
    public function setPubkeyfile($pubkeyfile)
    {
        $this-&gt;pubkeyfile = $pubkeyfile;
    }

    /**
     * Returns the pubkeyfile
     */
    public function getPubkeyfile()
    {
        return $this-&gt;pubkeyfile;
    }

    /**
     * Sets the private key file of the user to scp
     * @param $privkeyfile
     */
    public function setPrivkeyfile($privkeyfile)
    {
        $this-&gt;privkeyfile = $privkeyfile;
    }

    /**
     * Returns the private keyfile
     */
    public function getPrivkeyfile()
    {
        return $this-&gt;privkeyfile;
    }

    /**
     * Sets the private key file passphrase of the user to scp
     * @param $privkeyfilepassphrase
     */
    public function setPrivkeyfilepassphrase($privkeyfilepassphrase)
    {
        $this-&gt;privkeyfilepassphrase = $privkeyfilepassphrase;
    }

    /**
     * Returns the private keyfile passphrase
     * @param $privkeyfilepassphrase
     * @return string
     */
    public function getPrivkeyfilepassphrase($privkeyfilepassphrase)
    {
        return $this-&gt;privkeyfilepassphrase;
    }

    /**
     * Sets whether to autocreate remote directories
     * @param $autocreate
</codefragment>
  </duplication>
  <duplication lines="20" tokens="80">
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/tasks/ext/ssh/ScpTask.php" line="373"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/tasks/ext/ssh/SshTask.php" line="263"/>
    <codefragment>        $methods = !empty($this-&gt;methods) ? $this-&gt;methods-&gt;toArray($p) : array();
        $this-&gt;connection = ssh2_connect($this-&gt;host, $this-&gt;port, $methods);
        if (!$this-&gt;connection) {
            throw new BuildException("Could not establish connection to " . $this-&gt;host . ":" . $this-&gt;port . "!");
        }

        $could_auth = null;
        if ($this-&gt;pubkeyfile) {
            $could_auth = ssh2_auth_pubkey_file(
                $this-&gt;connection,
                $this-&gt;username,
                $this-&gt;pubkeyfile,
                $this-&gt;privkeyfile,
                $this-&gt;privkeyfilepassphrase
            );
        } else {
            $could_auth = ssh2_auth_password($this-&gt;connection, $this-&gt;username, $this-&gt;password);
        }
        if (!$could_auth) {
            throw new BuildException("Could not authenticate connection!");
</codefragment>
  </duplication>
  <duplication lines="32" tokens="82">
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/tasks/ext/phpmd/PHPMDTask.php" line="272"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/tasks/ext/PhpCodeSnifferTask.php" line="400"/>
    <codefragment>    protected function getFilesToParse()
    {
        $filesToParse = array();

        if ($this-&gt;file instanceof PhingFile) {
            $filesToParse[] = $this-&gt;file-&gt;getPath();
        } else {
            // append any files in filesets
            foreach ($this-&gt;filesets as $fs) {
                $dir = $fs-&gt;getDir($this-&gt;project)-&gt;getAbsolutePath();
                foreach ($fs-&gt;getDirectoryScanner($this-&gt;project)-&gt;getIncludedFiles() as $filename) {
                    $fileAbsolutePath = $dir . DIRECTORY_SEPARATOR . $filename;
                    if ($this-&gt;cache) {
                        $lastMTime = $this-&gt;cache-&gt;get($fileAbsolutePath);
                        $currentMTime = filemtime($fileAbsolutePath);
                        if ($lastMTime &gt;= $currentMTime) {
                            continue;
                        } else {
                            $this-&gt;cache-&gt;put($fileAbsolutePath, $currentMTime);
                        }
                    }
                    $filesToParse[] = $fileAbsolutePath;
                }
            }
        }
        return $filesToParse;
    }

    /**
     * Executes PHPMD against PhingFile or a FileSet
     *
     * @throws BuildException - if the phpmd classes can't be loaded.
</codefragment>
  </duplication>
  <duplication lines="25" tokens="85">
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/tasks/ext/JslLintTask.php" line="193"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/tasks/ext/PhpLintTask.php" line="178"/>
    <codefragment>        if ($this-&gt;file instanceof PhingFile) {
            $this-&gt;lint($this-&gt;file-&gt;getPath());
        } else { // process filesets
            $project = $this-&gt;getProject();
            foreach ($this-&gt;filesets as $fs) {
                $ds = $fs-&gt;getDirectoryScanner($project);
                $files = $ds-&gt;getIncludedFiles();
                $dir = $fs-&gt;getDir($this-&gt;project)-&gt;getPath();
                foreach ($files as $file) {
                    $this-&gt;lint($dir . DIRECTORY_SEPARATOR . $file);
                }
            }
        }

        // write list of 'bad files' to file (if specified)
        if ($this-&gt;tofile) {
            $writer = new FileWriter($this-&gt;tofile);

            foreach ($this-&gt;badFiles as $file =&gt; $messages) {
                foreach ($messages as $msg) {
                    $writer-&gt;write($file . "=" . $msg . PHP_EOL);
                }
            }

            $writer-&gt;close();
</codefragment>
  </duplication>
  <duplication lines="31" tokens="93">
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/tasks/system/ForeachTask.php" line="215"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/tasks/system/ForeachTask.php" line="252"/>
    <codefragment>            $value = $srcFiles[$j];
            $premapped = "";

            if ($this-&gt;absparam) {
                $prop = $callee-&gt;createProperty();
                $prop-&gt;setOverride(true);
                $prop-&gt;setName($this-&gt;absparam);
                $prop-&gt;setValue($fromDir . FileSystem::getFileSystem()-&gt;getSeparator() . $value);
            }

            if ($mapper !== null) {
                $premapped = $value;
                $value = $mapper-&gt;main($value);
                if ($value === null) {
                    continue;
                }
                $value = array_shift($value);
            }

            if ($this-&gt;param) {
                $this-&gt;log(
                    "Setting param '$this-&gt;param' to value '$value'" . ($premapped ? " (mapped from '$premapped')" : ''),
                    Project::MSG_VERBOSE
                );
                $prop = $callee-&gt;createProperty();
                $prop-&gt;setOverride(true);
                $prop-&gt;setName($this-&gt;param);
                $prop-&gt;setValue($value);
            }

            $callee-&gt;main();
</codefragment>
  </duplication>
  <duplication lines="33" tokens="96">
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/listener/HtmlColorLogger.php" line="106"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/listener/AnsiColorLogger.php" line="182"/>
    <codefragment>            if ($err !== null) {
                $this-&gt;errColor = self::PREFIX . $err . self::SUFFIX;
            }
            if ($warn !== null) {
                $this-&gt;warnColor = self::PREFIX . $warn . self::SUFFIX;
            }
            if ($info !== null) {
                $this-&gt;infoColor = self::PREFIX . $info . self::SUFFIX;
            }
            if ($verbose !== null) {
                $this-&gt;verboseColor = self::PREFIX . $verbose . self::SUFFIX;
            }
            if ($debug !== null) {
                $this-&gt;debugColor = self::PREFIX . $debug . self::SUFFIX;
            }
        } catch (IOException $ioe) {
            //Ignore exception - we will use the defaults.
        }
    }

    /**
     * @see DefaultLogger#printMessage
     * @param string       $message
     * @param OutputStream $stream
     * @param int          $priority
     */
    final protected function printMessage($message, OutputStream $stream, $priority)
    {
        if ($message !== null) {

            if (!$this-&gt;colorsSet) {
                $this-&gt;setColors();
                $this-&gt;colorsSet = true;
</codefragment>
  </duplication>
  <duplication lines="19" tokens="71">
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/listener/HtmlColorLogger.php" line="158"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/listener/AnsiColorLogger.php" line="217"/>
    <codefragment>            switch ($priority) {
                case Project::MSG_ERR:
                    $message = $this-&gt;errColor . $message . self::END_COLOR;
                    break;
                case Project::MSG_WARN:
                    $message = $this-&gt;warnColor . $message . self::END_COLOR;
                    break;
                case Project::MSG_INFO:
                    $message = $this-&gt;infoColor . $message . self::END_COLOR;
                    break;
                case Project::MSG_VERBOSE:
                    $message = $this-&gt;verboseColor . $message . self::END_COLOR;
                    break;
                case Project::MSG_DEBUG:
                    $message = $this-&gt;debugColor . $message . self::END_COLOR;
                    break;
            }

            $stream-&gt;write($message . '&lt;br/&gt;');
</codefragment>
  </duplication>
  <duplication lines="32" tokens="73">
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/IntrospectionHelper.php" line="213"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/IntrospectionHelper.php" line="247"/>
    <codefragment>                } elseif (strpos($name, "addconfigured") === 0) {

                    // *must* use class hints if using addConfigured ...

                    // 1 param only
                    $params = $method-&gt;getParameters();

                    if (count($params) &lt; 1) {
                        throw new BuildException($method-&gt;getDeclaringClass()-&gt;getName() . "::" . $method-&gt;getName(
                            ) . "() must take at least one parameter.");
                    }

                    if (count($params) &gt; 1) {
                        $this-&gt;warn(
                            $method-&gt;getDeclaringClass()-&gt;getName() . "::" . $method-&gt;getName(
                            ) . "() takes more than one parameter. (IH only uses the first)"
                        );
                    }

                    $classname = null;

                    if (($hint = $params[0]-&gt;getClass()) !== null) {
                        $classname = $hint-&gt;getName();
                    }

                    if ($classname === null) {
                        throw new BuildException($method-&gt;getDeclaringClass()-&gt;getName() . "::" . $method-&gt;getName(
                            ) . "() method MUST use a class hint to indicate the class type of parameter.");
                    }

                    $this-&gt;nestedTypes[$name] = $classname;

</codefragment>
  </duplication>
  <duplication lines="82" tokens="86">
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/types/selectors/BaseSelectorContainer.php" line="141"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/types/selectors/AbstractSelectorContainer.php" line="198"/>
    <codefragment>    public function createSelector()
    {
        $o = new SelectSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add an "And" selector entry on the selector list
     */
    public function createAnd()
    {
        $o = new AndSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add an "Or" selector entry on the selector list
     */
    public function createOr()
    {
        $o = new OrSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a "Not" selector entry on the selector list
     */
    public function createNot()
    {
        $o = new NotSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a "None" selector entry on the selector list
     */
    public function createNone()
    {
        $o = new NoneSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a majority selector entry on the selector list
     */
    public function createMajority()
    {
        $o = new MajoritySelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a selector date entry on the selector list
     */
    public function createDate()
    {
        $o = new DateSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a selector size entry on the selector list
     */
    public function createSize()
    {
        $o = new SizeSelector();
        $this-&gt;appendSelector($o);

</codefragment>
  </duplication>
  <duplication lines="97" tokens="104">
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/types/selectors/BaseSelectorContainer.php" line="210"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/types/selectors/AbstractSelectorContainer.php" line="282"/>
    <codefragment>        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a selector size entry on the selector list
     */
    public function createSize()
    {
        $o = new SizeSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a selector filename entry on the selector list
     */
    public function createFilename()
    {
        $o = new FilenameSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add an extended selector entry on the selector list
     */
    public function createCustom()
    {
        $o = new ExtendSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a contains selector entry on the selector list
     */
    public function createContains()
    {
        $o = new ContainsSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a contains selector entry on the selector list
     */
    public function createContainsRegexp()
    {
        $o = new ContainsRegexpSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a present selector entry on the selector list
     */
    public function createPresent()
    {
        $o = new PresentSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a depth selector entry on the selector list
     */
    public function createDepth()
    {
        $o = new DepthSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a depends selector entry on the selector list
     */
    public function createDepend()
    {
        $o = new DependSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a different selector entry on the selector list
     */
    public function createDifferent()
</codefragment>
  </duplication>
  <duplication lines="48" tokens="97">
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/types/selectors/DependSelector.php" line="120"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/types/selectors/PresentSelector.php" line="124"/>
    <codefragment>    public function verifySettings()
    {
        if ($this-&gt;targetdir === null) {
            $this-&gt;setError("The targetdir attribute is required.");
        }
        if ($this-&gt;mapperElement === null) {
            $this-&gt;map = new IdentityMapper();
        } else {
            $this-&gt;map = $this-&gt;mapperElement-&gt;getImplementation();
        }
        if ($this-&gt;map === null) {
            $this-&gt;setError("Could not set &lt;mapper&gt; element.");
        }
    }

    /**
     * The heart of the matter. This is where the selector gets to decide
     * on the inclusion of a file in a particular fileset.
     *
     * @param PhingFile $basedir base directory the scan is being done from
     * @param string $filename the name of the file to check
     * @param PhingFile $file a PhingFile object the selector can use
     *
     * @throws BuildException
     *
     * @return bool whether the file should be selected or not
     */
    public function isSelected(PhingFile $basedir, $filename, PhingFile $file)
    {
        $this-&gt;validate();

        // Determine file whose out-of-dateness is to be checked
        $destfiles = $this-&gt;map-&gt;main($filename);

        // If filename does not match the To attribute of the mapper
        // then filter it out of the files we are considering
        if ($destfiles === null) {
            return false;
        }
        // Sanity check
        if (count($destfiles) !== 1 || $destfiles[0] === null) {
            throw new BuildException("Invalid destination file results for " . $this-&gt;targetdir . " with filename " . $filename);
        }
        $destname = $destfiles[0];
        $destfile = new PhingFile($this-&gt;targetdir, $destname);

        return SelectorUtils::isOutOfDate($file, $destfile, $this-&gt;granularity);
    }
</codefragment>
  </duplication>
  <duplication lines="39" tokens="73">
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/types/selectors/AbstractSelectorContainer.php" line="44"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/types/AbstractFileSet.php" line="405"/>
    <codefragment>    public function getRef(Project $p)
    {
        if (!$this-&gt;checked) {
            $stk = array();
            array_push($stk, $this);
            $this-&gt;dieOnCircularReference($stk, $p);
        }

        $o = $this-&gt;ref-&gt;getReferencedObject($p);
        if (!($o instanceof FileSet)) {
            $msg = $this-&gt;ref-&gt;getRefId() . " doesn't denote a fileset";
            throw new BuildException($msg);
        } else {
            return $o;
        }
    }

    /**
     * Indicates whether there are any selectors here.
     *
     * @return boolean Whether any selectors are in this container
     */
    public function hasSelectors()
    {
        if ($this-&gt;isReference() &amp;&amp; $this-&gt;getProject() !== null) {
            return $this-&gt;getRef($this-&gt;getProject())-&gt;hasSelectors();
        }

        return !empty($this-&gt;selectors);
    }

    /**
     * Convert the Selectors within this container to a string. This will
     * just be a helper class for the subclasses that put their own name
     * around the contents listed here.
     *
     * @return string comma separated list of Selectors contained in this one
     */
    public function __toString()
</codefragment>
  </duplication>
  <duplication lines="213" tokens="219">
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/types/selectors/AbstractSelectorContainer.php" line="188"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/phing/phing/classes/phing/types/AbstractFileSet.php" line="533"/>
    <codefragment>        $this-&gt;selectorsList[] = $selector;
    }

    /* Methods below all add specific selectors */

    /**
     * add a "Select" selector entry on the selector list
     *
     * @return SelectSelector
     */
    public function createSelector()
    {
        $o = new SelectSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add an "And" selector entry on the selector list
     *
     * @return AndSelector
     */
    public function createAnd()
    {
        $o = new AndSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add an "Or" selector entry on the selector list
     *
     * @return OrSelector
     */
    public function createOr()
    {
        $o = new OrSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a "Not" selector entry on the selector list
     */
    public function createNot()
    {
        $o = new NotSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a "None" selector entry on the selector list
     */
    public function createNone()
    {
        $o = new NoneSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a majority selector entry on the selector list
     */
    public function createMajority()
    {
        $o = new MajoritySelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a selector date entry on the selector list
     */
    public function createDate()
    {
        $o = new DateSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a selector different entry on the selector list
     */
    public function createDifferent()
    {
        $o = new DifferentSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a selector size entry on the selector list
     */
    public function createSize()
    {
        $o = new SizeSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a selector filename entry on the selector list
     */
    public function createFilename()
    {
        $o = new FilenameSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add an extended selector entry on the selector list
     */
    public function createCustom()
    {
        $o = new ExtendSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a contains selector entry on the selector list
     */
    public function createContains()
    {
        $o = new ContainsSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a contains selector entry on the selector list
     */
    public function createContainsRegexp()
    {
        $o = new ContainsRegexpSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a present selector entry on the selector list
     */
    public function createPresent()
    {
        $o = new PresentSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a depth selector entry on the selector list
     */
    public function createDepth()
    {
        $o = new DepthSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a depends selector entry on the selector list
     */
    public function createDepend()
    {
        $o = new DependSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a type selector entry on the selector list
     */
    public function createType()
    {
        $o = new TypeSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a readable selector entry on the selector list
     */
    public function createReadable()
    {
        $o = new ReadableSelector();
        $this-&gt;appendSelector($o);

        return $o;
    }

    /**
     * add a writable selector entry on the selector list
     */
    public function createWritable()
</codefragment>
  </duplication>
  <duplication lines="19" tokens="73">
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/Generic/Sniffs/WhiteSpace/ScopeIndentSniff.php" line="586"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/Generic/Sniffs/WhiteSpace/ScopeIndentSniff.php" line="1032"/>
    <codefragment>                    $first = $phpcsFile-&gt;findFirstOnLine(T_WHITESPACE, $tokens[$scopeCloser]['scope_condition'], true);
                    if ($this-&gt;debug === true) {
                        $line = $tokens[$first]['line'];
                        $type = $tokens[$first]['type'];
                        echo "\t* first token is $first ($type) on line $line *".PHP_EOL;
                    }

                    while ($tokens[$first]['code'] === T_CONSTANT_ENCAPSED_STRING
                        &amp;&amp; $tokens[($first - 1)]['code'] === T_CONSTANT_ENCAPSED_STRING
                    ) {
                        $first = $phpcsFile-&gt;findFirstOnLine(T_WHITESPACE, ($first - 1), true);
                        if ($this-&gt;debug === true) {
                            $line = $tokens[$first]['line'];
                            $type = $tokens[$first]['type'];
                            echo "\t* found multi-line string; amended first token is $first ($type) on line $line *".PHP_EOL;
                        }
                    }

                    $currentIndent = ($tokens[$first]['column'] - 1);
</codefragment>
  </duplication>
  <duplication lines="82" tokens="132">
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/Generic/Sniffs/Functions/OpeningFunctionBraceKernighanRitchieSniff.php" line="16"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/Generic/Sniffs/Functions/OpeningFunctionBraceBsdAllmanSniff.php" line="16"/>
    <codefragment>class OpeningFunctionBraceKernighanRitchieSniff implements Sniff
{


    /**
     * Should this sniff check function braces?
     *
     * @var boolean
     */
    public $checkFunctions = true;

    /**
     * Should this sniff check closure braces?
     *
     * @var boolean
     */
    public $checkClosures = false;


    /**
     * Registers the tokens that this sniff wants to listen for.
     *
     * @return void
     */
    public function register()
    {
        return [
            T_FUNCTION,
            T_CLOSURE,
        ];

    }//end register()


    /**
     * Processes this test, when one of its tokens is encountered.
     *
     * @param \PHP_CodeSniffer\Files\File $phpcsFile The file being scanned.
     * @param int                         $stackPtr  The position of the current token in the
     *                                               stack passed in $tokens.
     *
     * @return void
     */
    public function process(File $phpcsFile, $stackPtr)
    {
        $tokens = $phpcsFile-&gt;getTokens();

        if (isset($tokens[$stackPtr]['scope_opener']) === false) {
            return;
        }

        if (($tokens[$stackPtr]['code'] === T_FUNCTION
            &amp;&amp; (bool) $this-&gt;checkFunctions === false)
            || ($tokens[$stackPtr]['code'] === T_CLOSURE
            &amp;&amp; (bool) $this-&gt;checkClosures === false)
        ) {
            return;
        }

        $openingBrace = $tokens[$stackPtr]['scope_opener'];
        $closeBracket = $tokens[$stackPtr]['parenthesis_closer'];
        if ($tokens[$stackPtr]['code'] === T_CLOSURE) {
            $use = $phpcsFile-&gt;findNext(T_USE, ($closeBracket + 1), $tokens[$stackPtr]['scope_opener']);
            if ($use !== false) {
                $openBracket  = $phpcsFile-&gt;findNext(T_OPEN_PARENTHESIS, ($use + 1));
                $closeBracket = $tokens[$openBracket]['parenthesis_closer'];
            }
        }

        // Find the end of the function declaration.
        $prev = $phpcsFile-&gt;findPrevious(Tokens::$emptyTokens, ($openingBrace - 1), $closeBracket, true);

        $functionLine = $tokens[$prev]['line'];
        $braceLine    = $tokens[$openingBrace]['line'];

        $lineDifference = ($braceLine - $functionLine);

        $metricType = 'Function';
        if ($tokens[$stackPtr]['code'] === T_CLOSURE) {
            $metricType = 'Closure';
        }

</codefragment>
  </duplication>
  <duplication lines="29" tokens="98">
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Sniffs/ControlStructures/ForEachLoopDeclarationSniff.php" line="79"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Sniffs/ControlStructures/ForLoopDeclarationSniff.php" line="82"/>
    <codefragment>            if ($fix === true) {
                $phpcsFile-&gt;fixer-&gt;replaceToken(($openingBracket + 1), '');
            }
        } else if ($this-&gt;requiredSpacesAfterOpen &gt; 0) {
            $spaceAfterOpen = 0;
            if ($tokens[($openingBracket + 1)]['code'] === T_WHITESPACE) {
                $spaceAfterOpen = strlen($tokens[($openingBracket + 1)]['content']);
            }

            if ($spaceAfterOpen !== $this-&gt;requiredSpacesAfterOpen) {
                $error = 'Expected %s spaces after opening bracket; %s found';
                $data  = [
                    $this-&gt;requiredSpacesAfterOpen,
                    $spaceAfterOpen,
                ];
                $fix   = $phpcsFile-&gt;addFixableError($error, $stackPtr, 'SpacingAfterOpen', $data);
                if ($fix === true) {
                    $padding = str_repeat(' ', $this-&gt;requiredSpacesAfterOpen);
                    if ($spaceAfterOpen === 0) {
                        $phpcsFile-&gt;fixer-&gt;addContent($openingBracket, $padding);
                    } else {
                        $phpcsFile-&gt;fixer-&gt;replaceToken(($openingBracket + 1), $padding);
                    }
                }
            }
        }//end if

        if ($this-&gt;requiredSpacesBeforeClose === 0 &amp;&amp; $tokens[($closingBracket - 1)]['code'] === T_WHITESPACE) {
            $error = 'Space found before closing bracket of FOREACH loop';
</codefragment>
  </duplication>
  <duplication lines="14" tokens="78">
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Sniffs/Strings/ConcatenationSpacingSniff.php" line="122"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Sniffs/Strings/ConcatenationSpacingSniff.php" line="139"/>
    <codefragment>            if ($ignoreBefore === false &amp;&amp; ($before !== 'newline' || $this-&gt;ignoreNewlines === false)) {
                if ($tokens[($stackPtr - 1)]['code'] === T_WHITESPACE) {
                    $phpcsFile-&gt;fixer-&gt;beginChangeset();
                    $phpcsFile-&gt;fixer-&gt;replaceToken(($stackPtr - 1), $padding);
                    if ($this-&gt;spacing === 0
                        &amp;&amp; ($tokens[($stackPtr - 2)]['code'] === T_LNUMBER
                        || $tokens[($stackPtr - 2)]['code'] === T_DNUMBER)
                    ) {
                        $phpcsFile-&gt;fixer-&gt;replaceToken(($stackPtr - 2), '('.$tokens[($stackPtr - 2)]['content'].')');
                    }

                    $phpcsFile-&gt;fixer-&gt;endChangeset();
                } else if ($this-&gt;spacing &gt; 0) {
                    $phpcsFile-&gt;fixer-&gt;addContent(($stackPtr - 1), $padding);
</codefragment>
  </duplication>
  <duplication lines="22" tokens="90">
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/Generic/Sniffs/WhiteSpace/LanguageConstructSpacingSniff.php" line="109"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Sniffs/WhiteSpace/LanguageConstructSpacingSniff.php" line="61"/>
    <codefragment>            return;
        }//end if

        if ($tokens[($stackPtr + 1)]['code'] === T_WHITESPACE) {
            $content = $tokens[($stackPtr + 1)]['content'];
            if ($content !== ' ') {
                $error = 'Language constructs must be followed by a single space; expected 1 space but found "%s"';
                $data  = [Util\Common::prepareForOutput($content)];
                $fix   = $phpcsFile-&gt;addFixableError($error, $stackPtr, 'IncorrectSingle', $data);
                if ($fix === true) {
                    $phpcsFile-&gt;fixer-&gt;replaceToken(($stackPtr + 1), ' ');
                }
            }
        } else if ($tokens[($stackPtr + 1)]['code'] !== T_OPEN_PARENTHESIS) {
            $error = 'Language constructs must be followed by a single space; expected "%s" but found "%s"';
            $data  = [
                $tokens[$stackPtr]['content'].' '.$tokens[($stackPtr + 1)]['content'],
                $tokens[$stackPtr]['content'].$tokens[($stackPtr + 1)]['content'],
            ];
            $fix   = $phpcsFile-&gt;addFixableError($error, $stackPtr, 'Incorrect', $data);
            if ($fix === true) {
                $phpcsFile-&gt;fixer-&gt;addContent($stackPtr, ' ');
</codefragment>
  </duplication>
  <duplication lines="25" tokens="75">
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Tests/Arrays/ArrayDeclarationUnitTest.php" line="59"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Tests/Arrays/ArrayDeclarationUnitTest.php" line="128"/>
    <codefragment>                77  =&gt; 1,
                78  =&gt; 7,
                79  =&gt; 2,
                81  =&gt; 2,
                82  =&gt; 4,
                87  =&gt; 1,
                88  =&gt; 1,
                92  =&gt; 1,
                97  =&gt; 1,
                100 =&gt; 1,
                101 =&gt; 1,
                102 =&gt; 1,
                105 =&gt; 1,
                106 =&gt; 1,
                107 =&gt; 1,
                125 =&gt; 1,
                126 =&gt; 1,
                141 =&gt; 1,
                144 =&gt; 1,
                146 =&gt; 1,
                148 =&gt; 1,
                151 =&gt; 1,
                157 =&gt; 1,
                174 =&gt; 3,
                179 =&gt; 1,
</codefragment>
  </duplication>
  <duplication lines="31" tokens="91">
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Tests/WhiteSpace/OperatorSpacingUnitTest.php" line="32"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Tests/WhiteSpace/OperatorSpacingUnitTest.php" line="100"/>
    <codefragment>            return [
                4   =&gt; 1,
                5   =&gt; 2,
                6   =&gt; 1,
                7   =&gt; 1,
                8   =&gt; 2,
                11  =&gt; 1,
                12  =&gt; 2,
                13  =&gt; 1,
                14  =&gt; 1,
                15  =&gt; 2,
                18  =&gt; 1,
                19  =&gt; 2,
                20  =&gt; 1,
                21  =&gt; 1,
                22  =&gt; 2,
                25  =&gt; 1,
                26  =&gt; 2,
                27  =&gt; 1,
                28  =&gt; 1,
                29  =&gt; 2,
                32  =&gt; 1,
                33  =&gt; 2,
                34  =&gt; 1,
                35  =&gt; 1,
                36  =&gt; 2,
                40  =&gt; 2,
                42  =&gt; 2,
                44  =&gt; 2,
                45  =&gt; 1,
                46  =&gt; 2,
</codefragment>
  </duplication>
  <duplication lines="32" tokens="88">
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Sniffs/Commenting/FunctionCommentSniff.php" line="38"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/PEAR/Sniffs/Commenting/FunctionCommentSniff.php" line="114"/>
    <codefragment>    protected function processReturn(File $phpcsFile, $stackPtr, $commentStart)
    {
        $tokens = $phpcsFile-&gt;getTokens();

        // Skip constructor and destructor.
        $methodName      = $phpcsFile-&gt;getDeclarationName($stackPtr);
        $isSpecialMethod = ($methodName === '__construct' || $methodName === '__destruct');

        $return = null;
        foreach ($tokens[$commentStart]['comment_tags'] as $tag) {
            if ($tokens[$tag]['content'] === '@return') {
                if ($return !== null) {
                    $error = 'Only 1 @return tag is allowed in a function comment';
                    $phpcsFile-&gt;addError($error, $tag, 'DuplicateReturn');
                    return;
                }

                $return = $tag;
            }
        }

        if ($isSpecialMethod === true) {
            return;
        }

        if ($return !== null) {
            $content = $tokens[($return + 2)]['content'];
            if (empty($content) === true || $tokens[($return + 2)]['code'] !== T_DOC_COMMENT_STRING) {
                $error = 'Return type missing for @return tag in function comment';
                $phpcsFile-&gt;addError($error, $return, 'MissingReturnType');
            } else {
                // Support both a return type and a description.
</codefragment>
  </duplication>
  <duplication lines="24" tokens="70">
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Sniffs/Commenting/FunctionCommentSniff.php" line="282"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/PEAR/Sniffs/Commenting/FunctionCommentSniff.php" line="218"/>
    <codefragment>            if ($tokens[($tag + 2)]['code'] === T_DOC_COMMENT_STRING) {
                $matches = [];
                preg_match('/([^$&amp;.]+)(?:((?:\.\.\.)?(?:\$|&amp;)[^\s]+)(?:(\s+)(.*))?)?/', $tokens[($tag + 2)]['content'], $matches);

                if (empty($matches) === false) {
                    $typeLen   = strlen($matches[1]);
                    $type      = trim($matches[1]);
                    $typeSpace = ($typeLen - strlen($type));
                    $typeLen   = strlen($type);
                    if ($typeLen &gt; $maxType) {
                        $maxType = $typeLen;
                    }
                }

                if (isset($matches[2]) === true) {
                    $var    = $matches[2];
                    $varLen = strlen($var);
                    if ($varLen &gt; $maxVar) {
                        $maxVar = $varLen;
                    }

                    if (isset($matches[4]) === true) {
                        $varSpace       = strlen($matches[3]);
                        $comment        = $matches[4];
</codefragment>
  </duplication>
  <duplication lines="24" tokens="82">
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/PEAR/Sniffs/Commenting/FunctionCommentSniff.php" line="318"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/PEAR/Sniffs/Commenting/FunctionCommentSniff.php" line="388"/>
    <codefragment>                    $wrapLength = ($tokens[$commentToken]['length'] - $param['type_space'] - $param['var_space'] - strlen($param['type']) - strlen($param['var']));

                    $star        = $phpcsFile-&gt;findPrevious(T_DOC_COMMENT_STAR, $param['tag']);
                    $spaceLength = (strlen($content) + $tokens[($commentToken - 1)]['length'] + $tokens[($commentToken - 2)]['length']);

                    $padding  = str_repeat(' ', ($tokens[$star]['column'] - 1));
                    $padding .= '* ';
                    $padding .= str_repeat(' ', $spaceLength);

                    $content .= wordwrap(
                        $param['comment'],
                        $wrapLength,
                        $phpcsFile-&gt;eolChar.$padding
                    );

                    $phpcsFile-&gt;fixer-&gt;replaceToken($commentToken, $content);
                    for ($i = ($commentToken + 1); $i &lt;= $param['comment_end']; $i++) {
                        $phpcsFile-&gt;fixer-&gt;replaceToken($i, '');
                    }
                }//end if
            }//end if

            // Make sure the param name is correct.
            if (isset($realParams[$pos]) === true) {
</codefragment>
  </duplication>
  <duplication lines="52" tokens="123">
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Sniffs/NamingConventions/ValidVariableNameSniff.php" line="10"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Standards/Zend/Sniffs/NamingConventions/ValidVariableNameSniff.php" line="10"/>
    <codefragment>namespace PHP_CodeSniffer\Standards\Squiz\Sniffs\NamingConventions;

use PHP_CodeSniffer\Sniffs\AbstractVariableSniff;
use PHP_CodeSniffer\Util\Common;
use PHP_CodeSniffer\Files\File;

class ValidVariableNameSniff extends AbstractVariableSniff
{


    /**
     * Processes this test, when one of its tokens is encountered.
     *
     * @param \PHP_CodeSniffer\Files\File $phpcsFile The file being scanned.
     * @param int                         $stackPtr  The position of the current token in the
     *                                               stack passed in $tokens.
     *
     * @return void
     */
    protected function processVariable(File $phpcsFile, $stackPtr)
    {
        $tokens  = $phpcsFile-&gt;getTokens();
        $varName = ltrim($tokens[$stackPtr]['content'], '$');

        // If it's a php reserved var, then its ok.
        if (isset($this-&gt;phpReservedVars[$varName]) === true) {
            return;
        }

        $objOperator = $phpcsFile-&gt;findNext([T_WHITESPACE], ($stackPtr + 1), null, true);
        if ($tokens[$objOperator]['code'] === T_OBJECT_OPERATOR) {
            // Check to see if we are using a variable from an object.
            $var = $phpcsFile-&gt;findNext([T_WHITESPACE], ($objOperator + 1), null, true);
            if ($tokens[$var]['code'] === T_STRING) {
                $bracket = $phpcsFile-&gt;findNext([T_WHITESPACE], ($var + 1), null, true);
                if ($tokens[$bracket]['code'] !== T_OPEN_PARENTHESIS) {
                    $objVarName = $tokens[$var]['content'];

                    // There is no way for us to know if the var is public or
                    // private, so we have to ignore a leading underscore if there is
                    // one and just check the main part of the variable name.
                    $originalVarName = $objVarName;
                    if (substr($objVarName, 0, 1) === '_') {
                        $objVarName = substr($objVarName, 1);
                    }

                    if (Common::isCamelCaps($objVarName, false, true, false) === false) {
                        $error = 'Variable "%s" is not in valid camel caps format';
                        $data  = [$originalVarName];
                        $phpcsFile-&gt;addError($error, $var, 'NotCamelCaps', $data);
                    }
                }//end if
</codefragment>
  </duplication>
  <duplication lines="20" tokens="95">
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Tokenizers/PHP.php" line="747"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Tokenizers/PHP.php" line="781"/>
    <codefragment>                &amp;&amp; isset($tokens[($stackPtr + 1)]) === true
                &amp;&amp; isset($tokens[($stackPtr + 2)]) === true
                &amp;&amp; $tokens[($stackPtr + 1)][0] === T_WHITESPACE
                &amp;&amp; $tokens[($stackPtr + 2)][0] === T_STRING
                &amp;&amp; strtolower($tokens[($stackPtr + 2)][1]) === 'from'
            ) {
                // Could be multi-line, so just just the token stack.
                $token[0] = T_YIELD_FROM;
                $token[1] = $token[1].$tokens[($stackPtr + 1)][1].$tokens[($stackPtr + 2)][1];

                if (PHP_CODESNIFFER_VERBOSITY &gt; 1) {
                    for ($i = ($stackPtr + 1); $i &lt;= ($stackPtr + 2); $i++) {
                        $type    = Util\Tokens::tokenName($tokens[$i][0]);
                        $content = Util\Common::prepareForOutput($tokens[$i][1]);
                        echo "\t\t* token $i merged into T_YIELD_FROM; was: $type =&gt; $content".PHP_EOL;
                    }
                }

                $tokens[($stackPtr + 1)] = null;
                $tokens[($stackPtr + 2)] = null;
</codefragment>
  </duplication>
  <duplication lines="28" tokens="119">
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Tokenizers/Tokenizer.php" line="1434"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Tokenizers/Tokenizer.php" line="1536"/>
    <codefragment>                            for ($x = $this-&gt;tokens[$i]['scope_condition']; $x &lt;= $i; $x++) {
                                $oldConditions = $this-&gt;tokens[$x]['conditions'];
                                $oldLevel      = $this-&gt;tokens[$x]['level'];
                                $this-&gt;tokens[$x]['level']--;
                                unset($this-&gt;tokens[$x]['conditions'][$badToken]);
                                if (PHP_CODESNIFFER_VERBOSITY &gt; 1) {
                                    $type     = $this-&gt;tokens[$x]['type'];
                                    $oldConds = '';
                                    foreach ($oldConditions as $condition) {
                                        $oldConds .= Util\Tokens::tokenName($condition).',';
                                    }

                                    $oldConds = rtrim($oldConds, ',');

                                    $newConds = '';
                                    foreach ($this-&gt;tokens[$x]['conditions'] as $condition) {
                                        $newConds .= Util\Tokens::tokenName($condition).',';
                                    }

                                    $newConds = rtrim($newConds, ',');

                                    $newLevel = $this-&gt;tokens[$x]['level'];
                                    echo str_repeat("\t", ($level + 1));
                                    echo "* cleaned $x:$type *".PHP_EOL;
                                    echo str_repeat("\t", ($level + 2));
                                    echo "=&gt; level changed from $oldLevel to $newLevel".PHP_EOL;
                                    echo str_repeat("\t", ($level + 2));
                                    echo "=&gt; conditions changed from $oldConds to $newConds".PHP_EOL;
</codefragment>
  </duplication>
  <duplication lines="33" tokens="77">
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Reports/Full.php" line="81"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/squizlabs/php_codesniffer/src/Reports/Code.php" line="162"/>
    <codefragment>        if ($width &lt; 70) {
            $width = 70;
        }

        echo PHP_EOL."\033[1mFILE: ";
        if ($fileLength &lt;= ($width - 6)) {
            echo $file;
        } else {
            echo '...'.substr($file, ($fileLength - ($width - 6)));
        }

        echo "\033[0m".PHP_EOL;
        echo str_repeat('-', $width).PHP_EOL;

        echo "\033[1m".'FOUND '.$report['errors'].' ERROR';
        if ($report['errors'] !== 1) {
            echo 'S';
        }

        if ($report['warnings'] &gt; 0) {
            echo ' AND '.$report['warnings'].' WARNING';
            if ($report['warnings'] !== 1) {
                echo 'S';
            }
        }

        echo ' AFFECTING '.count($report['messages']).' LINE';
        if (count($report['messages']) !== 1) {
            echo 'S';
        }

        echo "\033[0m".PHP_EOL;
        echo str_repeat('-', $width).PHP_EOL;
</codefragment>
  </duplication>
  <duplication lines="28" tokens="84">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/http-foundation/File/MimeType/MimeTypeExtensionGuesser.php" line="367"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/File.php" line="156"/>
    <codefragment>        'application/vnd.oasis.opendocument.chart' =&gt; 'odc',
        'application/vnd.oasis.opendocument.chart-template' =&gt; 'otc',
        'application/vnd.oasis.opendocument.database' =&gt; 'odb',
        'application/vnd.oasis.opendocument.formula' =&gt; 'odf',
        'application/vnd.oasis.opendocument.formula-template' =&gt; 'odft',
        'application/vnd.oasis.opendocument.graphics' =&gt; 'odg',
        'application/vnd.oasis.opendocument.graphics-template' =&gt; 'otg',
        'application/vnd.oasis.opendocument.image' =&gt; 'odi',
        'application/vnd.oasis.opendocument.image-template' =&gt; 'oti',
        'application/vnd.oasis.opendocument.presentation' =&gt; 'odp',
        'application/vnd.oasis.opendocument.presentation-template' =&gt; 'otp',
        'application/vnd.oasis.opendocument.spreadsheet' =&gt; 'ods',
        'application/vnd.oasis.opendocument.spreadsheet-template' =&gt; 'ots',
        'application/vnd.oasis.opendocument.text' =&gt; 'odt',
        'application/vnd.oasis.opendocument.text-master' =&gt; 'odm',
        'application/vnd.oasis.opendocument.text-template' =&gt; 'ott',
        'application/vnd.oasis.opendocument.text-web' =&gt; 'oth',
        'application/vnd.olpc-sugar' =&gt; 'xo',
        'application/vnd.oma.dd2+xml' =&gt; 'dd2',
        'application/vnd.openofficeorg.extension' =&gt; 'oxt',
        'application/vnd.openxmlformats-officedocument.presentationml.presentation' =&gt; 'pptx',
        'application/vnd.openxmlformats-officedocument.presentationml.slide' =&gt; 'sldx',
        'application/vnd.openxmlformats-officedocument.presentationml.slideshow' =&gt; 'ppsx',
        'application/vnd.openxmlformats-officedocument.presentationml.template' =&gt; 'potx',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' =&gt; 'xlsx',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.template' =&gt; 'xltx',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document' =&gt; 'docx',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.template' =&gt; 'dotx',
</codefragment>
  </duplication>
  <duplication lines="10" tokens="77">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/nl_BE/Address.php" line="72"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/nl_NL/Address.php" line="64"/>
    <codefragment>        'Bosnië-Herzegovina', 'Botswana', 'Bouvet Eiland (Bouvetoya)', 'Brazilië', 'Britse Maagdeneilanden',
        'Brunei Darussalam', 'Bulgarije', 'Burkina Faso', 'Burundi', 'Cambodja', 'Canada',
        'Centraal-Afrikaanse Republiek', 'Chili', 'China', 'Christmaseiland', 'Cocoseilanden', 'Colombia', 'Comoren',
        'Congo', 'Cookeilanden', 'Costa Rica', 'Cuba', 'Cyprus', 'Denemarken', 'Djibouti', 'Dominica',
        'Dominicaanse Republiek', 'Duitsland', 'Ecuador', 'Egypte', 'El salvador', 'Equatoriaal-Guinea', 'Eritrea',
        'Estland', 'Ethiopië', 'Faroe Eilanden', 'Falklandeilanden', 'Fiji', 'Finland', 'Frankrijk', 'Frans-Guyana',
        'Frans-Polynesië', 'Franse Zuidelijke en Antarctische Gebieden', 'Gabon', 'Gambia', 'Georgië', 'Ghana',
        'Gibraltar', 'Griekenland', 'Groenland', 'Grenada', 'Guadeloupe', 'Guam', 'Guatemala', 'Guernsey', 'Guinee',
        'Guinee-Bissau', 'Guyana', 'Haïti', 'Heard en McDonaldeilanden', 'Honduras', 'Hong Kong', 'Hongarije',
        'IJsland', 'India', 'Indonesië', 'Iran', 'Irak', 'Ierland', 'Man', 'Israel', 'Ivoorkust', 'Italië', 'Jamaica',
</codefragment>
  </duplication>
  <duplication lines="8" tokens="73">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/nl_BE/Address.php" line="83"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/nl_NL/Address.php" line="73"/>
    <codefragment>        'Kleinere afgelegen eilanden van de Verenigde staten', 'Kiribati', 'Korea', 'Koeweit', 'Kirgizië', 'Kameroen',
        'Kaapverdië', 'Kaaimaneilanden', 'Kroatië', 'Laos', 'Letland', 'Libanon', 'Lesotho', 'Liberia', 'Libië',
        'Liechtenstein', 'Litouwen', 'Luxemburg', 'Macau', 'Macedonië', 'Madagascar', 'Malawi', 'Maleisië', 'Maldiven',
        'Mali', 'Malta', 'Marshalleilanden', 'Martinique', 'Mauritus', 'Mauritania', 'Mayotte', 'Mexico', 'Micronesië',
        'Moldavië', 'Monaco', 'Mongolië', 'Montenegro', 'Monsterrat', 'Marokko', 'Mozambique', 'Myanmar', 'Namibië',
        'Nauru', 'Nepal', 'Nederlandse Antillen', 'Nederland', 'Nieuw-Caledonië', 'Nieuw-Zeeland', 'Nicaragua',
        'Niger', 'Nigeria', 'Niue', 'Norfolk', 'Noordelijke Marianen', 'Noorwegen', 'Oman', 'Oostenrijk', 'Oeganda',
        'Oekraïne', 'Oezbakistan', 'Pakistan', 'Palau', 'Palestina', 'Panama', 'Papoea-Nieuw-Guinea', 'Paraguay',
</codefragment>
  </duplication>
  <duplication lines="25" tokens="197">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/en_IN/Address.php" line="66"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/ne_NP/Address.php" line="68"/>
    <codefragment>        'Cambodia', 'Cameroon', 'Canada', 'Cape Verde', 'Cayman Islands', 'Central African Republic', 'Chad', 'Chile', 'China', 'Christmas Island', 'Cocos (Keeling) Islands', 'Colombia', 'Comoros', 'Congo', 'Congo', 'Cook Islands', 'Costa Rica', 'Cote d\'Ivoire', 'Croatia', 'Cuba', 'Cyprus', 'Czech Republic',
        'Denmark', 'Djibouti', 'Dominica', 'Dominican Republic',
        'Ecuador', 'Egypt', 'El Salvador', 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia',
        'Faroe Islands', 'Falkland Islands (Malvinas)', 'Fiji', 'Finland', 'France', 'French Guiana', 'French Polynesia', 'French Southern Territories',
        'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Gibraltar', 'Greece', 'Greenland', 'Grenada', 'Guadeloupe', 'Guam', 'Guatemala', 'Guernsey', 'Guinea', 'Guinea-Bissau', 'Guyana',
        'Haiti', 'Heard Island and McDonald Islands', 'Holy See (Vatican City State)', 'Honduras', 'Hong Kong', 'Hungary',
        'Iceland', 'India', 'Indonesia', 'Iran', 'Iraq', 'Ireland', 'Isle of Man', 'Israel', 'Italy',
        'Jamaica', 'Japan', 'Jersey', 'Jordan',
        'Kazakhstan', 'Kenya', 'Kiribati', 'Korea', 'Korea', 'Kuwait', 'Kyrgyz Republic',
        'Lao People\'s Democratic Republic', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia', 'Libyan Arab Jamahiriya', 'Liechtenstein', 'Lithuania', 'Luxembourg',
        'Macao', 'Macedonia', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives', 'Mali', 'Malta', 'Marshall Islands', 'Martinique', 'Mauritania', 'Mauritius', 'Mayotte', 'Mexico', 'Micronesia', 'Moldova', 'Monaco', 'Mongolia', 'Montenegro', 'Montserrat', 'Morocco', 'Mozambique', 'Myanmar',
        'Namibia', 'Nauru', 'Nepal', 'Netherlands Antilles', 'Netherlands', 'New Caledonia', 'New Zealand', 'Nicaragua', 'Niger', 'Nigeria', 'Niue', 'Norfolk Island', 'Northern Mariana Islands', 'Norway',
        'Oman',
        'Pakistan', 'Palau', 'Palestinian Territories', 'Panama', 'Papua New Guinea', 'Paraguay', 'Peru', 'Philippines', 'Pitcairn Islands', 'Poland', 'Portugal', 'Puerto Rico',
        'Qatar',
        'Reunion', 'Romania', 'Russian Federation', 'Rwanda',
        'Saint Barthelemy', 'Saint Helena', 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Martin', 'Saint Pierre and Miquelon', 'Saint Vincent and the Grenadines', 'Samoa', 'San Marino', 'Sao Tome and Principe', 'Saudi Arabia', 'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia (Slovak Republic)', 'Slovenia', 'Solomon Islands', 'Somalia', 'South Africa', 'South Georgia and the South Sandwich Islands', 'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Svalbard &amp; Jan Mayen Islands', 'Swaziland', 'Sweden', 'Switzerland', 'Syrian Arab Republic',
        'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand', 'Timor-Leste', 'Togo', 'Tokelau', 'Tonga', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Turkmenistan', 'Turks and Caicos Islands', 'Tuvalu',
        'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom', 'United States of America', 'United States Minor Outlying Islands', 'United States Virgin Islands', 'Uruguay', 'Uzbekistan',
        'Vanuatu', 'Venezuela', 'Vietnam',
        'Wallis and Futuna', 'Western Sahara',
        'Yemen',
        'Zambia', 'Zimbabwe'
    );
    protected static $localityName = array(
</codefragment>
  </duplication>
  <duplication lines="25" tokens="490">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/es_ES/Company.php" line="20"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/es_AR/Company.php" line="15"/>
    <codefragment>    protected static $catchPhraseWords = array(
        array(
            'Adaptive', 'Advanced', 'Ameliorated', 'Assimilated', 'Automated', 'Balanced', 'Business-focused', 'Centralized', 'Cloned', 'Compatible', 'Configurable', 'Cross-group', 'Cross-platform', 'Customer-focused', 'Customizable', 'Decentralized', 'De-engineered', 'Devolved', 'Digitized', 'Distributed', 'Diverse', 'Down-sized', 'Enhanced', 'Enterprise-wide', 'Ergonomic', 'Exclusive', 'Expanded', 'Extended', 'Facetoface', 'Focused', 'Front-line', 'Fully-configurable', 'Function-based', 'Fundamental', 'Future-proofed', 'Grass-roots', 'Horizontal', 'Implemented', 'Innovative', 'Integrated', 'Intuitive', 'Inverse', 'Managed', 'Mandatory', 'Monitored', 'Multi-channelled', 'Multi-lateral', 'Multi-layered', 'Multi-tiered', 'Networked', 'Object-based', 'Open-architected', 'Open-source', 'Operative', 'Optimized', 'Optional', 'Organic', 'Organized', 'Persevering', 'Persistent', 'Phased', 'Polarised', 'Pre-emptive', 'Proactive', 'Profit-focused', 'Profound', 'Programmable', 'Progressive', 'Public-key', 'Quality-focused', 'Reactive', 'Realigned', 'Re-contextualized', 'Re-engineered', 'Reduced', 'Reverse-engineered', 'Right-sized', 'Robust', 'Seamless', 'Secured', 'Self-enabling', 'Sharable', 'Stand-alone', 'Streamlined', 'Switchable', 'Synchronised', 'Synergistic', 'Synergized', 'Team-oriented', 'Total', 'Triple-buffered', 'Universal', 'Up-sized', 'Upgradable', 'User-centric', 'User-friendly', 'Versatile', 'Virtual', 'Visionary', 'Vision-oriented'
        ),
        array(
            '24hour', '24/7', '3rdgeneration', '4thgeneration', '5thgeneration', '6thgeneration', 'actuating', 'analyzing', 'assymetric', 'asynchronous', 'attitude-oriented', 'background', 'bandwidth-monitored', 'bi-directional', 'bifurcated', 'bottom-line', 'clear-thinking', 'client-driven', 'client-server', 'coherent', 'cohesive', 'composite', 'context-sensitive', 'contextually-based', 'content-based', 'dedicated', 'demand-driven', 'didactic', 'directional', 'discrete', 'disintermediate', 'dynamic', 'eco-centric', 'empowering', 'encompassing', 'even-keeled', 'executive', 'explicit', 'exuding', 'fault-tolerant', 'foreground', 'fresh-thinking', 'full-range', 'global', 'grid-enabled', 'heuristic', 'high-level', 'holistic', 'homogeneous', 'human-resource', 'hybrid', 'impactful', 'incremental', 'intangible', 'interactive', 'intermediate', 'leadingedge', 'local', 'logistical', 'maximized', 'methodical', 'mission-critical', 'mobile', 'modular', 'motivating', 'multimedia', 'multi-state', 'multi-tasking', 'national', 'needs-based', 'neutral', 'nextgeneration', 'non-volatile', 'object-oriented', 'optimal', 'optimizing', 'radical', 'real-time', 'reciprocal', 'regional', 'responsive', 'scalable', 'secondary', 'solution-oriented', 'stable', 'static', 'systematic', 'systemic', 'system-worthy', 'tangible', 'tertiary', 'transitional', 'uniform', 'upward-trending', 'user-facing', 'value-added', 'web-enabled', 'well-modulated', 'zeroadministration', 'zerodefect', 'zerotolerance'
        ),
        array(
            'ability', 'access', 'adapter', 'algorithm', 'alliance', 'analyzer', 'application', 'approach', 'architecture', 'archive', 'artificialintelligence', 'array', 'attitude', 'benchmark', 'budgetarymanagement', 'capability', 'capacity', 'challenge', 'circuit', 'collaboration', 'complexity', 'concept', 'conglomeration', 'contingency', 'core', 'customerloyalty', 'database', 'data-warehouse', 'definition', 'emulation', 'encoding', 'encryption', 'extranet', 'firmware', 'flexibility', 'focusgroup', 'forecast', 'frame', 'framework', 'function', 'functionalities', 'GraphicInterface', 'groupware', 'GraphicalUserInterface', 'hardware', 'help-desk', 'hierarchy', 'hub', 'implementation', 'info-mediaries', 'infrastructure', 'initiative', 'installation', 'instructionset', 'interface', 'internetsolution', 'intranet', 'knowledgeuser', 'knowledgebase', 'localareanetwork', 'leverage', 'matrices', 'matrix', 'methodology', 'middleware', 'migration', 'model', 'moderator', 'monitoring', 'moratorium', 'neural-net', 'openarchitecture', 'opensystem', 'orchestration', 'paradigm', 'parallelism', 'policy', 'portal', 'pricingstructure', 'processimprovement', 'product', 'productivity', 'project', 'projection', 'protocol', 'securedline', 'service-desk', 'software', 'solution', 'standardization', 'strategy', 'structure', 'success', 'superstructure', 'support', 'synergy', 'systemengine', 'task-force', 'throughput', 'time-frame', 'toolset', 'utilisation', 'website', 'workforce'
        )
    );

    protected static $bsWords = array(
        array(
            'implement', 'utilize', 'integrate', 'streamline', 'optimize', 'evolve', 'transform', 'embrace', 'enable', 'orchestrate', 'leverage', 'reinvent', 'aggregate', 'architect', 'enhance', 'incentivize', 'morph', 'empower', 'envisioneer', 'monetize', 'harness', 'facilitate', 'seize', 'disintermediate', 'synergize', 'strategize', 'deploy', 'brand', 'grow', 'target', 'syndicate', 'synthesize', 'deliver', 'mesh', 'incubate', 'engage', 'maximize', 'benchmark', 'expedite', 'reintermediate', 'whiteboard', 'visualize', 'repurpose', 'innovate', 'scale', 'unleash', 'drive', 'extend', 'engineer', 'revolutionize', 'generate', 'exploit', 'transition', 'e-enable', 'iterate', 'cultivate', 'matrix', 'productize', 'redefine', 'recontextualize'
        ),
        array(
            'clicks-and-mortar', 'value-added', 'vertical', 'proactive', 'robust', 'revolutionary', 'scalable', 'leading-edge', 'innovative', 'intuitive', 'strategic', 'e-business', 'mission-critical', 'sticky', 'one-to-one', '24/7', 'end-to-end', 'global', 'B2B', 'B2C', 'granular', 'frictionless', 'virtual', 'viral', 'dynamic', '24/365', 'best-of-breed', 'killer', 'magnetic', 'bleeding-edge', 'web-enabled', 'interactive', 'dot-com', 'sexy', 'back-end', 'real-time', 'efficient', 'front-end', 'distributed', 'seamless', 'extensible', 'turn-key', 'world-class', 'open-source', 'cross-platform', 'cross-media', 'synergistic', 'bricks-and-clicks', 'out-of-the-box', 'enterprise', 'integrated', 'impactful', 'wireless', 'transparent', 'next-generation', 'cutting-edge', 'user-centric', 'visionary', 'customized', 'ubiquitous', 'plug-and-play', 'collaborative', 'compelling', 'holistic', 'rich'
        ),
        array(
            'synergies', 'web-readiness', 'paradigms', 'markets', 'partnerships', 'infrastructures', 'platforms', 'initiatives', 'channels', 'eyeballs', 'communities', 'ROI', 'solutions', 'e-tailers', 'e-services', 'action-items', 'portals', 'niches', 'technologies', 'content', 'vortals', 'supply-chains', 'convergence', 'relationships', 'architectures', 'interfaces', 'e-markets', 'e-commerce', 'systems', 'bandwidth', 'infomediaries', 'models', 'mindshare', 'deliverables', 'users', 'schemas', 'networks', 'applications', 'metrics', 'e-business', 'functionalities', 'experiences', 'webservices', 'methodologies'
        )
    );

    protected static $companyPrefix = array('Asociación', 'Centro', 'Corporación', 'Empresa', 'Gestora', 'Global', 'Grupo', 'Viajes', 'Air');
</codefragment>
  </duplication>
  <duplication lines="29" tokens="253">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/en_IN/Address.php" line="63"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/en_GB/Address.php" line="63"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/lv_LV/Address.php" line="16"/>
    <codefragment>    protected static $country = array(
        'Afghanistan', 'Albania', 'Algeria', 'American Samoa', 'Andorra', 'Angola', 'Anguilla', 'Antarctica (the territory South of 60 deg S)', 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Aruba', 'Australia', 'Austria', 'Azerbaijan',
        'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivia', 'Bosnia and Herzegovina', 'Botswana', 'Bouvet Island (Bouvetoya)', 'Brazil', 'British Indian Ocean Territory (Chagos Archipelago)', 'British Virgin Islands', 'Brunei Darussalam', 'Bulgaria', 'Burkina Faso', 'Burundi',
        'Cambodia', 'Cameroon', 'Canada', 'Cape Verde', 'Cayman Islands', 'Central African Republic', 'Chad', 'Chile', 'China', 'Christmas Island', 'Cocos (Keeling) Islands', 'Colombia', 'Comoros', 'Congo', 'Congo', 'Cook Islands', 'Costa Rica', 'Cote d\'Ivoire', 'Croatia', 'Cuba', 'Cyprus', 'Czech Republic',
        'Denmark', 'Djibouti', 'Dominica', 'Dominican Republic',
        'Ecuador', 'Egypt', 'El Salvador', 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia',
        'Faroe Islands', 'Falkland Islands (Malvinas)', 'Fiji', 'Finland', 'France', 'French Guiana', 'French Polynesia', 'French Southern Territories',
        'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Gibraltar', 'Greece', 'Greenland', 'Grenada', 'Guadeloupe', 'Guam', 'Guatemala', 'Guernsey', 'Guinea', 'Guinea-Bissau', 'Guyana',
        'Haiti', 'Heard Island and McDonald Islands', 'Holy See (Vatican City State)', 'Honduras', 'Hong Kong', 'Hungary',
        'Iceland', 'India', 'Indonesia', 'Iran', 'Iraq', 'Ireland', 'Isle of Man', 'Israel', 'Italy',
        'Jamaica', 'Japan', 'Jersey', 'Jordan',
        'Kazakhstan', 'Kenya', 'Kiribati', 'Korea', 'Korea', 'Kuwait', 'Kyrgyz Republic',
        'Lao People\'s Democratic Republic', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia', 'Libyan Arab Jamahiriya', 'Liechtenstein', 'Lithuania', 'Luxembourg',
        'Macao', 'Macedonia', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives', 'Mali', 'Malta', 'Marshall Islands', 'Martinique', 'Mauritania', 'Mauritius', 'Mayotte', 'Mexico', 'Micronesia', 'Moldova', 'Monaco', 'Mongolia', 'Montenegro', 'Montserrat', 'Morocco', 'Mozambique', 'Myanmar',
        'Namibia', 'Nauru', 'Nepal', 'Netherlands Antilles', 'Netherlands', 'New Caledonia', 'New Zealand', 'Nicaragua', 'Niger', 'Nigeria', 'Niue', 'Norfolk Island', 'Northern Mariana Islands', 'Norway',
        'Oman',
        'Pakistan', 'Palau', 'Palestinian Territories', 'Panama', 'Papua New Guinea', 'Paraguay', 'Peru', 'Philippines', 'Pitcairn Islands', 'Poland', 'Portugal', 'Puerto Rico',
        'Qatar',
        'Reunion', 'Romania', 'Russian Federation', 'Rwanda',
        'Saint Barthelemy', 'Saint Helena', 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Martin', 'Saint Pierre and Miquelon', 'Saint Vincent and the Grenadines', 'Samoa', 'San Marino', 'Sao Tome and Principe', 'Saudi Arabia', 'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia (Slovak Republic)', 'Slovenia', 'Solomon Islands', 'Somalia', 'South Africa', 'South Georgia and the South Sandwich Islands', 'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Svalbard &amp; Jan Mayen Islands', 'Swaziland', 'Sweden', 'Switzerland', 'Syrian Arab Republic',
        'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand', 'Timor-Leste', 'Togo', 'Tokelau', 'Tonga', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Turkmenistan', 'Turks and Caicos Islands', 'Tuvalu',
        'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom', 'United States of America', 'United States Minor Outlying Islands', 'United States Virgin Islands', 'Uruguay', 'Uzbekistan',
        'Vanuatu', 'Venezuela', 'Vietnam',
        'Wallis and Futuna', 'Western Sahara',
        'Yemen',
        'Zambia', 'Zimbabwe'
    );
    protected static $localityName = array(
        'Aundh','Andheri',
</codefragment>
  </duplication>
  <duplication lines="9" tokens="85">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/es_ES/Person.php" line="57"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/es_VE/Person.php" line="71"/>
    <codefragment>        'Abad', 'Abeyta', 'Abrego', 'Abreu', 'Acevedo', 'Acosta', 'Acuña', 'Adame', 'Adorno', 'Agosto', 'Aguado', 'Aguayo', 'Aguilar', 'Aguilera', 'Aguirre', 'Alanis', 'Alaniz', 'Alarcón', 'Alba', 'Alcala', 'Alcaráz', 'Alcántar', 'Alejandro', 'Alemán', 'Alfaro', 'Alfonso', 'Alicea', 'Almanza', 'Almaráz', 'Almonte', 'Alonso', 'Alonzo', 'Altamirano', 'Alva', 'Alvarado', 'Amador', 'Amaya', 'Anaya', 'Andreu', 'Andrés', 'Anguiano', 'Angulo', 'Antón', 'Aparicio', 'Apodaca', 'Aponte', 'Aragón', 'Aranda', 'Araña', 'Arce', 'Archuleta', 'Arellano', 'Arenas', 'Arevalo', 'Arguello', 'Arias', 'Armas', 'Armendáriz', 'Armenta', 'Armijo', 'Arredondo', 'Arreola', 'Arriaga', 'Arribas', 'Arroyo', 'Arteaga', 'Asensio', 'Atencio', 'Avilés', 'Ayala', 'Baca', 'Badillo', 'Baeza', 'Bahena', 'Balderas', 'Ballesteros', 'Banda', 'Barajas', 'Barela', 'Barragán', 'Barraza', 'Barrera', 'Barreto', 'Barrientos', 'Barrios', 'Barroso', 'Batista', 'Bautista', 'Bañuelos', 'Becerra', 'Beltrán', 'Benavides', 'Benavídez', 'Benito', 'Benítez', 'Bermejo', 'Bermúdez', 'Bernal', 'Berríos', 'Blanco', 'Blasco', 'Blázquez', 'Bonilla', 'Borrego', 'Botello', 'Bravo', 'Briones', 'Briseño', 'Brito', 'Bueno', 'Burgos', 'Bustamante', 'Bustos', 'Báez', 'Betancourt', 'Caballero', 'Cabello', 'Cabrera', 'Cabán', 'Cadena', 'Caldera', 'Calderón', 'Calero', 'Calvillo', 'Calvo', 'Camacho', 'Camarillo', 'Campos', 'Canales', 'Candelaria', 'Cano', 'Cantú', 'Caraballo', 'Carbajal', 'Carballo', 'Carbonell', 'Cárdenas', 'Cardona', 'Carmona', 'Caro', 'Carranza', 'Carrasco', 'Carrasquillo', 'Carrera', 'Carrero', 'Carretero', 'Carreón', 'Carrillo', 'Carrión', 'Carvajal', 'Casado', 'Casanova', 'Casares', 'Casas', 'Casillas', 'Castañeda', 'Castaño', 'Castellano', 'Castellanos', 'Castillo', 'Castro', 'Casárez', 'Cavazos', 'Cazares', 'Ceballos', 'Cedillo', 'Ceja', 'Centeno', 'Cepeda', 'Cerda', 'Cervantes', 'Cervántez', 'Chacón', 'Chapa', 'Chavarría', 'Chávez', 'Cintrón', 'Cisneros', 'Clemente', 'Cobo', 'Collado', 'Collazo', 'Colunga', 'Colón', 'Concepción', 'Conde', 'Contreras', 'Cordero', 'Cornejo', 'Corona', 'Coronado', 'Corral', 'Corrales', 'Correa', 'Cortés', 'Cortez', 'Cortés', 'Costa', 'Cotto', 'Covarrubias', 'Crespo', 'Cruz', 'Cuellar', 'Cuenca', 'Cuesta', 'Cuevas', 'Curiel', 'Córdoba', 'Córdova', 'De la Cruz', 'De la Fuente', 'De la Torre', 'Del Río', 'Delacrúz', 'Delafuente', 'Delagarza', 'Delao', 'Delapaz', 'Delarosa', 'Delatorre', 'Deleón', 'Delgadillo', 'Delgado', 'Delrío', 'Delvalle', 'Díez', 'Domenech', 'Domingo', 'Domínguez', 'Domínquez', 'Duarte', 'Dueñas', 'Duran', 'Dávila', 'Díaz', 'Echevarría', 'Elizondo', 'Enríquez', 'Escalante', 'Escamilla', 'Escobar', 'Escobedo', 'Escribano', 'Escudero', 'Esparza', 'Espinal', 'Espino', 'Espinosa', 'Espinoza', 'Esquibel', 'Esquivel', 'Esteban', 'Esteve', 'Estrada', 'Estévez', 'Expósito', 'Fajardo', 'Farías', 'Feliciano', 'Fernández', 'Ferrer', 'Fierro', 'Figueroa', 'Flores', 'Flórez', 'Fonseca', 'Font', 'Franco', 'Frías', 'Fuentes', 'Gaitán', 'Galarza', 'Galindo', 'Gallardo', 'Gallego', 'Gallegos', 'Galván', 'Galán', 'Gamboa', 'Gámez', 'Gaona', 'Garay', 'García', 'Garibay', 'Garica', 'Garrido', 'Garza', 'Gastélum', 'Gaytán', 'Gil', 'Gimeno', 'Giménez', 'Girón', 'Godoy', 'Godínez', 'Gonzáles', 'González', 'Gracia', 'Granado', 'Granados', 'Griego', 'Grijalva', 'Guajardo', 'Guardado', 'Guerra', 'Guerrero', 'Guevara', 'Guillen', 'Gurule', 'Gutiérrez', 'Guzmán', 'Gálvez', 'Gómez', 'Haro', 'Henríquez', 'Heredia', 'Hernándes', 'Hernando', 'Hernádez', 'Hernández', 'Herrera', 'Herrero', 'Hidalgo', 'Hinojosa', 'Holguín', 'Huerta', 'Hurtado', 'Ibarra', 'Ibáñez', 'Iglesias', 'Irizarry', 'Izquierdo', 'Jaime', 'Jaimes', 'Jaramillo', 'Jasso', 'Jiménez', 'Jimínez', 'Juan', 'Jurado', 'Juárez', 'Jáquez', 'Laboy', 'Lara', 'Laureano', 'Leal', 'Lebrón', 'Ledesma', 'Leiva', 'Lemus', 'Lerma', 'Leyva', 'León', 'Limón', 'Linares', 'Lira', 'Llamas', 'Llorente', 'Loera', 'Lomeli', 'Longoria', 'Lorente', 'Lorenzo', 'Lovato', 'Loya', 'Lozada', 'Lozano', 'Lucas', 'Lucero', 'Lucio', 'Luevano', 'Lugo', 'Luis', 'Luján', 'Luna', 'Luque', 'Lázaro', 'López', 'Macias', 'Macías', 'Madera', 'Madrid', 'Madrigal', 'Maestas', 'Magaña', 'Malave', 'Maldonado', 'Manzanares', 'Manzano', 'Marco', 'Marcos', 'Mares', 'Marrero', 'Marroquín', 'Martos', 'Martí', 'Martín', 'Martínez', 'Marín', 'Más', 'Mascareñas', 'Mata', 'Mateo', 'Mateos', 'Matos', 'Matías', 'Maya', 'Mayorga', 'Medina', 'Medrano', 'Mejía', 'Melgar', 'Meléndez', 'Mena', 'Menchaca', 'Mendoza', 'Menéndez', 'Meraz', 'Mercado', 'Merino', 'Mesa', 'Meza', 'Miguel', 'Millán', 'Miramontes', 'Miranda', 'Mireles', 'Mojica', 'Molina', 'Mondragón', 'Monroy', 'Montalvo', 'Montañez', 'Montaño', 'Montemayor', 'Montenegro', 'Montero', 'Montes', 'Montez', 'Montoya', 'Mora', 'Moral', 'Morales', 'Morán', 'Moreno', 'Mota', 'Moya', 'Munguía', 'Murillo', 'Muro', 'Muñiz', 'Muñoz', 'Márquez', 'Méndez', 'Naranjo', 'Narváez', 'Nava', 'Navarrete', 'Navarro', 'Navas', 'Nazario', 'Negrete', 'Negrón', 'Nevárez', 'Nieto', 'Nieves', 'Niño', 'Noriega', 'Nájera', 'Núñez', 'Ocampo', 'Ocasio', 'Ochoa', 'Ojeda', 'Oliva', 'Olivares', 'Olivas', 'Oliver', 'Olivera', 'Olivo', 'Olivárez', 'Olmos', 'Olvera', 'Ontiveros', 'Oquendo', 'Ordoñez', 'Ordóñez', 'Orellana', 'Ornelas', 'Orosco', 'Orozco', 'Orta', 'Ortega', 'Ortíz', 'Osorio', 'Otero', 'Ozuna', 'Pabón', 'Pacheco', 'Padilla', 'Padrón', 'Pagan', 'Palacios', 'Palomino', 'Palomo', 'Pantoja', 'Pardo', 'Paredes', 'Parra', 'Partida', 'Pascual', 'Pastor', 'Patiño', 'Paz', 'Pedraza', 'Pedroza', 'Pelayo', 'Peláez', 'Perales', 'Peralta', 'Perea', 'Pereira', 'Peres', 'Peña', 'Pichardo', 'Pineda', 'Pizarro', 'Piña', 'Piñeiro', 'Plaza', 'Polanco', 'Polo', 'Ponce', 'Pons', 'Porras', 'Portillo', 'Posada', 'Pozo', 'Prado', 'Preciado', 'Prieto', 'Puente', 'Puga', 'Puig', 'Pulido', 'Páez', 'Pérez', 'Quesada', 'Quezada', 'Quintana', 'Quintanilla', 'Quintero', 'Quiroz', 'Quiñones', 'Quiñónez', 'Rael', 'Ramos', 'Ramírez', 'Ramón', 'Rangel', 'Rascón', 'Raya', 'Razo', 'Redondo', 'Regalado', 'Reina', 'Rendón', 'Rentería', 'Requena', 'Reséndez', 'Rey', 'Reyes', 'Reyna', 'Reynoso', 'Rico', 'Riera', 'Rincón', 'Riojas', 'Rivas', 'Rivera', 'Rivero', 'Robledo', 'Robles', 'Roca', 'Rocha', 'Rodarte', 'Rodrigo', 'Rodríguez', 'Rodríquez', 'Roig', 'Rojas', 'Rojo', 'Roldán', 'Rolón', 'Romero', 'Romo', 'Román', 'Roque', 'Ros', 'Rosa', 'Rosado', 'Rosales', 'Rosario', 'Rosas', 'Roybal', 'Rubio', 'Rueda', 'Ruelas', 'Ruiz', 'Ruvalcaba', 'Ruíz', 'Ríos', 'Saavedra', 'Saiz', 'Salas', 'Salazar', 'Salcedo', 'Salcido', 'Saldaña', 'Saldivar', 'Salgado', 'Salinas', 'Salvador', 'Samaniego', 'Sanabria', 'Sánchez', 'Sancho', 'Sandoval', 'Santacruz', 'Santamaría', 'Santana', 'Santiago', 'Santillán', 'Santos', 'Sanz', 'Sarabia', 'Sauceda', 'Saucedo', 'Sedillo', 'Segovia', 'Segura', 'Sepúlveda', 'Serna', 'Serra', 'Serrano', 'Serrato', 'Sevilla', 'Sierra', 'Silva', 'Simón', 'Sisneros', 'Sola', 'Solano', 'Soler', 'Soliz', 'Solorio', 'Solorzano', 'Solís', 'Soria', 'Soriano', 'Sosa', 'Sotelo', 'Soto', 'Suárez', 'Sáenz', 'Sáez', 'Sánchez', 'Tafoya', 'Tamayo', 'Tamez', 'Tapia', 'Tejada', 'Tejeda', 'Tello', 'Terrazas', 'Terán', 'Tijerina', 'Tirado', 'Toledo', 'Toro', 'Torres', 'Tovar', 'Trejo', 'Treviño', 'Trujillo', 'Téllez', 'Tórrez', 'Ulibarri', 'Ulloa', 'Urbina', 'Ureña', 'Uribe', 'Urrutia', 'Urías', 'Vaca', 'Valadez', 'Valdez', 'Valdivia', 'Valdés', 'Valencia', 'Valentín', 'Valenzuela', 'Valero', 'Valladares', 'Valle', 'Vallejo', 'Valles', 'Valverde', 'Vanegas', 'Varela', 'Vargas', 'Vega', 'Vela', 'Velasco', 'Velásquez', 'Velázquez', 'Venegas', 'Vera', 'Verdugo', 'Verduzco', 'Vergara', 'Vicente', 'Vidal', 'Viera', 'Vigil', 'Vila', 'Villa', 'Villagómez', 'Villalba', 'Villalobos', 'Villalpando', 'Villanueva', 'Villar', 'Villareal', 'Villarreal', 'Villaseñor', 'Villegas', 'Vásquez', 'Vázquez', 'Vélez', 'Véliz', 'Ybarra', 'Yáñez', 'Zambrano', 'Zamora', 'Zamudio', 'Zapata', 'Zaragoza', 'Zarate', 'Zavala', 'Zayas', 'Zelaya', 'Zepeda', 'Zúñiga', 'de Anda', 'de Jesús', 'Águilar', 'Álvarez', 'Ávalos', 'Ávila'
    );

    protected static $titleMale = array('Sr.', 'Dn.', 'Dr.', 'Lic.', 'Ing.');

    protected static $titleFemale = array('Sra.', 'Srita.', 'Dr.', 'Lic.', 'Ing.');

    private static $suffix = array('Hijo', 'Segundo', 'Tercero');

</codefragment>
  </duplication>
  <duplication lines="8" tokens="82">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/es_ES/Person.php" line="57"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/es_VE/Person.php" line="97"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/es_VE/Person.php" line="112"/>
    <codefragment>        'Abad', 'Abeyta', 'Abrego', 'Abreu', 'Acevedo', 'Acosta', 'Acuña', 'Adame', 'Adorno', 'Agosto', 'Aguado', 'Aguayo', 'Aguilar', 'Aguilera', 'Aguirre', 'Alanis', 'Alaniz', 'Alarcón', 'Alba', 'Alcala', 'Alcaráz', 'Alcántar', 'Alejandro', 'Alemán', 'Alfaro', 'Alfonso', 'Alicea', 'Almanza', 'Almaráz', 'Almonte', 'Alonso', 'Alonzo', 'Altamirano', 'Alva', 'Alvarado', 'Amador', 'Amaya', 'Anaya', 'Andreu', 'Andrés', 'Anguiano', 'Angulo', 'Antón', 'Aparicio', 'Apodaca', 'Aponte', 'Aragón', 'Aranda', 'Araña', 'Arce', 'Archuleta', 'Arellano', 'Arenas', 'Arevalo', 'Arguello', 'Arias', 'Armas', 'Armendáriz', 'Armenta', 'Armijo', 'Arredondo', 'Arreola', 'Arriaga', 'Arribas', 'Arroyo', 'Arteaga', 'Asensio', 'Atencio', 'Avilés', 'Ayala', 'Baca', 'Badillo', 'Baeza', 'Bahena', 'Balderas', 'Ballesteros', 'Banda', 'Barajas', 'Barela', 'Barragán', 'Barraza', 'Barrera', 'Barreto', 'Barrientos', 'Barrios', 'Barroso', 'Batista', 'Bautista', 'Bañuelos', 'Becerra', 'Beltrán', 'Benavides', 'Benavídez', 'Benito', 'Benítez', 'Bermejo', 'Bermúdez', 'Bernal', 'Berríos', 'Blanco', 'Blasco', 'Blázquez', 'Bonilla', 'Borrego', 'Botello', 'Bravo', 'Briones', 'Briseño', 'Brito', 'Bueno', 'Burgos', 'Bustamante', 'Bustos', 'Báez', 'Betancourt', 'Caballero', 'Cabello', 'Cabrera', 'Cabán', 'Cadena', 'Caldera', 'Calderón', 'Calero', 'Calvillo', 'Calvo', 'Camacho', 'Camarillo', 'Campos', 'Canales', 'Candelaria', 'Cano', 'Cantú', 'Caraballo', 'Carbajal', 'Carballo', 'Carbonell', 'Cárdenas', 'Cardona', 'Carmona', 'Caro', 'Carranza', 'Carrasco', 'Carrasquillo', 'Carrera', 'Carrero', 'Carretero', 'Carreón', 'Carrillo', 'Carrión', 'Carvajal', 'Casado', 'Casanova', 'Casares', 'Casas', 'Casillas', 'Castañeda', 'Castaño', 'Castellano', 'Castellanos', 'Castillo', 'Castro', 'Casárez', 'Cavazos', 'Cazares', 'Ceballos', 'Cedillo', 'Ceja', 'Centeno', 'Cepeda', 'Cerda', 'Cervantes', 'Cervántez', 'Chacón', 'Chapa', 'Chavarría', 'Chávez', 'Cintrón', 'Cisneros', 'Clemente', 'Cobo', 'Collado', 'Collazo', 'Colunga', 'Colón', 'Concepción', 'Conde', 'Contreras', 'Cordero', 'Cornejo', 'Corona', 'Coronado', 'Corral', 'Corrales', 'Correa', 'Cortés', 'Cortez', 'Cortés', 'Costa', 'Cotto', 'Covarrubias', 'Crespo', 'Cruz', 'Cuellar', 'Cuenca', 'Cuesta', 'Cuevas', 'Curiel', 'Córdoba', 'Córdova', 'De la Cruz', 'De la Fuente', 'De la Torre', 'Del Río', 'Delacrúz', 'Delafuente', 'Delagarza', 'Delao', 'Delapaz', 'Delarosa', 'Delatorre', 'Deleón', 'Delgadillo', 'Delgado', 'Delrío', 'Delvalle', 'Díez', 'Domenech', 'Domingo', 'Domínguez', 'Domínquez', 'Duarte', 'Dueñas', 'Duran', 'Dávila', 'Díaz', 'Echevarría', 'Elizondo', 'Enríquez', 'Escalante', 'Escamilla', 'Escobar', 'Escobedo', 'Escribano', 'Escudero', 'Esparza', 'Espinal', 'Espino', 'Espinosa', 'Espinoza', 'Esquibel', 'Esquivel', 'Esteban', 'Esteve', 'Estrada', 'Estévez', 'Expósito', 'Fajardo', 'Farías', 'Feliciano', 'Fernández', 'Ferrer', 'Fierro', 'Figueroa', 'Flores', 'Flórez', 'Fonseca', 'Font', 'Franco', 'Frías', 'Fuentes', 'Gaitán', 'Galarza', 'Galindo', 'Gallardo', 'Gallego', 'Gallegos', 'Galván', 'Galán', 'Gamboa', 'Gámez', 'Gaona', 'Garay', 'García', 'Garibay', 'Garica', 'Garrido', 'Garza', 'Gastélum', 'Gaytán', 'Gil', 'Gimeno', 'Giménez', 'Girón', 'Godoy', 'Godínez', 'Gonzáles', 'González', 'Gracia', 'Granado', 'Granados', 'Griego', 'Grijalva', 'Guajardo', 'Guardado', 'Guerra', 'Guerrero', 'Guevara', 'Guillen', 'Gurule', 'Gutiérrez', 'Guzmán', 'Gálvez', 'Gómez', 'Haro', 'Henríquez', 'Heredia', 'Hernándes', 'Hernando', 'Hernádez', 'Hernández', 'Herrera', 'Herrero', 'Hidalgo', 'Hinojosa', 'Holguín', 'Huerta', 'Hurtado', 'Ibarra', 'Ibáñez', 'Iglesias', 'Irizarry', 'Izquierdo', 'Jaime', 'Jaimes', 'Jaramillo', 'Jasso', 'Jiménez', 'Jimínez', 'Juan', 'Jurado', 'Juárez', 'Jáquez', 'Laboy', 'Lara', 'Laureano', 'Leal', 'Lebrón', 'Ledesma', 'Leiva', 'Lemus', 'Lerma', 'Leyva', 'León', 'Limón', 'Linares', 'Lira', 'Llamas', 'Llorente', 'Loera', 'Lomeli', 'Longoria', 'Lorente', 'Lorenzo', 'Lovato', 'Loya', 'Lozada', 'Lozano', 'Lucas', 'Lucero', 'Lucio', 'Luevano', 'Lugo', 'Luis', 'Luján', 'Luna', 'Luque', 'Lázaro', 'López', 'Macias', 'Macías', 'Madera', 'Madrid', 'Madrigal', 'Maestas', 'Magaña', 'Malave', 'Maldonado', 'Manzanares', 'Manzano', 'Marco', 'Marcos', 'Mares', 'Marrero', 'Marroquín', 'Martos', 'Martí', 'Martín', 'Martínez', 'Marín', 'Más', 'Mascareñas', 'Mata', 'Mateo', 'Mateos', 'Matos', 'Matías', 'Maya', 'Mayorga', 'Medina', 'Medrano', 'Mejía', 'Melgar', 'Meléndez', 'Mena', 'Menchaca', 'Mendoza', 'Menéndez', 'Meraz', 'Mercado', 'Merino', 'Mesa', 'Meza', 'Miguel', 'Millán', 'Miramontes', 'Miranda', 'Mireles', 'Mojica', 'Molina', 'Mondragón', 'Monroy', 'Montalvo', 'Montañez', 'Montaño', 'Montemayor', 'Montenegro', 'Montero', 'Montes', 'Montez', 'Montoya', 'Mora', 'Moral', 'Morales', 'Morán', 'Moreno', 'Mota', 'Moya', 'Munguía', 'Murillo', 'Muro', 'Muñiz', 'Muñoz', 'Márquez', 'Méndez', 'Naranjo', 'Narváez', 'Nava', 'Navarrete', 'Navarro', 'Navas', 'Nazario', 'Negrete', 'Negrón', 'Nevárez', 'Nieto', 'Nieves', 'Niño', 'Noriega', 'Nájera', 'Núñez', 'Ocampo', 'Ocasio', 'Ochoa', 'Ojeda', 'Oliva', 'Olivares', 'Olivas', 'Oliver', 'Olivera', 'Olivo', 'Olivárez', 'Olmos', 'Olvera', 'Ontiveros', 'Oquendo', 'Ordoñez', 'Ordóñez', 'Orellana', 'Ornelas', 'Orosco', 'Orozco', 'Orta', 'Ortega', 'Ortíz', 'Osorio', 'Otero', 'Ozuna', 'Pabón', 'Pacheco', 'Padilla', 'Padrón', 'Pagan', 'Palacios', 'Palomino', 'Palomo', 'Pantoja', 'Pardo', 'Paredes', 'Parra', 'Partida', 'Pascual', 'Pastor', 'Patiño', 'Paz', 'Pedraza', 'Pedroza', 'Pelayo', 'Peláez', 'Perales', 'Peralta', 'Perea', 'Pereira', 'Peres', 'Peña', 'Pichardo', 'Pineda', 'Pizarro', 'Piña', 'Piñeiro', 'Plaza', 'Polanco', 'Polo', 'Ponce', 'Pons', 'Porras', 'Portillo', 'Posada', 'Pozo', 'Prado', 'Preciado', 'Prieto', 'Puente', 'Puga', 'Puig', 'Pulido', 'Páez', 'Pérez', 'Quesada', 'Quezada', 'Quintana', 'Quintanilla', 'Quintero', 'Quiroz', 'Quiñones', 'Quiñónez', 'Rael', 'Ramos', 'Ramírez', 'Ramón', 'Rangel', 'Rascón', 'Raya', 'Razo', 'Redondo', 'Regalado', 'Reina', 'Rendón', 'Rentería', 'Requena', 'Reséndez', 'Rey', 'Reyes', 'Reyna', 'Reynoso', 'Rico', 'Riera', 'Rincón', 'Riojas', 'Rivas', 'Rivera', 'Rivero', 'Robledo', 'Robles', 'Roca', 'Rocha', 'Rodarte', 'Rodrigo', 'Rodríguez', 'Rodríquez', 'Roig', 'Rojas', 'Rojo', 'Roldán', 'Rolón', 'Romero', 'Romo', 'Román', 'Roque', 'Ros', 'Rosa', 'Rosado', 'Rosales', 'Rosario', 'Rosas', 'Roybal', 'Rubio', 'Rueda', 'Ruelas', 'Ruiz', 'Ruvalcaba', 'Ruíz', 'Ríos', 'Saavedra', 'Saiz', 'Salas', 'Salazar', 'Salcedo', 'Salcido', 'Saldaña', 'Saldivar', 'Salgado', 'Salinas', 'Salvador', 'Samaniego', 'Sanabria', 'Sánchez', 'Sancho', 'Sandoval', 'Santacruz', 'Santamaría', 'Santana', 'Santiago', 'Santillán', 'Santos', 'Sanz', 'Sarabia', 'Sauceda', 'Saucedo', 'Sedillo', 'Segovia', 'Segura', 'Sepúlveda', 'Serna', 'Serra', 'Serrano', 'Serrato', 'Sevilla', 'Sierra', 'Silva', 'Simón', 'Sisneros', 'Sola', 'Solano', 'Soler', 'Soliz', 'Solorio', 'Solorzano', 'Solís', 'Soria', 'Soriano', 'Sosa', 'Sotelo', 'Soto', 'Suárez', 'Sáenz', 'Sáez', 'Sánchez', 'Tafoya', 'Tamayo', 'Tamez', 'Tapia', 'Tejada', 'Tejeda', 'Tello', 'Terrazas', 'Terán', 'Tijerina', 'Tirado', 'Toledo', 'Toro', 'Torres', 'Tovar', 'Trejo', 'Treviño', 'Trujillo', 'Téllez', 'Tórrez', 'Ulibarri', 'Ulloa', 'Urbina', 'Ureña', 'Uribe', 'Urrutia', 'Urías', 'Vaca', 'Valadez', 'Valdez', 'Valdivia', 'Valdés', 'Valencia', 'Valentín', 'Valenzuela', 'Valero', 'Valladares', 'Valle', 'Vallejo', 'Valles', 'Valverde', 'Vanegas', 'Varela', 'Vargas', 'Vega', 'Vela', 'Velasco', 'Velásquez', 'Velázquez', 'Venegas', 'Vera', 'Verdugo', 'Verduzco', 'Vergara', 'Vicente', 'Vidal', 'Viera', 'Vigil', 'Vila', 'Villa', 'Villagómez', 'Villalba', 'Villalobos', 'Villalpando', 'Villanueva', 'Villar', 'Villareal', 'Villarreal', 'Villaseñor', 'Villegas', 'Vásquez', 'Vázquez', 'Vélez', 'Véliz', 'Ybarra', 'Yáñez', 'Zambrano', 'Zamora', 'Zamudio', 'Zapata', 'Zaragoza', 'Zarate', 'Zavala', 'Zayas', 'Zelaya', 'Zepeda', 'Zúñiga', 'de Anda', 'de Jesús', 'Águilar', 'Álvarez', 'Ávalos', 'Ávila'
    );

    protected static $titleMale = array('Sr.', 'Dn.', 'Dr.', 'Lic.', 'Ing.');

    protected static $titleFemale = array('Sra.', 'Srita.', 'Dr.', 'Lic.', 'Ing.');

    private static $suffix = array('Hijo', 'Segundo', 'Tercero');
</codefragment>
  </duplication>
  <duplication lines="10" tokens="88">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/es_ES/Person.php" line="57"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/es_VE/Person.php" line="126"/>
    <codefragment>        'Abad', 'Abeyta', 'Abrego', 'Abreu', 'Acevedo', 'Acosta', 'Acuña', 'Adame', 'Adorno', 'Agosto', 'Aguado', 'Aguayo', 'Aguilar', 'Aguilera', 'Aguirre', 'Alanis', 'Alaniz', 'Alarcón', 'Alba', 'Alcala', 'Alcaráz', 'Alcántar', 'Alejandro', 'Alemán', 'Alfaro', 'Alfonso', 'Alicea', 'Almanza', 'Almaráz', 'Almonte', 'Alonso', 'Alonzo', 'Altamirano', 'Alva', 'Alvarado', 'Amador', 'Amaya', 'Anaya', 'Andreu', 'Andrés', 'Anguiano', 'Angulo', 'Antón', 'Aparicio', 'Apodaca', 'Aponte', 'Aragón', 'Aranda', 'Araña', 'Arce', 'Archuleta', 'Arellano', 'Arenas', 'Arevalo', 'Arguello', 'Arias', 'Armas', 'Armendáriz', 'Armenta', 'Armijo', 'Arredondo', 'Arreola', 'Arriaga', 'Arribas', 'Arroyo', 'Arteaga', 'Asensio', 'Atencio', 'Avilés', 'Ayala', 'Baca', 'Badillo', 'Baeza', 'Bahena', 'Balderas', 'Ballesteros', 'Banda', 'Barajas', 'Barela', 'Barragán', 'Barraza', 'Barrera', 'Barreto', 'Barrientos', 'Barrios', 'Barroso', 'Batista', 'Bautista', 'Bañuelos', 'Becerra', 'Beltrán', 'Benavides', 'Benavídez', 'Benito', 'Benítez', 'Bermejo', 'Bermúdez', 'Bernal', 'Berríos', 'Blanco', 'Blasco', 'Blázquez', 'Bonilla', 'Borrego', 'Botello', 'Bravo', 'Briones', 'Briseño', 'Brito', 'Bueno', 'Burgos', 'Bustamante', 'Bustos', 'Báez', 'Betancourt', 'Caballero', 'Cabello', 'Cabrera', 'Cabán', 'Cadena', 'Caldera', 'Calderón', 'Calero', 'Calvillo', 'Calvo', 'Camacho', 'Camarillo', 'Campos', 'Canales', 'Candelaria', 'Cano', 'Cantú', 'Caraballo', 'Carbajal', 'Carballo', 'Carbonell', 'Cárdenas', 'Cardona', 'Carmona', 'Caro', 'Carranza', 'Carrasco', 'Carrasquillo', 'Carrera', 'Carrero', 'Carretero', 'Carreón', 'Carrillo', 'Carrión', 'Carvajal', 'Casado', 'Casanova', 'Casares', 'Casas', 'Casillas', 'Castañeda', 'Castaño', 'Castellano', 'Castellanos', 'Castillo', 'Castro', 'Casárez', 'Cavazos', 'Cazares', 'Ceballos', 'Cedillo', 'Ceja', 'Centeno', 'Cepeda', 'Cerda', 'Cervantes', 'Cervántez', 'Chacón', 'Chapa', 'Chavarría', 'Chávez', 'Cintrón', 'Cisneros', 'Clemente', 'Cobo', 'Collado', 'Collazo', 'Colunga', 'Colón', 'Concepción', 'Conde', 'Contreras', 'Cordero', 'Cornejo', 'Corona', 'Coronado', 'Corral', 'Corrales', 'Correa', 'Cortés', 'Cortez', 'Cortés', 'Costa', 'Cotto', 'Covarrubias', 'Crespo', 'Cruz', 'Cuellar', 'Cuenca', 'Cuesta', 'Cuevas', 'Curiel', 'Córdoba', 'Córdova', 'De la Cruz', 'De la Fuente', 'De la Torre', 'Del Río', 'Delacrúz', 'Delafuente', 'Delagarza', 'Delao', 'Delapaz', 'Delarosa', 'Delatorre', 'Deleón', 'Delgadillo', 'Delgado', 'Delrío', 'Delvalle', 'Díez', 'Domenech', 'Domingo', 'Domínguez', 'Domínquez', 'Duarte', 'Dueñas', 'Duran', 'Dávila', 'Díaz', 'Echevarría', 'Elizondo', 'Enríquez', 'Escalante', 'Escamilla', 'Escobar', 'Escobedo', 'Escribano', 'Escudero', 'Esparza', 'Espinal', 'Espino', 'Espinosa', 'Espinoza', 'Esquibel', 'Esquivel', 'Esteban', 'Esteve', 'Estrada', 'Estévez', 'Expósito', 'Fajardo', 'Farías', 'Feliciano', 'Fernández', 'Ferrer', 'Fierro', 'Figueroa', 'Flores', 'Flórez', 'Fonseca', 'Font', 'Franco', 'Frías', 'Fuentes', 'Gaitán', 'Galarza', 'Galindo', 'Gallardo', 'Gallego', 'Gallegos', 'Galván', 'Galán', 'Gamboa', 'Gámez', 'Gaona', 'Garay', 'García', 'Garibay', 'Garica', 'Garrido', 'Garza', 'Gastélum', 'Gaytán', 'Gil', 'Gimeno', 'Giménez', 'Girón', 'Godoy', 'Godínez', 'Gonzáles', 'González', 'Gracia', 'Granado', 'Granados', 'Griego', 'Grijalva', 'Guajardo', 'Guardado', 'Guerra', 'Guerrero', 'Guevara', 'Guillen', 'Gurule', 'Gutiérrez', 'Guzmán', 'Gálvez', 'Gómez', 'Haro', 'Henríquez', 'Heredia', 'Hernándes', 'Hernando', 'Hernádez', 'Hernández', 'Herrera', 'Herrero', 'Hidalgo', 'Hinojosa', 'Holguín', 'Huerta', 'Hurtado', 'Ibarra', 'Ibáñez', 'Iglesias', 'Irizarry', 'Izquierdo', 'Jaime', 'Jaimes', 'Jaramillo', 'Jasso', 'Jiménez', 'Jimínez', 'Juan', 'Jurado', 'Juárez', 'Jáquez', 'Laboy', 'Lara', 'Laureano', 'Leal', 'Lebrón', 'Ledesma', 'Leiva', 'Lemus', 'Lerma', 'Leyva', 'León', 'Limón', 'Linares', 'Lira', 'Llamas', 'Llorente', 'Loera', 'Lomeli', 'Longoria', 'Lorente', 'Lorenzo', 'Lovato', 'Loya', 'Lozada', 'Lozano', 'Lucas', 'Lucero', 'Lucio', 'Luevano', 'Lugo', 'Luis', 'Luján', 'Luna', 'Luque', 'Lázaro', 'López', 'Macias', 'Macías', 'Madera', 'Madrid', 'Madrigal', 'Maestas', 'Magaña', 'Malave', 'Maldonado', 'Manzanares', 'Manzano', 'Marco', 'Marcos', 'Mares', 'Marrero', 'Marroquín', 'Martos', 'Martí', 'Martín', 'Martínez', 'Marín', 'Más', 'Mascareñas', 'Mata', 'Mateo', 'Mateos', 'Matos', 'Matías', 'Maya', 'Mayorga', 'Medina', 'Medrano', 'Mejía', 'Melgar', 'Meléndez', 'Mena', 'Menchaca', 'Mendoza', 'Menéndez', 'Meraz', 'Mercado', 'Merino', 'Mesa', 'Meza', 'Miguel', 'Millán', 'Miramontes', 'Miranda', 'Mireles', 'Mojica', 'Molina', 'Mondragón', 'Monroy', 'Montalvo', 'Montañez', 'Montaño', 'Montemayor', 'Montenegro', 'Montero', 'Montes', 'Montez', 'Montoya', 'Mora', 'Moral', 'Morales', 'Morán', 'Moreno', 'Mota', 'Moya', 'Munguía', 'Murillo', 'Muro', 'Muñiz', 'Muñoz', 'Márquez', 'Méndez', 'Naranjo', 'Narváez', 'Nava', 'Navarrete', 'Navarro', 'Navas', 'Nazario', 'Negrete', 'Negrón', 'Nevárez', 'Nieto', 'Nieves', 'Niño', 'Noriega', 'Nájera', 'Núñez', 'Ocampo', 'Ocasio', 'Ochoa', 'Ojeda', 'Oliva', 'Olivares', 'Olivas', 'Oliver', 'Olivera', 'Olivo', 'Olivárez', 'Olmos', 'Olvera', 'Ontiveros', 'Oquendo', 'Ordoñez', 'Ordóñez', 'Orellana', 'Ornelas', 'Orosco', 'Orozco', 'Orta', 'Ortega', 'Ortíz', 'Osorio', 'Otero', 'Ozuna', 'Pabón', 'Pacheco', 'Padilla', 'Padrón', 'Pagan', 'Palacios', 'Palomino', 'Palomo', 'Pantoja', 'Pardo', 'Paredes', 'Parra', 'Partida', 'Pascual', 'Pastor', 'Patiño', 'Paz', 'Pedraza', 'Pedroza', 'Pelayo', 'Peláez', 'Perales', 'Peralta', 'Perea', 'Pereira', 'Peres', 'Peña', 'Pichardo', 'Pineda', 'Pizarro', 'Piña', 'Piñeiro', 'Plaza', 'Polanco', 'Polo', 'Ponce', 'Pons', 'Porras', 'Portillo', 'Posada', 'Pozo', 'Prado', 'Preciado', 'Prieto', 'Puente', 'Puga', 'Puig', 'Pulido', 'Páez', 'Pérez', 'Quesada', 'Quezada', 'Quintana', 'Quintanilla', 'Quintero', 'Quiroz', 'Quiñones', 'Quiñónez', 'Rael', 'Ramos', 'Ramírez', 'Ramón', 'Rangel', 'Rascón', 'Raya', 'Razo', 'Redondo', 'Regalado', 'Reina', 'Rendón', 'Rentería', 'Requena', 'Reséndez', 'Rey', 'Reyes', 'Reyna', 'Reynoso', 'Rico', 'Riera', 'Rincón', 'Riojas', 'Rivas', 'Rivera', 'Rivero', 'Robledo', 'Robles', 'Roca', 'Rocha', 'Rodarte', 'Rodrigo', 'Rodríguez', 'Rodríquez', 'Roig', 'Rojas', 'Rojo', 'Roldán', 'Rolón', 'Romero', 'Romo', 'Román', 'Roque', 'Ros', 'Rosa', 'Rosado', 'Rosales', 'Rosario', 'Rosas', 'Roybal', 'Rubio', 'Rueda', 'Ruelas', 'Ruiz', 'Ruvalcaba', 'Ruíz', 'Ríos', 'Saavedra', 'Saiz', 'Salas', 'Salazar', 'Salcedo', 'Salcido', 'Saldaña', 'Saldivar', 'Salgado', 'Salinas', 'Salvador', 'Samaniego', 'Sanabria', 'Sánchez', 'Sancho', 'Sandoval', 'Santacruz', 'Santamaría', 'Santana', 'Santiago', 'Santillán', 'Santos', 'Sanz', 'Sarabia', 'Sauceda', 'Saucedo', 'Sedillo', 'Segovia', 'Segura', 'Sepúlveda', 'Serna', 'Serra', 'Serrano', 'Serrato', 'Sevilla', 'Sierra', 'Silva', 'Simón', 'Sisneros', 'Sola', 'Solano', 'Soler', 'Soliz', 'Solorio', 'Solorzano', 'Solís', 'Soria', 'Soriano', 'Sosa', 'Sotelo', 'Soto', 'Suárez', 'Sáenz', 'Sáez', 'Sánchez', 'Tafoya', 'Tamayo', 'Tamez', 'Tapia', 'Tejada', 'Tejeda', 'Tello', 'Terrazas', 'Terán', 'Tijerina', 'Tirado', 'Toledo', 'Toro', 'Torres', 'Tovar', 'Trejo', 'Treviño', 'Trujillo', 'Téllez', 'Tórrez', 'Ulibarri', 'Ulloa', 'Urbina', 'Ureña', 'Uribe', 'Urrutia', 'Urías', 'Vaca', 'Valadez', 'Valdez', 'Valdivia', 'Valdés', 'Valencia', 'Valentín', 'Valenzuela', 'Valero', 'Valladares', 'Valle', 'Vallejo', 'Valles', 'Valverde', 'Vanegas', 'Varela', 'Vargas', 'Vega', 'Vela', 'Velasco', 'Velásquez', 'Velázquez', 'Venegas', 'Vera', 'Verdugo', 'Verduzco', 'Vergara', 'Vicente', 'Vidal', 'Viera', 'Vigil', 'Vila', 'Villa', 'Villagómez', 'Villalba', 'Villalobos', 'Villalpando', 'Villanueva', 'Villar', 'Villareal', 'Villarreal', 'Villaseñor', 'Villegas', 'Vásquez', 'Vázquez', 'Vélez', 'Véliz', 'Ybarra', 'Yáñez', 'Zambrano', 'Zamora', 'Zamudio', 'Zapata', 'Zaragoza', 'Zarate', 'Zavala', 'Zayas', 'Zelaya', 'Zepeda', 'Zúñiga', 'de Anda', 'de Jesús', 'Águilar', 'Álvarez', 'Ávalos', 'Ávila'
    );

    protected static $titleMale = array('Sr.', 'Dn.', 'Dr.', 'Lic.', 'Ing.');

    protected static $titleFemale = array('Sra.', 'Srita.', 'Dr.', 'Lic.', 'Ing.');

    private static $suffix = array('Hijo', 'Segundo', 'Tercero');

    /**
</codefragment>
  </duplication>
  <duplication lines="40" tokens="127">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/zh_TW/DateTime.php" line="5"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/zh_CN/DateTime.php" line="5"/>
    <codefragment>class DateTime extends \Faker\Provider\DateTime
{
    public static function amPm($max = 'now')
    {
        return static::dateTime($max)-&gt;format('a') === 'am' ? '上午' : '下午';
    }

    public static function dayOfWeek($max = 'now')
    {
        $map = array(
            'Sunday' =&gt; '星期日',
            'Monday' =&gt; '星期一',
            'Tuesday' =&gt; '星期二',
            'Wednesday' =&gt; '星期三',
            'Thursday' =&gt; '星期四',
            'Friday' =&gt; '星期五',
            'Saturday' =&gt; '星期六',
        );
        $week = static::dateTime($max)-&gt;format('l');
        return isset($map[$week]) ? $map[$week] : $week;
    }

    public static function monthName($max = 'now')
    {
        $map = array(
            'January' =&gt; '一月',
            'February' =&gt; '二月',
            'March' =&gt; '三月',
            'April' =&gt; '四月',
            'May' =&gt; '五月',
            'June' =&gt; '六月',
            'July' =&gt; '七月',
            'August' =&gt; '八月',
            'September' =&gt; '九月',
            'October' =&gt; '十月',
            'November' =&gt; '十一月',
            'December' =&gt; '十二月',
        );
        $month = static::dateTime($max)-&gt;format('F');
        return isset($map[$month]) ? $map[$month] : $month;
</codefragment>
  </duplication>
  <duplication lines="14" tokens="222">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/nl_BE/Person.php" line="38"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/fr_BE/Person.php" line="30"/>
    <codefragment>    protected static $lastName = array(
        'Adam', 'Aerts', 'Amrani', 'André', 'Antoine', 'Baert', 'Bah', 'Barry',
        'Bastin', 'Bauwens', 'Benali', 'Bernard', 'Bertrand', 'Bodart', 'Bogaert',
        'Bogaerts', 'Borremans', 'Bosmans', 'Boulanger', 'Bourgeois', 'Brasseur',
        'Carlier', 'Celik', 'Ceulemans', 'Charlier', 'Christiaens', 'Claes',
        'Claessens', 'Claeys', 'Collard', 'Collignon', 'Collin', 'Cools', 'Coppens',
        'Cornelis', 'Cornet', 'Cuvelier', 'Daems', 'De Backer', 'De Clercq', 'De Cock',
        'De Coninck', 'De Coster', 'De Greef', 'De Groote', 'De Meyer', 'De Pauw',
        'De Ridder', 'De Smedt', 'De Smet', 'De Vos', 'De Wilde', 'De Winter',
        'Declercq', 'Delfosse', 'Delhaye', 'Delvaux', 'Demir', 'Denis', 'Deprez',
        'Descamps', 'Desmedt', 'Desmet', 'Dethier', 'Devos', 'Diallo', 'Dierckx',
        'Dogan', 'Dubois', 'Dumont', 'Dupont', 'El Amrani', 'Etienne', 'Evrard',
        'Fontaine', 'François', 'Geerts', 'Georges', 'Gérard', 'Gielen', 'Gilles',
        'Gillet', 'Gilson', 'Goethals', 'Goffin', 'Goossens', 'Grégoire', 'Guillaume',
</codefragment>
  </duplication>
  <duplication lines="33" tokens="84">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/lv_LV/Address.php" line="63"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/lt_LT/Address.php" line="80"/>
    <codefragment>    public static function buildingNumber()
    {
        return static::numerify(static::randomElement(static::$buildingNumber));
    }

    public function address()
    {
        $format = static::randomElement(static::$addressFormats);

        return $this-&gt;generator-&gt;parse($format);
    }

    public static function country()
    {
        return static::randomElement(static::$country);
    }

    public static function postcode()
    {
        return static::toUpper(static::bothify(static::randomElement(static::$postcode)));
    }

    public static function regionSuffix()
    {
        return static::randomElement(static::$regionSuffix);
    }

    public static function region()
    {
        return static::randomElement(static::$region);
    }

    public static function cityPrefix()
</codefragment>
  </duplication>
  <duplication lines="13" tokens="180">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/es_ES/Company.php" line="32"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/sk_SK/Company.php" line="25"/>
    <codefragment>    protected static $bsWords = array(
        array(
            'implement', 'utilize', 'integrate', 'streamline', 'optimize', 'evolve', 'transform', 'embrace', 'enable', 'orchestrate', 'leverage', 'reinvent', 'aggregate', 'architect', 'enhance', 'incentivize', 'morph', 'empower', 'envisioneer', 'monetize', 'harness', 'facilitate', 'seize', 'disintermediate', 'synergize', 'strategize', 'deploy', 'brand', 'grow', 'target', 'syndicate', 'synthesize', 'deliver', 'mesh', 'incubate', 'engage', 'maximize', 'benchmark', 'expedite', 'reintermediate', 'whiteboard', 'visualize', 'repurpose', 'innovate', 'scale', 'unleash', 'drive', 'extend', 'engineer', 'revolutionize', 'generate', 'exploit', 'transition', 'e-enable', 'iterate', 'cultivate', 'matrix', 'productize', 'redefine', 'recontextualize'
        ),
        array(
            'clicks-and-mortar', 'value-added', 'vertical', 'proactive', 'robust', 'revolutionary', 'scalable', 'leading-edge', 'innovative', 'intuitive', 'strategic', 'e-business', 'mission-critical', 'sticky', 'one-to-one', '24/7', 'end-to-end', 'global', 'B2B', 'B2C', 'granular', 'frictionless', 'virtual', 'viral', 'dynamic', '24/365', 'best-of-breed', 'killer', 'magnetic', 'bleeding-edge', 'web-enabled', 'interactive', 'dot-com', 'sexy', 'back-end', 'real-time', 'efficient', 'front-end', 'distributed', 'seamless', 'extensible', 'turn-key', 'world-class', 'open-source', 'cross-platform', 'cross-media', 'synergistic', 'bricks-and-clicks', 'out-of-the-box', 'enterprise', 'integrated', 'impactful', 'wireless', 'transparent', 'next-generation', 'cutting-edge', 'user-centric', 'visionary', 'customized', 'ubiquitous', 'plug-and-play', 'collaborative', 'compelling', 'holistic', 'rich'
        ),
        array(
            'synergies', 'web-readiness', 'paradigms', 'markets', 'partnerships', 'infrastructures', 'platforms', 'initiatives', 'channels', 'eyeballs', 'communities', 'ROI', 'solutions', 'e-tailers', 'e-services', 'action-items', 'portals', 'niches', 'technologies', 'content', 'vortals', 'supply-chains', 'convergence', 'relationships', 'architectures', 'interfaces', 'e-markets', 'e-commerce', 'systems', 'bandwidth', 'infomediaries', 'models', 'mindshare', 'deliverables', 'users', 'schemas', 'networks', 'applications', 'metrics', 'e-business', 'functionalities', 'experiences', 'webservices', 'methodologies'
        )
    );

    protected static $companyPrefix = array('Asociación', 'Centro', 'Corporación', 'Empresa', 'Gestora', 'Global', 'Grupo', 'Viajes', 'Air');
</codefragment>
  </duplication>
  <duplication lines="15" tokens="237">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/el_GR/Person.php" line="28"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/el_GR/Person.php" line="78"/>
    <codefragment>    protected static $firstNameMale = array(
        'Αβραάμ', 'Αγαθάγγελος', 'Αγαθοκλής', 'Αγαθόνικος', 'Αγαμέμνων', 'Αγαπητός', 'Αγάπιος', 'Άγγελος', 'Αγησίλαος', 'Αδάμ', 'Αδαμάντιος', 'Άδωνις', 'Αθανάσιος', 'Αθηναγόρας', 'Αθηνόδωρος', 'Αιμίλιος', 'Ακριβός', 'Ακρίτας', 'Αλέξανδρος', 'Αλέξιος', 'Αλκιβιάδης', 'Αμβρόσιος', 'Αναγνώστης', 'Ανανίας', 'Αναξαγόρας', 'Ανάργυρος', 'Αναστάσιος', 'Ανδροκλής', 'Ανδρόνικος', 'Άνθιμος', 'Ανθούλης', 'Αντίγονος', 'Αντίπατρος', 'Αντύπας', 'Αντώνιος', 'Απόλλων', 'Απόστολος', 'Αργύριος', 'Άρης', 'Αρίσταρχος', 'Αριστόβουλος', 'Αριστομένης', 'Άριστος', 'Αριστοτέλης', 'Αριστοφάνης', 'Αρτέμιος', 'Αρχέλαος', 'Αρχιμήδης', 'Ασημής', 'Ασκληπιός', 'Αστέριος', 'Αυγέρης', 'Αύγουστος', 'Αυξέντιος', 'Αφέντης', 'Αχιλλέας',
        'Βάιος', 'Βαλάντης', 'Βαλεντίνος', 'Βαλέριος', 'Βαρδής', 'Βαρθολομαίος', 'Βαρσάμος', 'Βασίλειος', 'Βασίλης', 'Βελισσάριος', 'Βενέτιος', 'Βενιαμίν', 'Βενιζέλος', 'Βησσαρίων', 'Βικέντιος', 'Βλαδίμηρος', 'Βλάσιος', 'Βρασίδας', 'Βύρων',
        'Γαβριήλ', 'Γαλάτιος', 'Γαληνός', 'Γαρύφαλλος', 'Γεράσιμος', 'Γεώργιος', 'Γκίκας', 'Γρηγόριος',
        'Δαμασκηνός', 'Δαμιανός', 'Δανιήλ', 'Δημήτριος', 'Δημοκράτης', 'Δημόκριτος', 'Δήμος', 'Δημοσθένης', 'Δίκαιος', 'Διογένης', 'Διομήδης', 'Διονύσιος', 'Δομήνικος', 'Δράκων', 'Δρόσος', 'Δωρόθεος',
        'Ειρηναίος', 'Έκτορας', 'Ελευθέριος', 'Ελισσαίος', 'Εμμανουήλ', 'Έξαρχος', 'Επαμεινώνδας', 'Ερμής', 'Ερμόλαος', 'Ερρίκος', 'Ερωτόκριτος', 'Ευάγγελος', 'Ευγένιος', 'Ευδόξιος', 'Ευθύμιος', 'Ευκλείδης', 'Ευμένιος', 'Ευριπίδης', 'Ευσέβιος', 'Ευστάθιος', 'Ευστράτιος', 'Ευτύχιος', 'Εφραίμ',
        'Ζαφείριος', 'Ζαχαρίας', 'Ζηνόβιος', 'Ζήνων',
        'Ηλίας', 'Ηρακλής', 'Ηρόδοτος', 'Ησαΐας',
        'Θαλής', 'Θεμιστοκλής', 'Θεοδόσιος', 'Θεόδουλος', 'Θεόδωρος', 'Θεόκλητος', 'Θεολόγος', 'Θεόπιστος', 'Θεοτόκης', 'Θεοφάνης', 'Θεόφιλος', 'Θεόφραστος', 'Θεοφύλακτος', 'Θεοχάρης', 'Θησεύς', 'Θουκυδίδης', 'Θρασύβουλος', 'Θωμάς',
        'Ιάκωβος', 'Ιάσων', 'Ιγνάτιος', 'Ιερεμίας', 'Ιερόθεος', 'Ιερώνυμος', 'Ίκαρος', 'Ιορδάνης', 'Ιουλιανός', 'Ιούλιος', 'Ιπποκράτης', 'Ιππόλυτος', 'Ισαάκ', 'Ισίδωρος', 'Ιωακείμ', 'Ιωάννης', 'Ίων', 'Ιωνάς', 'Ιωσήφ',
        'Καλλίνικος', 'Κάρολος', 'Κηρύκος', 'Κίμων', 'Κλεάνθης', 'Κλέαρχος', 'Κλεόβουλος', 'Κλεομένης', 'Κλεόπας', 'Κλήμης', 'Κομνηνός', 'Κορνήλιος', 'Κοσμάς', 'Κρυστάλλης', 'Κυπριανός', 'Κυριαζής', 'Κυριάκος', 'Κύρος', 'Κωνσταντίνος',
        'Λαέρτης', 'Λάζαρος', 'Λάμπρος', 'Λαοκράτης', 'Λάσκαρης', 'Λαυρέντιος', 'Λέανδρος', 'Λεμονής', 'Λεονάρδος', 'Λέων', 'Λεωνίδας', 'Λογοθέτης', 'Λουδοβίκος', 'Λουκάς', 'Λουκιανός', 'Λυκούργος', 'Λύσανδρος',
        'Μαγδαληνός', 'Μακάριος', 'Μαρίνος', 'Μάριος', 'Μάρκος', 'Μαρτίνος', 'Ματθαίος', 'Μαυρίκιος', 'Μαυροειδής', 'Μαύρος', 'Μεγακλής', 'Μεθόδιος', 'Μελέτιος', 'Μένανδρος', 'Μενέλαος', 'Μερκούριος', 'Μηνάς', 'Μιλτιάδης', 'Μίνωας', 'Μιχαήλ',
        'Ναθαναήλ', 'Ναπολέων', 'Νέαρχος', 'Νεκτάριος', 'Νεοκλής', 'Νεόφυτος', 'Νίκανδρος', 'Νικήτας', 'Νικηφόρος', 'Νικόδημος', 'Νικόλαος', 'Νίκων',
        'Ξανθός', 'Ξενοφών',
</codefragment>
  </duplication>
  <duplication lines="8" tokens="90">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/el_GR/Person.php" line="43"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/el_GR/Person.php" line="93"/>
    <codefragment>        'Οδυσσέας', 'Όθων', 'Όμηρος', 'Ορέστης', 'Ορφέας',
        'Παναγιώτης', 'Πανορμίτης', 'Πανταζής', 'Παντελεήμων', 'Παρασκευάς', 'Παράσχος', 'Πάρις', 'Πασχάλης', 'Πάτροκλος', 'Παύλος', 'Παυσανίας', 'Πελοπίδας', 'Περικλής', 'Πέτρος', 'Πίνδαρος', 'Πλάτων', 'Πλούταρχος', 'Πολύβιος', 'Πολύδωρος', 'Πολυζώης', 'Πολύκαρπος', 'Πολυκράτης', 'Πολυχρόνιος', 'Πραξιτέλης', 'Πρόδρομος', 'Προκόπιος', 'Προμηθέας', 'Πυθαγόρας', 'Πύρρος',
        'Ράλλης', 'Ραφαήλ', 'Ρήγας', 'Ρίζος', 'Ροδόφλος', 'Ρωμανός',
        'Σάββας', 'Σαμουήλ', 'Σαράντης', 'Σεβαστιανός', 'Σεραφείμ', 'Σέργιος', 'Σολομών', 'Σόλων', 'Σοφοκλής', 'Σπυρίδων', 'Σταμάτιος', 'Σταύρος', 'Στέργιος', 'Στέφανος', 'Στυλιανός', 'Συμεών', 'Σώζων', 'Σωκράτης', 'Σωτήριος',
        'Ταξίαρχος', 'Τηλέμαχος', 'Τιμόθεος', 'Τιμολέων', 'Τίμων', 'Τίτος', 'Τριαντάφυλλος', 'Τρύφων', 'Τσαμπίκος',
        'Υάκινθος',
        'Φαίδων', 'Φανούριος', 'Φιλήμων', 'Φίλιππος', 'Φοίβος', 'Φραγκίσκος', 'Φρειδερίκος', 'Φρίξος', 'Φωκάς', 'Φωκίων', 'Φωτεινός', 'Φώτιος',
        'Χαράλαμπος', 'Χαρίλαος', 'Χαρίτος', 'Χρήστος', 'Χριστόδουλος', 'Χριστόφορος', 'Χρύσανθος', 'Χρυσοβαλάντιος', 'Χρυσόστομος',
</codefragment>
  </duplication>
  <duplication lines="25" tokens="374">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/el_GR/Person.php" line="54"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/el_GR/Person.php" line="101"/>
    <codefragment>        'Αποστολία', 'Αυγή', 'Αγάθη', 'Αγάπη', 'Αγγελική', 'Αγλαΐα', 'Αγνή', 'Αγόρω', 'Αδαμαντία', 'Αηδόνα', 'Αθανασία', 'Αθηνά', 'Αθηνοδώρα', 'Αικατερίνη', 'Αιμιλία', 'Ακριβή', 'Αλεξάνδρα', 'Αλεξία', 'Αλίκη', 'Άλκηστις', 'Αλκινόη', 'Αμαλία', 'Αμβροσία', 'Αμφιθέα', 'Αμφιτρίτη', 'Ανάργυρη', 'Αναστασία', 'Ανατολή', 'Ανδριανή', 'Ανδρομάχη', 'Ανδρομέδα', 'Ανδρονίκη', 'Ανθή', 'Άννα', 'Αντιγόνη', 'Αντωνία', 'Απολλωνία', 'Αποστολία', 'Αργυρώ', 'Αρετή', 'Αριάδνη', 'Αριστέα', 'Άρτεμις', 'Αρτεμισία', 'Αρχοντία', 'Ασημίνα', 'Ασπασία', 'Αστέρω', 'Αταλάντη', 'Αυγουστίνα', 'Αφέντρα', 'Αφροδίτη', 'Αχιλλεία',
        'Βάγια', 'Βαλάντω', 'Βαλεντίνα', 'Βαλέρια', 'Βαρβάρα', 'Βαρσαμία', 'Βασιλεία', 'Βασιλική', 'Βεατρίκη', 'Βελισσαρία', 'Βενετία', 'Βερόνικα', 'Βησσαρία', 'Βικέντια', 'Βικτόρια', 'Βιολέτα', 'Βιργινία', 'Βλασία', 'Βρυσηίς',
        'Γαβριέλλα', 'Γαλάτεια', 'Γαλήνη', 'Γαρυφαλλιά', 'Γενοβέφα', 'Γερακίνα', 'Γερασιμούλα', 'Γεσθημανή', 'Γεωργία', 'Γιασεμή', 'Γκόλφω', 'Γλαύκη', 'Γλυκερία', 'Γραμματική',
        'Δαβιδούλα', 'Δαμασκηνή', 'Δαμιανή', 'Δανάη', 'Δάφνη', 'Δέσποινα', 'Δήμητρα', 'Δημούλα', 'Διαλεκτή', 'Διδώ', 'Δικαία', 'Διονυσία', 'Δόμνα', 'Δροσιά', 'Δωροθέα',
        'Ειρήνη', 'Ελένη', 'Ελεονόρα', 'Ελευθερία', 'Ελισάβετ', 'Έλλη', 'Ελπίς', 'Εμμανουέλα', 'Επιστήμη', 'Ερασμία', 'Ερατώ', 'Εριέτα', 'Εριφύλη', 'Ερμιόνη', 'Ερωφίλη', 'Εύα', 'Ευαγγελία', 'Ευανθία', 'Ευγενία', 'Ευδοκία', 'Ευδοξία', 'Ευθαλία', 'Ευθυμία', 'Εύκλεια', 'Ευλαμπία', 'Ευρυδίκη', 'Ευρύκλεια', 'Ευσεβεία', 'Ευσταθία', 'Ευστρατία', 'Ευτέρπη', 'Ευτυχία',
        'Ζαμπέτα', 'Ζαφειρία', 'Ζαχαρούλα', 'Ζηναϊς', 'Ζηνοβία', 'Ζησούλα', 'Ζωή',
        'Ήβη', 'Ηλέκτρα', 'Ήλια', 'Ηλιάνα', 'Ήρα', 'Ηράκλεια', 'Ηώ',
        'Θαλασσινή', 'Θάλεια', 'Θεανώ', 'Θέκλα', 'Θέμις', 'Θεμιστόκλεια', 'Θεοδοσία', 'Θεοδότη', 'Θεοδούλη', 'Θεοδώρα', 'Θεόκλεια', 'Θεολογία', 'Θεοπίστη', 'Θεοφανία', 'Θεοφίλη', 'Θεοφύλακτη', 'Θεοχαρούλα', 'Θέτις', 'Θεώνη', 'Θηρεσία', 'Θωμαίς',
        'Ιακωβίνα', 'Ιγνατία', 'Ινώ', 'Ιοκάστη', 'Ιορδανία', 'Ιουλία', 'Ιουλιανή', 'Ιππολύτη', 'Ίρις', 'Ισαβέλλα', 'Ισιδώρα', 'Ισμήνη', 'Ιφιγένεια', 'Ιωάννα', 'Ιωσηφίνα',
        'Καλή', 'Καλλίνικη', 'Καλλιόπη', 'Καλλιρρόη', 'Καλομοίρα', 'Καλυψώ', 'Κανέλλα', 'Καρυοφυλλιά', 'Κασσάνδρα', 'Κασσιανή', 'Κερασιά', 'Κλαίρη', 'Κλειώ', 'Κλεοπάτρα', 'Κλημεντίνη', 'Κλυταιμνήστρα', 'Κοκκώνα', 'Κομνηνή', 'Κονδυλία', 'Κοραλία', 'Κορνηλία', 'Κόσμια', 'Κρινιώ', 'Κρυσταλλένια', 'Κυβέλη', 'Κυδωνία', 'Κυπαρισσία', 'Κυπριανή', 'Κυριακή', 'Κωνσταντίνα',
        'Λαζαρία', 'Λαμπρινή', 'Λασκαρίνα', 'Λαυρεντία', 'Λεμονιά', 'Λευκοθέα', 'Λεώνη', 'Λεωνιδιά', 'Λήδα', 'Λητώ', 'Λουίζα', 'Λουκία', 'Λουλουδένια', 'Λυγερή', 'Λυδία',
        'Μαγδαληνή', 'Μακρίνα', 'Μαλαματένια', 'Μαλβίνα', 'Μάνθα', 'Μαντώ', 'Μαργαρίτα', 'Μάρθα', 'Μαρία', 'Μαριάνθη', 'Μαρίνα', 'Μαρκέλλα', 'Ματθίλδη', 'Μαύρα', 'Μελένια', 'Μελέτια', 'Μελίνα', 'Μελπομένη', 'Μερόπη', 'Μεταξία', 'Μηλιά', 'Μιράντα', 'Μιχαέλα', 'Μόσχα', 'Μυρσίνη',
        'Ναυσικά', 'Νεκταρία', 'Νεόκλεια', 'Νερατζιά', 'Νεφέλη', 'Νίκη', 'Νικητία', 'Νικολέτα',
        'Ξανθή', 'Ξανθίππη', 'Ξένη',
        'Οδύσσεια', 'Όλγα', 'Ολύμπια', 'Ουρανία',
        'Παγώνα', 'Παναγία', 'Παναγιώτα', 'Πανδώρα', 'Παντελία', 'Πανωραία', 'Παρασκευή', 'Παρθένα', 'Πασχαλιά', 'Παταπία', 'Παυλίνα', 'Πελαγία', 'Περιστέρα', 'Περσεφόνη', 'Πέτρα', 'Πηγή', 'Πηνελόπη', 'Ποθητή', 'Πολύβια', 'Πολύδωρα', 'Πολύμνια', 'Πολυξένη', 'Πολυτίμη', 'Πολυχρονία', 'Πούλια', 'Προδρομία',
        'Ραλλία', 'Ρέα', 'Ρεβέκκα', 'Ρεγγίνα', 'Ρηγούλα', 'Ροδιά', 'Ρόζα', 'Ρουμπίνη', 'Ρούσα', 'Ρωξάνη',
        'Σαββούλα', 'Σαλώμη', 'Σαπφώ', 'Σάρρα', 'Σεβαστή', 'Σεβαστιανή', 'Σελήνη', 'Σεμίνα', 'Σεραφεία', 'Σμαράγδα', 'Σουλτάνα', 'Σουμέλα', 'Σοφία', 'Σπάρτη', 'Σπυριδούλα', 'Σταματίνα', 'Σταυρούλα', 'Στεργιανή', 'Στεφανία', 'Στυλιανή', 'Συμεωνία', 'Σωζούσα', 'Σωτηρία', 'Σωφρονία',
        'Ταξιαρχία', 'Τατιάνα', 'Τερψιχόρη', 'Τιμοθέα', 'Τριαντάφυλλη', 'Τρισεύγενη', 'Τρυφωνία', 'Τσαμπίκα',
        'Υακίνθη', 'Υβόννη', 'Υπαπαντή',
        'Φαίδρα', 'Φανουρία', 'Φεβρωνία', 'Φερενίκη', 'Φιλαρέτη', 'Φιλίππα', 'Φιλιππία', 'Φιλιώ', 'Φιλοθέη', 'Φιλομήλα', 'Φλώρα', 'Φλωρεντία', 'Φοίβη', 'Φραντζέσκα', 'Φρειδερίκη', 'Φρύνη', 'Φωτεινή',
        'Χάιδω', 'Χαρά', 'Χαραλαμπία', 'Χάρη', 'Χαρίκλεια', 'Χιονιά', 'Χλόη', 'Χριστοδούλα', 'Χριστόφιλη', 'Χριστοφόρα', 'Χρυσάνθη', 'Χρυσαυγή', 'Χρυσαφένια', 'Χρυσοβαλάντω', 'Χρυσόστομη', 'Χρυσούλα',
    );

    protected static $firstName = array(
</codefragment>
  </duplication>
  <duplication lines="20" tokens="140">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/el_CY/Address.php" line="26"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/el_GR/Address.php" line="14"/>
    <codefragment>    protected static $country = array(
        'Ανγκόλα', 'Αζερμπαϊτζάν', 'Αίγυπτος', 'Αιθιοπία', 'Αϊτή', 'Αλβανία', 'Αλγερία', 'Αργεντινή', 'Αρμενία', 'Αυστραλία', 'Αυστρία', 'Αφγανιστάν',
        'Βέλγιο', 'Βενεζουέλα', 'Βιετνάμ', 'Βολιβία', 'Βοσνία και Ερζεγοβίνη', 'Βουλγαρία', 'Βραζιλία',
        'Γαλλία', 'Γερμανία', 'Γεωργία', 'Γροιλανδία',
        'Δανία', 'Δομινικανή Δημοκρατία',
        'Ελβετία', 'Ελλάδα', 'Ερυθραία', 'Εσθονία',
        'ΗΠΑ', 'Ηνωμένο Βασίλειο',
        'Ιαπωνία', 'Ινδία', 'Ινδονησία', 'Ιορδανία', 'Ιράκ', 'Ιράν', 'Ιρλανδία', 'Ισλανδία', 'Ισπανία', 'Ισραήλ', 'Ιταλία',
        'Καζακστάν', 'Καμπότζη', 'Καναδάς', 'Κεντροαφρικανική Δημοκρατία', 'Κένυα', 'Κίνα', 'Κιργιζία', 'Κολομβία', 'Κομόρες', 'Δημοκρατία του Κονγκό', 'Λαϊκή Δημοκρατία του Κονγκό', 'Βόρεια Κορέα', 'Νότια Κορέα', 'Κόστα Ρίκα', 'Κουβέιτ', 'Κροατία', 'Κύπρος',
        'Λάος', 'Λεττονία', 'Λευκορωσία', 'Λίβανος', 'Λιβερία', 'Λιβύη', 'Λιθουανία', 'Λουξεμβούργο',
        'Μαδαγασκάρη', 'Μαλαισία', 'Μάλτα', 'Μαρόκο', 'Μαυρίκιος', 'Μαυριτανία', 'Μαυροβούνιο', 'Μεξικό', 'Μογγολία', 'Μοζαμβίκη', 'Μολδαβία', 'Μονακό', 'Μποτσουάνα', 'Μπουρούντι', 'Μπουτάν',
        'Νέα Ζηλανδία', 'Νεπάλ', 'Νίγηρας', 'Νιγηρία', 'Νικαράγουα', 'Νορβηγία', 'Νότια Αφρική',
        'Ολλανδία', 'Ουγγαρία', 'Ουγκάντα', 'Ουζμπεκιστάν', 'Ουκρανία', 'Ουρουγουάη',
        'Πακιστάν', 'Παλαιστίνη', 'Παναμάς', 'Παραγουάη', 'Περού', 'Πολωνία', 'Πουέρτο Ρίκο', 'Πορτογαλία', 'Πρώην Γιουγκοσλαβική Δημοκρατία της Μακεδονίας',
        'Ρουάντα', 'Ρουμανία', 'Ρωσία',
        'Σαμόα', 'Σαουδική Αραβία', 'Σενεγάλη', 'Σερβία', 'Σιγκαπούρη', 'Σλοβακία', 'Σλοβενία', 'Σομαλία', 'Σουαζιλάνδη', 'Σουδάν', 'Σουηδία', 'Σουρινάμ', 'Συρία',
        'Ταϊβάν', 'Ταϊλάνδη', 'Τανζανία', 'Τατζικιστάν', 'Τζαμάικα', 'Τόγκο', 'Τόνγκα', 'Τουβαλού', 'Τουρκία', 'Τουρκμενιστάν', 'Τσεχία', 'Τυνησία',
        'Υεμένη',
        'Φιλιππίνες', 'Φινλανδία',
        'Χιλή',
</codefragment>
  </duplication>
  <duplication lines="50" tokens="124">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/lv_LV/Address.php" line="63"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/ru_RU/Address.php" line="105"/>
    <codefragment>    public static function buildingNumber()
    {
        return static::numerify(static::randomElement(static::$buildingNumber));
    }

    public function address()
    {
        $format = static::randomElement(static::$addressFormats);

        return $this-&gt;generator-&gt;parse($format);
    }

    public static function country()
    {
        return static::randomElement(static::$country);
    }

    public static function postcode()
    {
        return static::toUpper(static::bothify(static::randomElement(static::$postcode)));
    }

    public static function regionSuffix()
    {
        return static::randomElement(static::$regionSuffix);
    }

    public static function region()
    {
        return static::randomElement(static::$region);
    }

    public static function cityPrefix()
    {
        return static::randomElement(static::$cityPrefix);
    }

    public function city()
    {
        return static::randomElement(static::$city);
    }

    public static function streetPrefix()
    {
        return static::randomElement(static::$streetPrefix);
    }

    public static function street()
    {
        return static::randomElement(static::$street);
</codefragment>
  </duplication>
  <duplication lines="10" tokens="103">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/es_AR/Person.php" line="27"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/es_PE/Person.php" line="27"/>
    <codefragment>    protected static $firstNameMale = array(
        'Aarón', 'Adrián', 'Agustín', 'Alan', 'Alejandro', 'Alex', 'Alexander', 'Alonso', 'Andrés', 'Anthony', 'Antonio', 'Axel', 'Benjamín',
        'Bruno', 'Camilo', 'Carlos', 'Christian', 'Christopher', 'Cristóbal', 'Damián', 'Daniel', 'Dante', 'David', 'Diego', 'Diego Alejandro',
        'Dylan', 'Eduardo', 'Elías', 'Emiliano', 'Emilio', 'Emmanuel', 'Esteban', 'Facundo', 'Felipe', 'Fernando', 'Francisco', 'Franco',
        'Gabriel', 'Gael', 'Hipólito', 'Horacio', 'Hugo', 'Ian', 'Ignacio', 'Isaac', 'Ivan', 'Jacobo', 'Javier', 'Jerónimo',
        'Jesús', 'Joaquín', 'Jorge', 'Joshua', 'Josué', 'José', 'Juan', 'Juan David', 'Juan Diego', 'Juan José', 'Juan Manuel', 'Juan Martín',
        'Juan Pablo', 'Juan Sebastián', 'Julián', 'Kevin', 'Lautaro', 'Leonardo', 'Lorenzo', 'Lucas', 'Luciano', 'Luis', 'Manuel', 'Mario',
        'Martín', 'Mateo', 'Matthew', 'Matías', 'Maximiliano', 'Miguel', 'Miguel Ángel', 'Máximo', 'Nahuel', 'Pablo', 'Pedro', 'Rafael',
        'Ricardo', 'Rodrigo', 'Samuel', 'Santiago', 'Santino', 'Sebastián', 'Sergio', 'Simón', 'Thiago', 'Tomas', 'Valentino', 'Valentín',
        'Vicente', 'Bautista', 'Juan Esteban', 'Hidalgo'
</codefragment>
  </duplication>
  <duplication lines="11" tokens="135">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/es_AR/Person.php" line="69"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/es_PE/Person.php" line="69"/>
    <codefragment>        'Saavedra', 'Sáenz', 'Saiz', 'Salas', 'Salazar', 'Salcedo', 'Salcido', 'Saldaña', 'Saldivar', 'Salgado', 'Salinas', 'Samaniego', 'Sanabria', 'Sanches', 'Sánchez', 'Sandoval', 'Santacruz', 'Santana', 'Santiago', 'Santillán', 'Sarabia', 'Sauceda', 'Saucedo', 'Sedillo', 'Segovia', 'Segura', 'Sepúlveda', 'Serna', 'Serrano', 'Serrato', 'Sevilla', 'Sierra', 'Sisneros', 'Solano', 'Solís', 'Soliz', 'Solorio', 'Solorzano', 'Soria', 'Sosa', 'Sotelo', 'Soto', 'Suárez',
        'Tafoya', 'Tamayo', 'Tamez', 'Tapia', 'Tejada', 'Tejeda', 'Téllez', 'Tello', 'Terán', 'Terrazas', 'Tijerina', 'Tirado', 'Toledo', 'Toro', 'Torres', 'Tórrez', 'Tovar', 'Trejo', 'Treviño', 'Trujillo',
        'Ulibarri', 'Ulloa', 'Urbina', 'Ureña', 'Urías', 'Uribe', 'Urrutia',
        'Vaca', 'Valadez', 'Valdés', 'Valdez', 'Valdivia', 'Valencia', 'Valentín', 'Valenzuela', 'Valladares', 'Valle', 'Vallejo', 'Valles', 'Valverde', 'Vanegas', 'Varela', 'Vargas', 'Vásquez', 'Vázquez', 'Vega', 'Vela', 'Velasco', 'Velásquez', 'Velázquez', 'Vélez', 'Véliz', 'Venegas', 'Vera', 'Verdugo', 'Verduzco', 'Vergara', 'Viera', 'Vigil', 'Villa', 'Villagómez', 'Villalobos', 'Villalpando', 'Villanueva', 'Villareal', 'Villarreal', 'Villaseñor', 'Villegas',
        'Yáñez', 'Ybarra',
        'Zambrano', 'Zamora', 'Zamudio', 'Zapata', 'Zaragoza', 'Zarate', 'Zavala', 'Zayas', 'Zelaya', 'Zepeda', 'Zúñiga'
    );

    protected static $titleMale = array('Sr.', 'Dn.', 'Dr.', 'Lic.', 'Ing.');

    protected static $titleFemale = array('Sra.', 'Srita.', 'Dr.', 'Lic.', 'Ing.');
</codefragment>
  </duplication>
  <duplication lines="60" tokens="555">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/es_AR/Company.php" line="5"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/es_PE/Company.php" line="5"/>
    <codefragment>class Company extends \Faker\Provider\Company
{
    protected static $formats = array(
        '{{lastName}} {{companySuffix}}',
        '{{lastName}}-{{lastName}}',
        '{{lastName}} y {{lastName}}',
        '{{lastName}} de {{lastName}}',
        '{{lastName}}, {{lastName}} y {{lastName}}'
    );

    protected static $catchPhraseWords = array(
        array(
            'Adaptive', 'Advanced', 'Ameliorated', 'Assimilated', 'Automated', 'Balanced', 'Business-focused', 'Centralized', 'Cloned', 'Compatible', 'Configurable', 'Cross-group', 'Cross-platform', 'Customer-focused', 'Customizable', 'Decentralized', 'De-engineered', 'Devolved', 'Digitized', 'Distributed', 'Diverse', 'Down-sized', 'Enhanced', 'Enterprise-wide', 'Ergonomic', 'Exclusive', 'Expanded', 'Extended', 'Facetoface', 'Focused', 'Front-line', 'Fully-configurable', 'Function-based', 'Fundamental', 'Future-proofed', 'Grass-roots', 'Horizontal', 'Implemented', 'Innovative', 'Integrated', 'Intuitive', 'Inverse', 'Managed', 'Mandatory', 'Monitored', 'Multi-channelled', 'Multi-lateral', 'Multi-layered', 'Multi-tiered', 'Networked', 'Object-based', 'Open-architected', 'Open-source', 'Operative', 'Optimized', 'Optional', 'Organic', 'Organized', 'Persevering', 'Persistent', 'Phased', 'Polarised', 'Pre-emptive', 'Proactive', 'Profit-focused', 'Profound', 'Programmable', 'Progressive', 'Public-key', 'Quality-focused', 'Reactive', 'Realigned', 'Re-contextualized', 'Re-engineered', 'Reduced', 'Reverse-engineered', 'Right-sized', 'Robust', 'Seamless', 'Secured', 'Self-enabling', 'Sharable', 'Stand-alone', 'Streamlined', 'Switchable', 'Synchronised', 'Synergistic', 'Synergized', 'Team-oriented', 'Total', 'Triple-buffered', 'Universal', 'Up-sized', 'Upgradable', 'User-centric', 'User-friendly', 'Versatile', 'Virtual', 'Visionary', 'Vision-oriented'
        ),
        array(
            '24hour', '24/7', '3rdgeneration', '4thgeneration', '5thgeneration', '6thgeneration', 'actuating', 'analyzing', 'assymetric', 'asynchronous', 'attitude-oriented', 'background', 'bandwidth-monitored', 'bi-directional', 'bifurcated', 'bottom-line', 'clear-thinking', 'client-driven', 'client-server', 'coherent', 'cohesive', 'composite', 'context-sensitive', 'contextually-based', 'content-based', 'dedicated', 'demand-driven', 'didactic', 'directional', 'discrete', 'disintermediate', 'dynamic', 'eco-centric', 'empowering', 'encompassing', 'even-keeled', 'executive', 'explicit', 'exuding', 'fault-tolerant', 'foreground', 'fresh-thinking', 'full-range', 'global', 'grid-enabled', 'heuristic', 'high-level', 'holistic', 'homogeneous', 'human-resource', 'hybrid', 'impactful', 'incremental', 'intangible', 'interactive', 'intermediate', 'leadingedge', 'local', 'logistical', 'maximized', 'methodical', 'mission-critical', 'mobile', 'modular', 'motivating', 'multimedia', 'multi-state', 'multi-tasking', 'national', 'needs-based', 'neutral', 'nextgeneration', 'non-volatile', 'object-oriented', 'optimal', 'optimizing', 'radical', 'real-time', 'reciprocal', 'regional', 'responsive', 'scalable', 'secondary', 'solution-oriented', 'stable', 'static', 'systematic', 'systemic', 'system-worthy', 'tangible', 'tertiary', 'transitional', 'uniform', 'upward-trending', 'user-facing', 'value-added', 'web-enabled', 'well-modulated', 'zeroadministration', 'zerodefect', 'zerotolerance'
        ),
        array(
            'ability', 'access', 'adapter', 'algorithm', 'alliance', 'analyzer', 'application', 'approach', 'architecture', 'archive', 'artificialintelligence', 'array', 'attitude', 'benchmark', 'budgetarymanagement', 'capability', 'capacity', 'challenge', 'circuit', 'collaboration', 'complexity', 'concept', 'conglomeration', 'contingency', 'core', 'customerloyalty', 'database', 'data-warehouse', 'definition', 'emulation', 'encoding', 'encryption', 'extranet', 'firmware', 'flexibility', 'focusgroup', 'forecast', 'frame', 'framework', 'function', 'functionalities', 'GraphicInterface', 'groupware', 'GraphicalUserInterface', 'hardware', 'help-desk', 'hierarchy', 'hub', 'implementation', 'info-mediaries', 'infrastructure', 'initiative', 'installation', 'instructionset', 'interface', 'internetsolution', 'intranet', 'knowledgeuser', 'knowledgebase', 'localareanetwork', 'leverage', 'matrices', 'matrix', 'methodology', 'middleware', 'migration', 'model', 'moderator', 'monitoring', 'moratorium', 'neural-net', 'openarchitecture', 'opensystem', 'orchestration', 'paradigm', 'parallelism', 'policy', 'portal', 'pricingstructure', 'processimprovement', 'product', 'productivity', 'project', 'projection', 'protocol', 'securedline', 'service-desk', 'software', 'solution', 'standardization', 'strategy', 'structure', 'success', 'superstructure', 'support', 'synergy', 'systemengine', 'task-force', 'throughput', 'time-frame', 'toolset', 'utilisation', 'website', 'workforce'
        )
    );

    protected static $bsWords = array(
        array(
            'implement', 'utilize', 'integrate', 'streamline', 'optimize', 'evolve', 'transform', 'embrace', 'enable', 'orchestrate', 'leverage', 'reinvent', 'aggregate', 'architect', 'enhance', 'incentivize', 'morph', 'empower', 'envisioneer', 'monetize', 'harness', 'facilitate', 'seize', 'disintermediate', 'synergize', 'strategize', 'deploy', 'brand', 'grow', 'target', 'syndicate', 'synthesize', 'deliver', 'mesh', 'incubate', 'engage', 'maximize', 'benchmark', 'expedite', 'reintermediate', 'whiteboard', 'visualize', 'repurpose', 'innovate', 'scale', 'unleash', 'drive', 'extend', 'engineer', 'revolutionize', 'generate', 'exploit', 'transition', 'e-enable', 'iterate', 'cultivate', 'matrix', 'productize', 'redefine', 'recontextualize'
        ),
        array(
            'clicks-and-mortar', 'value-added', 'vertical', 'proactive', 'robust', 'revolutionary', 'scalable', 'leading-edge', 'innovative', 'intuitive', 'strategic', 'e-business', 'mission-critical', 'sticky', 'one-to-one', '24/7', 'end-to-end', 'global', 'B2B', 'B2C', 'granular', 'frictionless', 'virtual', 'viral', 'dynamic', '24/365', 'best-of-breed', 'killer', 'magnetic', 'bleeding-edge', 'web-enabled', 'interactive', 'dot-com', 'sexy', 'back-end', 'real-time', 'efficient', 'front-end', 'distributed', 'seamless', 'extensible', 'turn-key', 'world-class', 'open-source', 'cross-platform', 'cross-media', 'synergistic', 'bricks-and-clicks', 'out-of-the-box', 'enterprise', 'integrated', 'impactful', 'wireless', 'transparent', 'next-generation', 'cutting-edge', 'user-centric', 'visionary', 'customized', 'ubiquitous', 'plug-and-play', 'collaborative', 'compelling', 'holistic', 'rich'
        ),
        array(
            'synergies', 'web-readiness', 'paradigms', 'markets', 'partnerships', 'infrastructures', 'platforms', 'initiatives', 'channels', 'eyeballs', 'communities', 'ROI', 'solutions', 'e-tailers', 'e-services', 'action-items', 'portals', 'niches', 'technologies', 'content', 'vortals', 'supply-chains', 'convergence', 'relationships', 'architectures', 'interfaces', 'e-markets', 'e-commerce', 'systems', 'bandwidth', 'infomediaries', 'models', 'mindshare', 'deliverables', 'users', 'schemas', 'networks', 'applications', 'metrics', 'e-business', 'functionalities', 'experiences', 'webservices', 'methodologies'
        )
    );

    protected static $companySuffix = array('e Hijo', 'e Hija', 'e Hijos', 'y Asoc.', 'y Flia.', 'SRL', 'SA', 'S. de H.');

    /**
     * @example 'Robust full-range hub'
     */
    public function catchPhrase()
    {
        $result = array();
        foreach (static::$catchPhraseWords as &amp;$word) {
            $result[] = static::randomElement($word);
        }

        return join($result, ' ');
    }

    /**
     * @example 'integrate extensible convergence'
     */
    public function bs()
    {
        $result = array();
        foreach (static::$bsWords as &amp;$word) {
            $result[] = static::randomElement($word);
        }

        return join($result, ' ');
</codefragment>
  </duplication>
  <duplication lines="83" tokens="921">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/sr_Latn_RS/Person.php" line="29"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/sr_Latn_RS/Person.php" line="128"/>
    <codefragment>        'Agnica', 'Agnija', 'Aksentije', 'Aleksandron', 'Aleksija', 'Aleksije', 'Alimpije', 'Anastasija', 'Andrijaš', 'Ankica', 'Anđa', 'Anđela', 'Anđelija',
        'Anđelka', 'Anđelko', 'Aranđel', 'Arsa', 'Arsenije', 'Arso', 'Atanacko', 'Atanasije', 'Avakum', 'Avram', 'Aćim', 'Bajko',
        'Bajo', 'Bajčeta', 'Batrić', 'Berisav', 'Berislav', 'Beriša', 'Biljan', 'Bisenija', 'Biserka', 'Biserko', 'Blagica', 'Blaginja',
        'Blagoje', 'Blagomir', 'Blagota', 'Blaško', 'Blažen', 'Blaženka', 'Blažo', 'Bogdana', 'Bogelj', 'Bogić', 'Bogiša', 'Bogoboj',
        'Bogoje', 'Bogoljub', 'Bogosav', 'Bogoslav', 'Boica', 'Boin', 'Bojko', 'Bojčeta', 'Borisav', 'Borislava', 'Borislavka', 'Borivoje',
        'Boriša', 'Borjanka', 'Borka', 'Borko', 'Boro', 'Boroje', 'Bosa', 'Bosiljka', 'Boža', 'Božana', 'Božica', 'Božidarka',
        'Božin', 'Božinka', 'Božićko', 'Brajica', 'Branimir', 'Branislava', 'Branivoj', 'Branivoje', 'Bratimir', 'Bratislav', 'Bratislava', 'Bratoljub',
        'Bratovan', 'Brnča', 'Budimir', 'Budimirka', 'Budimka', 'Budisav', 'Budislav', 'Curko', 'Cvejan', 'Cveta', 'Cvetin', 'Cvetko',
        'Cvetoje', 'Cvetoš', 'Cvijan', 'Cvijeta', 'Cvijetin', 'Cviko', 'Cvjetko', 'Cvjetoje', 'Cvjetoš', 'Dabiša', 'Dabiživ', 'Dabo',
        'Daliborka', 'Damjanka', 'Damljan', 'Damljanka', 'Danojla', 'Dančul', 'Darije', 'Darijo', 'Darinka', 'Darjan', 'Desanka', 'Desimir',
        'Despinja', 'Despot', 'Dikosava', 'Dimitrije', 'Dimčo', 'Divna', 'Dmitar', 'Dmitra', 'Dobrašin', 'Dobrica', 'Dobrija', 'Dobrila',
        'Dobrilo', 'Dobrinka', 'Dobrinko', 'Dobrivoj', 'Dobrivoje', 'Dobrosav', 'Dobroslav', 'Dobrovuk', 'Dojčilo', 'Dojčin', 'Dokna', 'Doko',
        'Dorotej', 'Doroteja', 'Dositej', 'Dostana', 'Draga', 'Dragaš', 'Dragija', 'Draginja', 'Dragić', 'Dragiša', 'Dragobrat', 'Dragoja',
        'Dragoje', 'Dragojla', 'Dragojlo', 'Dragoljub', 'Dragoman', 'Dragomira', 'Dragorad', 'Dragosav', 'Dragoslav', 'Dragoslava', 'Dragovan', 'Dragutin',
        'Drailo', 'Drakša', 'Draško', 'Draža', 'Dražeta', 'Dražo', 'Drena', 'Drenka', 'Drinka', 'Dubravac', 'Dubravka', 'Dujak',
        'Dukadin', 'Emilijan', 'Emilije', 'Erak', 'Evdokija', 'Evgenije', 'Fema', 'Gaja', 'Gajin', 'Gajo', 'Gavra', 'Gavrila',
        'Gavrilka', 'Gavrilo', 'Gača', 'Genadije', 'Georgije', 'Gerasim', 'Gligorije', 'Gliša', 'Glišo', 'Godeč', 'Godomir', 'Golub',
        'Goranka', 'Gorica', 'Gorjana', 'Gorčin', 'Gospava', 'Gostimir', 'Gostoljub', 'Gradeta', 'Gradimir', 'Gradiša', 'Grdan', 'Grigorije',
        'Grijak', 'Grozda', 'Grozdan', 'Grozdana', 'Grubac', 'Gruban', 'Grubač', 'Grubeta', 'Grubeša', 'Grubiša', 'Gruja', 'Grujica',
        'Grujo', 'Gvozden', 'Gvozdenija', 'Gvozdenko', 'Hranimir', 'Hranislav', 'Hranislava', 'Hraniša', 'Hrastimir', 'Hristijan', 'Hristoslav', 'Hvalimir',
        'Hvalislav', 'Ignjat', 'Ignjatije', 'Ikonija', 'Ilinka', 'Isaija', 'Isailo', 'Isidor', 'Ivaniš', 'Ivko', 'Jablan', 'Jagodinka',
        'Jagoš', 'Jakša', 'Jandrija', 'Janićije', 'Janovka', 'Jasenko', 'Javorka', 'Javorko', 'Jefimija', 'Jela', 'Jelača', 'Jelašin',
        'Jelen', 'Jelenka', 'Jelenko', 'Jelica', 'Jelisava', 'Jelisavka', 'Jelisije', 'Jeremija', 'Jerotije', 'Jevdokija', 'Jevrem', 'Jevrosima',
        'Jevta', 'Jevtan', 'Jevtimije', 'Jevto', 'Jezda', 'Jezdimir', 'Joksim', 'Jorgovanka', 'Josif', 'Joviša', 'Jovka', 'Jovko',
        'Jugoljub', 'Jugomir', 'Jugoslav', 'Julijan', 'Julka', 'Junoša', 'Juriša', 'Kadivka', 'Kamenko', 'Kasija', 'Kazimir', 'Kazimira',
        'Kažimir', 'Kiprijan', 'Kirilo', 'Kojadin', 'Kojadinka', 'Kojčin', 'Kokan', 'Komnen', 'Komnenija', 'Kornelije', 'Kosana', 'Kosara',
        'Kosovka', 'Kostadinka', 'Kovana', 'Koviljka', 'Koviljko', 'Kovina', 'Kozma', 'Koča', 'Koštana', 'Kraguj', 'Kraisava', 'Krajislav',
        'Krajčin', 'Krasimir', 'Krasoje', 'Krsman', 'Krsmanija', 'Krsta', 'Krstan', 'Krstana', 'Krstina', 'Krstivoje', 'Krsto', 'Krunislav',
        'Krunoslava', 'Ksenija', 'Kumodrag', 'Kuzman', 'Labud', 'Laka', 'Laketa', 'Lako', 'Latinka', 'Laza', 'Leonida', 'Lepa',
        'Lepoje', 'Lepomir', 'Leposava', 'Leposlav', 'Ležimir', 'Ljepava', 'Ljeposava', 'Ljilja', 'Ljiljan', 'Ljuban', 'Ljuben', 'Ljubenko',
        'Ljubinko', 'Ljubisav', 'Ljubislav', 'Ljubivoje', 'Ljubiša', 'Ljubo', 'Ljubobrat', 'Ljubodrag', 'Ljuboja', 'Ljuboje', 'Ljubomir', 'Ljubomirka',
        'Ljubosava', 'Lozan', 'Lujo', 'Manduša', 'Manojlo', 'Matijaš', 'Mavren', 'Mašan', 'Maško', 'Medak', 'Mijailo', 'Mijak',
        'Mijan', 'Mijana', 'Mijat', 'Mijobrat', 'Mijuško', 'Miladija', 'Milak', 'Milanko', 'Milat', 'Milaš', 'Milašin', 'Milentije',
        'Milesa', 'Mileta', 'Mileva', 'Milijan', 'Milijaš', 'Milina', 'Milinko', 'Milisav', 'Milisava', 'Milisavka', 'Milivoj', 'Milivoje',
        'Milić', 'Milj', 'Miljen', 'Miljka', 'Miljko', 'Miljojko', 'Miljurko', 'Milkica', 'Miloja', 'Milojica', 'Milojka', 'Milojko',
        'Milomir', 'Milosav', 'Milosava', 'Milosavka', 'Milovan', 'Milten', 'Miluka', 'Milun', 'Milunka', 'Milutin', 'Miluš', 'Miluša',
        'Miomirka', 'Miroljub', 'Mirosav', 'Mirosava', 'Mirčeta', 'Mitar', 'Mićan', 'Mišljen', 'Mlađan', 'Mlađen', 'Mojsilo', 'Momir',
        'Momčilo', 'Mrkša', 'Mrđan', 'Mrđen', 'Nadica', 'Najdan', 'Naum', 'Nedeljka', 'Nedeljko', 'Negomir', 'Negovan', 'Nevenko',
        'Neđeljka', 'Neđeljko', 'Neško', 'Nikašin', 'Nikodije', 'Nikodim', 'Nikolija', 'Nikša', 'Ninko', 'Ninoslav', 'Nićifor', 'Nišava',
        'Njegomir', 'Njegomirka', 'Njegoslava', 'Njegoš', 'Novica', 'Noviša', 'Novka', 'Novko', 'Obrad', 'Obradin', 'Obradinka', 'Obren',
        'Obrenija', 'Obrenko', 'Obreten', 'Ognjan', 'Ognjana', 'Olja', 'Ostoja', 'Ozriša', 'Pantelija', 'Paun', 'Pauna', 'Pava',
        'Pavija', 'Pavić', 'Pavko', 'Pavle', 'Pavlija', 'Pavlić', 'Pejak', 'Pejo', 'Pelagija', 'Pera', 'Periša', 'Persida',
        'Perun', 'Perunko', 'Petak', 'Petoje', 'Petoš', 'Petrašin', 'Petrija', 'Petronije', 'Plavša', 'Poznan', 'Poznana', 'Prerad',
        'Pribić', 'Prodan', 'Prodana', 'Prokopije', 'Prvoslav', 'Punan', 'Puniša', 'Pureš', 'Purko', 'Puro', 'Racko', 'Radak',
        'Radan', 'Radana', 'Radas', 'Radašin', 'Radeta', 'Radica', 'Radinka', 'Radinko', 'Radisav', 'Radivoj', 'Radivoje', 'Radič',
        'Radiša', 'Radman', 'Radna', 'Radoba', 'Radobud', 'Radoja', 'Radoje', 'Radojica', 'Radojko', 'Radojlo', 'Radoman', 'Radonja',
        'Radosav', 'Radoslava', 'Radota', 'Radovac', 'Radoš', 'Raduka', 'Radukan', 'Radul', 'Radula', 'Radulin', 'Radun', 'Radunka',
        'Radusin', 'Rafailo', 'Raica', 'Raič', 'Raičko', 'Rajak', 'Rajka', 'Rajna', 'Rajčeta', 'Ralen', 'Raleta', 'Ranisav',
        'Ranka', 'Raosav', 'Rastko', 'Ratibor', 'Ratko', 'Ratomir', 'Račeta', 'Rađen', 'Raško', 'Rekula', 'Relja', 'Rista',
        'Ristan', 'Ristivoje', 'Rodoljub', 'Roksanda', 'Samuilo', 'Savka', 'Savko', 'Savo', 'Sazdana', 'Sekana', 'Sekula', 'Selak',
        'Simana', 'Simeun', 'Simeuna', 'Simka', 'Simonida', 'Sinđa', 'Sinđel', 'Skorosav', 'Skorosava', 'Sladoje', 'Slaven', 'Slavenko',
        'Slavna', 'Slavo', 'Slavojka', 'Slavuj', 'Slađan', 'Slađana', 'Slobodanka', 'Smilja', 'Smiljan', 'Smiljana', 'Smiljka', 'Smiljko',
        'Smoljan', 'Smoljana', 'Smoljka', 'Soka', 'Soko', 'Spasenija', 'Spasoja', 'Spiridon', 'Spomenka', 'Srbijanka', 'Srbislav', 'Srboljub',
        'Srboslav', 'Srdan', 'Sredoja', 'Sredoje', 'Sreten', 'Sretko', 'Srećan', 'Srđa', 'Srđan', 'Stajka', 'Staka', 'Stamena',
        'Stamenka', 'Stamenko', 'Stanava', 'Stanača', 'Stanica', 'Stanija', 'Stanisav', 'Stanisava', 'Staniša', 'Stanoja', 'Stanojka', 'Stanojko',
        'Stanojla', 'Stanojlo', 'Staša', 'Stevica', 'Stoin', 'Stoisava', 'Stoić', 'Stoja', 'Stojadin', 'Stojak', 'Stojan', 'Stojana',
        'Stojanka', 'Stojka', 'Stojko', 'Stojmen', 'Stojna', 'Stojša', 'Strainja', 'Svetibor', 'Svetislava', 'Svetolik', 'Svetoljub', 'Svetomir',
        'Svetorad', 'Svetozar', 'Svjetlana', 'Tadija', 'Tanacko', 'Tanasije', 'Tankosa', 'Tankosava', 'Tatomir', 'Teodosije', 'Teofil', 'Tešan',
        'Timotije', 'Todora', 'Toma', 'Tomanija', 'Toplica', 'Trajan', 'Trajko', 'Trifun', 'Tripko', 'Tripun', 'Trivun', 'Tvrtko',
        'Ubavka', 'Uglješa', 'Umiljen', 'Utešen', 'Utješen', 'Vajo', 'Vasilija', 'Vasilije', 'Vasilj', 'Vasiljka', 'Vaskrsija', 'Vaskrsije',
        'Vasoje', 'Vekoslav', 'Veliborka', 'Velinka', 'Velisav', 'Velisava', 'Velizar', 'Veličko', 'Veljko', 'Veran', 'Veroljub', 'Veroslava',
        'Veselinka', 'Vesko', 'Vid', 'Vidak', 'Vidan', 'Vidač', 'Viden', 'Vidoja', 'Vidoje', 'Vidojka', 'Vidojko', 'Vidosav',
        'Vidosava', 'Vilotije', 'Vitka', 'Vitko', 'Vitomir', 'Vitomirka', 'Vićan', 'Vićentije', 'Višeslav', 'Višeslava', 'Vjekoslav', 'Vladana',
        'Vlade', 'Vladeta', 'Vladica', 'Vladimirka', 'Vladisav', 'Vladislava', 'Vladoje', 'Vladun', 'Vlaislav', 'Vlajko', 'Vlasije', 'Vlastimirka',
        'Vlatka', 'Vlaško', 'Voica', 'Vojdrag', 'Vojimir', 'Vojin', 'Vojislav', 'Vojislava', 'Vojka', 'Vojkan', 'Vojko', 'Vraneš',
        'Vugdrag', 'Vuica', 'Vuilo', 'Vuin', 'Vujadin', 'Vujadinka', 'Vujak', 'Vujan', 'Vujana', 'Vujeta', 'Vujka', 'Vujko',
        'Vujo', 'Vujčeta', 'Vujčin', 'Vukac', 'Vukadin', 'Vukajlo', 'Vukalj', 'Vukalo', 'Vukana', 'Vukas', 'Vukač', 'Vukašin',
        'Vukelja', 'Vukica', 'Vukić', 'Vukman', 'Vukmilj', 'Vukmir', 'Vukmira', 'Vuko', 'Vukoje', 'Vukojica', 'Vukola', 'Vukoman',
        'Vukomir', 'Vukosav', 'Vukosava', 'Vukoslav', 'Vukota', 'Vukovoje', 'Vuksan', 'Vukša', 'Vule', 'Vuleta', 'Vunko', 'Vuzman',
        'Vuča', 'Vučan', 'Vučen', 'Vučeta', 'Vučina', 'Vučić', 'Vučko', 'Zagorka', 'Zaharije', 'Zarija', 'Zarije', 'Zavida',
        'Zaviša', 'Zdraviša', 'Zlata', 'Zlatan', 'Zlatana', 'Zlatibor', 'Zlatica', 'Zlatija', 'Zlatoje', 'Zlatomir', 'Zlatomirka', 'Zlatosav',
        'Zorislava', 'Zorka', 'Zrinka', 'Zrinko', 'Zvezdan', 'Zvezdana', 'Zvezdodrag', 'Zvezdoslav', 'Zvjezdan', 'Zvjezdana', 'Zvonka', 'Ćerana',
        'Ćirjak', 'Ćirko', 'Čarna', 'Časlav', 'Čedomir', 'Čubrilo', 'Đenadije', 'Đoko', 'Đorđe', 'Đorđije', 'Đorđo', 'Đuka',
        'Đukan', 'Đura', 'Đurađ', 'Đurašin', 'Đurica', 'Đurisav', 'Đurisava', 'Đurko', 'Đuro', 'Đurđe', 'Đurđevka', 'Đurđica',
        'Đurđija', 'Šakota', 'Šale', 'Šumenko', 'Šutan', 'Žanka', 'Žarko', 'Želimirka', 'Željana', 'Žika', 'Žikica', 'Žitomir',
        'Živadin', 'Živadinka', 'Živan', 'Živana', 'Živanka', 'Živanko', 'Živica', 'Živka', 'Živko', 'Živodarka', 'Živojin', 'Živoljub',
        'Živomir', 'Živorad', 'Živoratka', 'Živoslava', 'Živoslavka', 'Života',
    );

    protected static $firstNameFemale = array(
        'Adelina', 'Aleksandra', 'Ana', 'Anda', 'Andreja', 'Andrijana', 'Angelina', 'Anica', 'Anka', 'Antonina', 'Biljana', 'Bogdanka', 'Bojana',
        'Borjana', 'Branka', 'Brankica', 'Dafina', 'Dana', 'Danica', 'Danka', 'Dara', 'Davorka', 'Daša', 'Dejana', 'Desa',
        'Despina', 'Deva', 'Dragana', 'Dragica', 'Drina', 'Duka', 'Dunja', 'Dušanka', 'Dušica', 'Duška', 'Ekaterina', 'Elena',
</codefragment>
  </duplication>
  <duplication lines="86" tokens="1024">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/ro_RO/Person.php" line="4"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/ro_MD/Person.php" line="4"/>
    <codefragment>class Person extends \Faker\Provider\Person
{
    // http://en.wikipedia.org/wiki/Romanian_name, prefixes are for more formal purposes
    protected static $maleNameFormats = array(
        '{{firstNameMale}} {{lastName}}',
        '{{firstNameMale}} {{lastName}}',
        '{{firstNameMale}} {{lastName}}',
        '{{titleMale}} {{firstNameMale}} {{lastName}}',
    );

    protected static $femaleNameFormats = array(
        '{{firstNameFemale}} {{lastName}}',
        '{{firstNameFemale}} {{lastName}}',
        '{{firstNameFemale}} {{lastName}}',
        '{{titleFemale}} {{firstNameFemale}} {{lastName}}'
    );

    //http://ro.wikipedia.org/wiki/List%C4%83_de_prenume_rom%C3%A2ne%C8%99ti#Feminine
    protected static $firstNameFemale = array(
        'Ada', 'Adela', 'Adelaida', 'Adelina', 'Adina', 'Adriana', 'Agata', 'Aglaia', 'Agripina', 'Aida', 'Alberta', 'Albertina', 'Alexandra', 'Alexandrina', 'Alida', 'Alina', 'Alice', 'Alis', 'Alma',
        'Amalia', 'Amelia', 'Amanda', 'Ana', 'Anabela', 'Anaida', 'Anamaria', 'Anastasia', 'Anca', 'Ancuța', 'Anda', 'Andra', 'Andrada', 'Andreea', 'Anemona', 'Aneta', 'Angela', 'Anghelina', 'Anica',
        'Anișoara', 'Antoaneta', 'Antonia', 'Antonela', 'Anuța', 'Ariadna', 'Ariana', 'Arina', 'Aristița', 'Artemisa', 'Astrid', 'Atena', 'Augustina', 'Aura', 'Aurelia', 'Aureliana', 'Aurica', 'Aurora',
        'Beatrice', 'Betina', 'Bianca', 'Blanduzia', 'Bogdana', 'Brândușa', 'Camelia', 'Carina', 'Carla', 'Carmen', 'Carmina', 'Carolina', 'Casandra', 'Casiana', 'Caterina', 'Catinca', 'Catrina', 'Catrinel',
        'Cătălina', 'Cecilia', 'Celia', 'Cerasela', 'Cezara', 'Cipriana', 'Clara', 'Clarisa', 'Claudia', 'Clementina', 'Cleopatra', 'Codrina', 'Codruța', 'Constantina', 'Constanța', 'Consuela', 'Coralia',
        'Corina', 'Cornelia', 'Cosmina', 'Crenguța', 'Crina', 'Cristina', 'Daciana', 'Dafina', 'Daiana', 'Dalia', 'Dana', 'Daniela', 'Daria', 'Dariana', 'Delia', 'Demetra', 'Denisa', 'Despina', 'Diana',
        'Dida', 'Didina', 'Dimitrina', 'Dina', 'Dochia', 'Doina', 'Domnica', 'Dora', 'Doriana', 'Dorina', 'Dorli', 'Draga', 'Dumitra', 'Dumitrana', 'Ecaterina', 'Eftimia', 'Elena', 'Eleonora', 'Eliana',
        'Elisabeta', 'Elisaveta', 'Eliza', 'Elodia', 'Elvira', 'Emilia', 'Emanuela', 'Erica', 'Estera', 'Eufrosina', 'Eugenia', 'Eusebia', 'Eva', 'Evanghelina', 'Evelina', 'Fabia', 'Fabiana', 'Felicia',
        'Filofteia', 'Fiona', 'Flavia', 'Floare', 'Floarea', 'Flora', 'Floriana', 'Florica', 'Florina', 'Florentina', 'Florența', 'Francesca', 'Frusina', 'Gabriela', 'Geanina', 'Gențiana', 'Georgeta',
        'Georgia', 'Georgiana', 'Geta', 'Gherghina', 'Gianina', 'Gina', 'Giorgiana', 'Grațiana', 'Grațiela', 'Hortensia', 'Henrieta', 'Heracleea', 'Iasmina', 'Ica', 'Ileana', 'Ilinca', 'Ilona', 'Ina',
        'Ioana', 'Ioanina', 'Iolanda', 'Ionela', 'Ionelia', 'Iosefina', 'Irina', 'Iridenta', 'Iris', 'Isabela', 'Iulia', 'Iuliana', 'Iustina', 'Ivona', 'Izabela', 'Jana', 'Janeta', 'Janina', 'Jasmina',
        'Jeana', 'Julia', 'Julieta', 'Larisa', 'Laura', 'Laurenția', 'Lavinia', 'Lăcrămioara', 'Leana', 'Lelia', 'Leontina', 'Leopoldina', 'Letiția', 'Lia', 'Liana', 'Lidia', 'Ligia', 'Lili', 'Liliana',
        'Lioara', 'Livia', 'Loredana', 'Lorelei', 'Lorena', 'Luana', 'Lucia', 'Luciana', 'Lucreția', 'Ludovica', 'Ludmila', 'Luiza', 'Luminița', 'Magdalena', 'Maia', 'Manuela', 'Mara', 'Marcela', 'Marga',
        'Margareta', 'Marcheta', 'Maria', 'Mariana', 'Maricica', 'Marilena', 'Marina', 'Marinela', 'Marioara', 'Marta', 'Matilda', 'Malvina', 'Mădălina', 'Mălina', 'Mărioara', 'Măriuca', 'Melania', 'Melina',
        'Mihaela', 'Milena', 'Mina', 'Minodora', 'Mioara', 'Mirabela', 'Mirela', 'Mirona', 'Miruna', 'Mona', 'Monalisa', 'Monica', 'Nadia', 'Narcisa', 'Natalia', 'Natașa', 'Noemi', 'Nicoleta', 'Niculina',
        'Nidia', 'Nora', 'Norica', 'Oana', 'Octavia', 'Octaviana', 'Ofelia', 'Olga', 'Olimpia', 'Olivia', 'Ortansa', 'Otilia', 'Ozana', 'Pamela', 'Paraschiva', 'Paula', 'Paulica', 'Paulina', 'Patricia',
        'Petronela', 'Petruța', 'Pompilia', 'Profira', 'Rada', 'Rafila', 'Raluca', 'Ramona', 'Rebeca', 'Renata', 'Rica', 'Roberta', 'Robertina', 'Rodica', 'Romanița', 'Romina', 'Roza', 'Rozalia', 'Roxana',
        'Roxelana', 'Ruxanda', 'Ruxandra', 'Sabina', 'Sabrina', 'Safta', 'Salomea', 'Sanda', 'Saveta', 'Savina', 'Sânziana', 'Semenica', 'Severina', 'Sidonia', 'Silvia', 'Silvana', 'Silviana',
        'Simina', 'Simona', 'Smaranda', 'Sofia', 'Sonia', 'Sorana', 'Sorina', 'Speranța', 'Stana', 'Stanca', 'Stela', 'Steliana', 'Steluța', 'Suzana', 'Svetlana', 'Ștefana', 'Ștefania', 'Tamara', 'Tania',
        'Tatiana', 'Teea', 'Teodora', 'Teodosia', 'Teona', 'Tiberia', 'Timea', 'Tinca', 'Tincuța', 'Tudora', 'Tudorița', 'Tudosia', 'Valentina', 'Valeria', 'Vanesa', 'Varvara', 'Vasilica', 'Venera', 'Vera',
        'Veronica', 'Veta', 'Vicenția', 'Victoria', 'Violeta', 'Viorela', 'Viorica', 'Virginia', 'Viviana', 'Voichița', 'Xenia', 'Zaharia', 'Zamfira', 'Zaraza', 'Zenobia', 'Zenovia', 'Zina', 'Zoe'
    );

    //http://ro.wikipedia.org/wiki/List%C4%83_de_prenume_rom%C3%A2ne%C8%99ti#Feminine
    protected static $firstNameMale = array(
        'Achim', 'Adam', 'Adelin', 'Adonis', 'Adrian', 'Adi', 'Agnos', 'Albert', 'Alex', 'Alexandru', 'Alexe', 'Aleodor', 'Alin', 'Alistar', 'Amedeu', 'Amza', 'Anatolie', 'Andrei', 'Angel', 'Anghel', 'Antim',
        'Anton', 'Antonie', 'Antoniu', 'Arian', 'Aristide', 'Arsenie', 'Augustin', 'Aurel', 'Aurelian', 'Aurică', 'Avram', 'Axinte', 'Barbu', 'Bartolomeu', 'Basarab', 'Bănel', 'Bebe', 'Beniamin', 'Benone',
        'Bernard', 'Bogdan', 'Brăduț', 'Bucur', 'Caius', 'Camil', 'Cantemir', 'Carol', 'Casian', 'Cazimir', 'Călin', 'Cătălin', 'Cedrin', 'Cezar', 'Ciprian', 'Claudiu', 'Codin', 'Codrin', 'Codruț', 'Cornel',
        'Corneliu', 'Corvin', 'Constantin', 'Cosmin', 'Costache', 'Costel', 'Costin', 'Crin', 'Cristea', 'Cristian', 'Cristobal', 'Cristofor', 'Dacian', 'Damian', 'Dan', 'Daniel', 'Darius', 'David',
        'Decebal', 'Denis', 'Dinu', 'Dominic', 'Dorel', 'Dorian', 'Dorin', 'Dorinel', 'Doru', 'Dragoș', 'Ducu', 'Dumitru', 'Edgar', 'Edmond', 'Eduard', 'Eftimie', 'Emil', 'Emilian', 'Emanoil', 'Emanuel',
        'Emanuil', 'Eremia', 'Eric', 'Ernest', 'Eugen', 'Eusebiu', 'Eustațiu', 'Fabian', 'Felix', 'Filip', 'Fiodor', 'Flaviu', 'Florea', 'Florentin', 'Florian', 'Florin', 'Francisc', 'Frederic',
        'Gabi', 'Gabriel', 'Gelu', 'George', 'Georgel', 'Georgian', 'Ghenadie', 'Gheorghe', 'Gheorghiță', 'Ghiță', 'Gică', 'Gicu', 'Giorgian', 'Grațian', 'Gregorian', 'Grigore',
        'Haralamb', 'Haralambie', 'Horațiu', 'Horea', 'Horia', 'Iacob', 'Iancu', 'Ianis', 'Ieremia', 'Ilarie', 'Ilarion', 'Ilie', 'Inocențiu', 'Ioan', 'Ion', 'Ionel', 'Ionică', 'Ionuț', 'Iosif', 'Irinel',
        'Iulian', 'Iuliu', 'Iurie', 'Iustin', 'Iustinian', 'Ivan', 'Jan', 'Jean', 'Jenel', 'Ladislau', 'Lascăr', 'Laurențiu', 'Laurian', 'Lazăr', 'Leonard', 'Leontin', 'Lică', 'Liviu', 'Lorin', 'Luca',
        'Lucențiu', 'Lucian', 'Lucrețiu', 'Ludovic', 'Manole', 'Marcel', 'Marcu', 'Marian', 'Marin', 'Marius', 'Martin', 'Matei', 'Maxim', 'Maximilian', 'Mădălin', 'Mihai', 'Mihail', 'Mihnea', 'Mircea',
        'Miron', 'Mitică', 'Mitruț', 'Mugur', 'Mugurel', 'Nae', 'Narcis', 'Nechifor', 'Nelu', 'Nichifor', 'Nicoară', 'Nicodim', 'Nicolae', 'Nicolaie', 'Nicu', 'Nicuță', 'Niculiță', 'Nicușor', 'Norbert',
        'Norman', 'Octav', 'Octavian', 'Octaviu', 'Olimpian', 'Olimpiu', 'Oliviu', 'Ovidiu', 'Pamfil', 'Panait', 'Panagachie', 'Paul', 'Pavel', 'Pătru', 'Petre', 'Petrică', 'Petrișor', 'Petru', 'Petruț',
        'Pompiliu', 'Radu', 'Rafael', 'Rareș', 'Raul', 'Răducu', 'Răzvan', 'Relu', 'Remus', 'Robert', 'Romeo', 'Romulus', 'Sabin', 'Sandu', 'Sava', 'Sebastian', 'Sergiu', 'Sever', 'Severin', 'Silvian',
        'Silviu', 'Simi', 'Simion', 'Sinică', 'Sorin', 'Stan', 'Stancu', 'Stelian', 'Sandu', 'Șerban', 'Ștefan', 'Teodor', 'Teofil', 'Teohari', 'Theodor', 'Tiberiu', 'Timotei', 'Titus', 'Todor', 'Toma',
        'Traian', 'Tudor', 'Valentin', 'Valeriu', 'Valter', 'Vasile', 'Vasilică', 'Veniamin', 'Vicențiu', 'Victor', 'Vincențiu', 'Viorel', 'Visarion', 'Vlad', 'Vladimir', 'Vlaicu', 'Voicu', 'Zamfir', 'Zeno'
    );

    //courtesy of Florin LIPAN, at nume.ottomotor.ro
    protected static $lastName = array(
        'Achim', 'Adam', 'Albu', 'Aldea', 'Alexa', 'Alexandrescu', 'Alexandru', 'Alexe', 'Andrei', 'Anghel', 'Antal', 'Anton', 'Apostol', 'Ardelean', 'Ardeleanu', 'Avram',
        'Baciu', 'Badea', 'Balan', 'Balint', 'Banica', 'Banu', 'Barbu', 'Barbulescu', 'Bejan', 'Biro', 'Blaga', 'Boboc', 'Bodea', 'Bogdan', 'Bota', 'Botezatu', 'Bratu', 'Bucur', 'Buda', 'Bunea', 'Burlacu',
        'Calin', 'Catana', 'Cazacu', 'Chiriac', 'Chirila', 'Chirita', 'Chis', 'Chivu', 'Ciobanu', 'Ciocan', 'Cojocaru', 'Coman', 'Constantin', 'Constantinescu', 'Cornea', 'Cosma', 'Costache',
        'Costea', 'Costin', 'Covaci', 'Cozma', 'Craciun', 'Cretu', 'Crisan', 'Cristea', 'Cristescu', 'Croitoru', 'Cucu',
        'Damian', 'Dan', 'Danciu', 'Danila', 'Dascalu', 'David', 'Diaconescu', 'Diaconu', 'Dima', 'Dinca', 'Dinu', 'Dobre', 'Dobrescu', 'Dogaru', 'Dragan', 'Draghici',
        'Dragoi', 'Dragomir', 'Dumitrache', 'Dumitrascu', 'Dumitrescu', 'Dumitriu', 'Dumitru', 'Duta',
        'Enache', 'Ene', 'Farcas', 'Filimon', 'Filip', 'Florea', 'Florescu', 'Fodor', 'Fratila',
        'Gabor', 'Gal', 'Ganea', 'Gavrila', 'Georgescu', 'Gheorghe', 'Gheorghita', 'Gheorghiu', 'Gherman', 'Ghita', 'Giurgiu', 'Grecu', 'Grigoras', 'Grigore', 'Grigorescu', 'Grosu', 'Groza',
        'Horvath', 'Iacob', 'Iancu', 'Ichim', 'Ignat', 'Ilie', 'Iliescu', 'Ion', 'Ionescu', 'Ionita', 'Iordache', 'Iorga', 'Iosif', 'Irimia', 'Ispas', 'Istrate', 'Ivan', 'Ivascu',
        'Kiss', 'Kovacs', 'Lazar', 'Luca', 'Lungu', 'Lupu', 'Macovei', 'Maftei', 'Man', 'Manea', 'Manolache', 'Manole', 'Marcu', 'Marginean', 'Marian', 'Marin', 'Marinescu', 'Martin', 'Mateescu',
        'Matei', 'Maxim', 'Mazilu', 'Micu', 'Mihai', 'Mihaila', 'Mihailescu', 'Mihalache', 'Mihalcea', 'Milea', 'Militaru', 'Mircea', 'Mirea', 'Miron', 'Miu', 'Mocanu', 'Moga', 'Moise', 'Moldovan',
        'Moldoveanu', 'Molnar', 'Morar', 'Moraru', 'Muntean', 'Munteanu', 'Muresan', 'Musat', 'Nagy', 'Nastase', 'Neacsu', 'Neagoe', 'Neagu', 'Neamtu', 'Nechita', 'Necula', 'Nedelcu',
        'Negoita', 'Negrea', 'Negru', 'Nemes', 'Nica', 'Nicoara', 'Nicolae', 'Nicolescu', 'Niculae', 'Niculescu', 'Nistor', 'Nita', 'Nitu',
        'Oancea', 'Olariu', 'Olaru', 'Oltean', 'Olteanu', 'Oprea', 'Opris', 'Paduraru', 'Pana', 'Panait', 'Paraschiv', 'Parvu', 'Pasca', 'Pascu', 'Patrascu', 'Paun', 'Pavel', 'Petcu', 'Peter',
        'Petre', 'Petrea', 'Petrescu', 'Pintea', 'Pintilie', 'Pirvu', 'Pop', 'Popa', 'Popescu', 'Popovici', 'Preda', 'Prodan', 'Puiu', 'Radoi', 'Radu', 'Radulescu', 'Roman', 'Rosca', 'Rosu',
        'Rotaru', 'Rus', 'Rusu', 'Sabau', 'Sandor', 'Sandu', 'Sarbu', 'Sava', 'Savu', 'Serban', 'Sima', 'Simion', 'Simionescu', 'Simon', 'Sirbu', 'Soare', 'Solomon', 'Staicu', 'Stan',
        'Stanciu', 'Stancu', 'Stanescu', 'Stefan', 'Stefanescu', 'Stoian', 'Stoica', 'Stroe', 'Suciu', 'Szabo', 'Szasz', 'Szekely', 'Tamas', 'Tanase', 'Tataru', 'Teodorescu', 'Toader',
        'Toma', 'Tomescu', 'Toth', 'Trandafir', 'Trif', 'Trifan', 'Tudor', 'Tudorache', 'Tudose', 'Turcu', 'Ungureanu', 'Ursu', 'Vaduva', 'Varga', 'Vasile', 'Vasilescu', 'Vasiliu', 'Veres',
        'Vintila', 'Visan', 'Vlad', 'Voicu', 'Voinea', 'Zaharia', 'Zamfir'
    );

    protected static $titleMale = array('dl.', 'ing.', 'dr.');
    protected static $titleFemale = array('d-na.', 'd-șoara', 'ing.', 'dr.');
</codefragment>
  </duplication>
  <duplication lines="36" tokens="224">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/ro_RO/Address.php" line="68"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/ro_MD/Address.php" line="48"/>
    <codefragment>    protected static $country = array(
        'Afganistan', 'Africa de Sud', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Antigua și Barbuda', 'Arabia Saudită', 'Argentina', 'Armenia', 'Australia', 'Austria', 'Azerbaidjan',
        'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgia', 'Belize', 'Benin', 'Bhutan', 'Birmania', 'Bolivia', 'Bosnia și Herțegovina', 'Botswana', 'Brazilia', 'Brunei', 'Bulgaria',
        'Burkina Faso', 'Burundi', 'Cambodgia', 'Camerun', 'Canada', 'Capul Verde', 'Cehia', 'Republica Centrafricană', 'Chile', 'Republica Populară Chineză', 'Ciad', 'Cipru', 'Columbia', 'Comore',
        'Republica Democrată Congo', 'Republica Congo', 'Coreea de Nord', 'Coreea de Sud', 'Costa Rica', 'Coasta de Fildeș', 'Croația', 'Cuba', 'Danemarca', 'Djibouti', 'Dominica',
        'Republica Dominicană', 'Ecuador', 'Egipt', 'El Salvador', 'Elveția', 'Emiratele Arabe Unite', 'Eritreea', 'Estonia', 'Etiopia', 'Fiji', 'Filipine', 'Finlanda', 'Franța', 'Gabon', 'Gambia',
        'Georgia', 'Germania', 'Ghana', 'Grecia', 'Grenada', 'Guatemala', 'Guineea', 'Guineea-Bissau', 'Guineea Ecuatorială', 'Guyana', 'Haiti', 'Honduras',
        'India', 'Indonezia', 'Iordania', 'Irak', 'Iran', 'Republica Irlanda', 'Islanda', 'Israel', 'Italia', 'Jamaica', 'Japonia', 'Kazahstan', 'Kenya', 'Kirghizstan', 'Kiribati', 'Kuweit',
        'Laos', 'Lesotho', 'Letonia', 'Liban', 'Liberia', 'Libia', 'Liechtenstein', 'Lituania', 'Luxemburg', 'Republica Macedonia', 'Madagascar', 'Malawi', 'Malaezia', 'Maldive', 'Mali', 'Malta',
        'Maroc', 'Insulele Marshall', 'Mauritania', 'Mauritius', 'Mexic', 'Statele Federate ale Microneziei', 'Republica Moldova', 'Monaco', 'Mongolia', 'Mozambic', 'Muntenegru', 'Namibia', 'Nauru',
        'Nepal', 'Nicaragua', 'Niger', 'Nigeria', 'Norvegia', 'Noua Zeelandă', 'Olanda', 'Oman', 'Pakistan', 'Palau', 'Panama', 'Papua Noua Guinee', 'Paraguay', 'Peru', 'Polonia', 'Portugalia',
        'Qatar', 'Regatul Unit', 'România', 'Rusia', 'Rwanda', 'Samoa', 'San Marino', 'São Tomé și Príncipe', 'São Tomé e Príncipe', 'Senegal', 'Serbia', 'Seychelles', 'Sfânta Lucia',
        'Sfântul Cristofor și Nevis', 'Saint Vincent and the Grenadines', 'Sierra Leone', 'Singapore', 'Siria', 'Slovacia', 'Slovenia', 'Insulele Solomon', 'Somalia', 'Spania', 'Sri Lanka',
        'Statele Unite ale Americii', 'Sudan', 'Sudanul de Sud', 'Suedia', 'Surinam', 'Swaziland', 'Tadjikistan', 'Tanzania', 'Thailanda', 'Timorul de Est', 'Togo', 'Tonga', 'Trinidad-Tobago',
        'Tunisia', 'Turcia', 'Turkmenistan', 'Tuvalu', 'Ucraina', 'Uganda', 'Ungaria', 'Uruguay', 'Uzbekistan', 'Vanuatu', 'Vatican', 'Venezuela', 'Vietnam', 'Yemen', 'Zambia', 'Zimbabwe'
    );

    protected static $cityFormats = array(
        '{{cityName}}',
        'Mun. {{cityName}}',
    );

    protected static $streetNameFormats = array(
        '{{streetPrefix}} {{streetPlainName}}',
    );

    protected static $streetAddressFormats = array(
        '{{streetName}} {{buildingNumber}}',
        '{{streetName}} {{buildingNumber}}',
        '{{streetName}} {{buildingNumber}}',
        '{{streetName}} nr. {{buildingNumber}}, bl. {{block}}, ap. {{apartmentNumber}}',
        '{{streetName}} nr. {{buildingNumber}}, bl. {{block}}, et. {{floor}}, ap. {{apartmentNumber}}',
        '{{streetName}} nr. {{buildingNumber}}, bl. {{block}}, sc. {{blockSegment}}, et. {{floor}}, ap. {{apartmentNumber}}',
    );

    protected static $addressFormats = array(
</codefragment>
  </duplication>
  <duplication lines="49" tokens="101">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/ro_RO/Address.php" line="107"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/ro_MD/Address.php" line="87"/>
    <codefragment>    public function cityName()
    {
        return static::randomElement(static::$cityNames);
    }

    public static function block()
    {
        return static::numerify(static::randomElement(static::$block));
    }

    public function blockSegment()
    {
        return static::randomElement(static::$blockSegment);
    }

    public static function floor()
    {
        return static::numerify(static::randomElement(static::$floor));
    }

    public static function apartmentNumber()
    {
        return static::numerify(static::randomElement(static::$apartmentNumber));
    }

    public function streetPrefix()
    {
        return static::randomElement(static::$streetPrefix);
    }

    /**
     * @example 'Independenței'
     */
    public function streetPlainName()
    {
        return static::randomElement(static::$streetPlainName);
    }

    /**
     * @example 'Splaiul Independenței'
     */
    public function streetName()
    {
        $format = static::randomElement(static::$streetNameFormats);

        return $this-&gt;generator-&gt;parse($format);
    }

    /**
</codefragment>
  </duplication>
  <duplication lines="19" tokens="1481">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/sr_Latn_RS/Person.php" line="210"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/me_ME/Person.php" line="73"/>
    <codefragment>    protected static $lastName = array(
        'Abadžić', 'Abdulić', 'Abramić', 'Avalić', 'Avdulić', 'Avrić', 'Aguridić', 'Adamić', 'Azarić', 'Ajdačić', 'Ajdučić', 'Aksentić', 'Aksić', 'Alavantić', 'Aladić', 'Alargić', 'Albijanić', 'Aleksandrić', 'Aleksendrić', 'Aleksić', 'Alimpić', 'Aličić', 'Aljančić', 'Amidžić', 'Ananić', 'Andić', 'Andrejić', 'Andrijanić', 'Andrić', 'Androbić', 'Anđelić', 'Anđić', 'Anđušić', 'Anić', 'Aničić', 'Ankić', 'Anojčić', 'Anokić', 'Antić', 'Antonić', 'Anušić', 'Apelić', 'Apić', 'Arambašić', 'Ardalić', 'Arsenić', 'Arsić', 'Atlagić', 'Aćimić', 'Aćić', 'Acić', 'Ačić', 'Adžić', 'Aškrabić', 'Ašćerić', 'Babarogić', 'Babić', 'Bavarčić', 'Baveljić', 'Badrić', 'Bajagić', 'Bajandić', 'Bajić', 'Bajičić', 'Bajkić', 'Bajčetić', 'Bajčić', 'Bakić', 'Baletić', 'Balotić', 'Baltić', 'Balšić', 'Banzić', 'Banić', 'Bantulić', 'Banjalić', 'Baralić', 'Barić', 'Barišić', 'Baroševčić', 'Basarić', 'Bastajić', 'Bastašić', 'Bataveljić', 'Batinić', 'Batnožić', 'Baćić', 'Bacetić', 'Bačić', 'Bačkulić', 'Bašić', 'Baštić', 'Bebić', 'Begenišić', 'Bežanić', 'Bekčić', 'Belančić', 'Belić', 'Belogrlić', 'Belodedić', 'Belonić', 'Beljić', 'Bendić', 'Berilažić', 'Berić', 'Besedić', 'Besjedić', 'Biberčić', 'Biberdžić', 'Bibić', 'Bižić', 'Bizetić', 'Bizumić', 'Bijanić', 'Bijelić', 'Bijelonić', 'Bilibajkić', 'Bilić', 'Bilkić', 'Biljić', 'Biljurić', 'Binić', 'Birišić', 'Bisenić', 'Biserić', 'Biserčić', 'Bisić', 'Bjekić', 'Bjeletić', 'Bjelinić', 'Bjelić', 'Bjeličić', 'Bjelkić', 'Bjelovitić', 'Bjelogrlić', 'Bjelonić', 'Bjelotomić', 'Blagić', 'Blagotić', 'Blažarić', 'Blažetić', 'Blažić', 'Blatešić', 'Blendić', 'Blesić', 'Blečić', 'Blešić', 'Boberić', 'Bobić', 'Bobušić', 'Bogatić', 'Bogdanić', 'Bogetić', 'Bogić', 'Bogičić', 'Bodirogić', 'Bodirožić', 'Bodić', 'Bodrožić', 'Božanić', 'Božikić', 'Božić', 'Božičić', 'Bojadić', 'Bojanić', 'Bojić', 'Bojičić', 'Bojkić', 'Bojčetić', 'Bojčić', 'Bokanić', 'Bokonjić', 'Bolić', 'Boltić', 'Boljanić', 'Bontić', 'Bondžić', 'Bondžulić', 'Borikić', 'Borić', 'Boričić', 'Borišić', 'Borjanić', 'Borokić', 'Borotić', 'Borčić', 'Bosančić', 'Bosiljkić', 'Bosiljčić', 'Bosiorčić', 'Bosiočić', 'Bosić', 'Bosnić', 'Botorić', 'Bocić', 'Bocokić', 'Bošnjačić', 'Boštrunić', 'Bradarić', 'Bradić', 'Bradonjić', 'Brajić', 'Braletić', 'Bralić', 'Bralušić', 'Brančić', 'Bratić', 'Bratonožić', 'Brašić', 'Brdarić', 'Brežančić', 'Brezić', 'Brekić', 'Brzić', 'Brisić', 'Brkanlić', 'Brkić', 'Brndušić', 'Brodalić', 'Brodić', 'Broćić', 'Bruić', 'Brujić', 'Brukić', 'Bubić', 'Bubonjić', 'Bugarčić', 'Budalić', 'Budimkić', 'Budimčić', 'Budinčić', 'Budić', 'Budišić', 'Budnić', 'Budurić', 'Buzaretić', 'Bujagić', 'Bujandrić', 'Bujić', 'Bujišić', 'Bujuklić', 'Bukazić', 'Bukvić', 'Bukelić', 'Bukovčić', 'Bukonjić', 'Bukumirić', 'Bukušić', 'Bulajić', 'Bulić', 'Buljubašić', 'Buljugić', 'Bumbić', 'Bunardžić', 'Bunić', 'Bunčić', 'Burgić', 'Burić', 'Burlić', 'Busančić', 'Buckić', 'Bučić', 'Bušetić', 'Bušić', 'Vagić', 'Vagurić', 'Vajić', 'Vajkarić', 'Vakičić', 'Vanušić', 'Varagić', 'Varaklić', 'Vardalić', 'Varjačić', 'Varničić', 'Vaselić', 'Vasilić', 'Vasić', 'Vašalić', 'Vekić', 'Veletić', 'Velikić', 'Veličić', 'Velišić', 'Veljančić', 'Veljić', 'Vemić', 'Verbić', 'Verbunkić', 'Vergić', 'Verić', 'Verkić', 'Veselić', 'Veseličić', 'Vesić', 'Vesnić', 'Vidarić', 'Vidačić', 'Videkanić', 'Vidić', 'Vilendečić', 'Vilotić', 'Vinokić', 'Vinčić', 'Viorikić', 'Vitakić', 'Vitolić', 'Vićentić', 'Višić', 'Vladetić', 'Vladić', 'Vladičić', 'Vladušić', 'Vlajić', 'Vlajnić', 'Vlajčić', 'Vlaketić', 'Vlasinić', 'Vlasonjić', 'Vlastić', 'Vlačić', 'Vlaškalić', 'Vojičić', 'Vojkić', 'Vojčić', 'Vorgić', 'Vorkapić', 'Voćkić', 'Voštinić', 'Voštić', 'Vranić', 'Vrančić', 'Vratonjić', 'Vračarić', 'Vrekić', 'Vrećić', 'Vrzić', 'Vrtunić', 'Vrugić', 'Vujanić', 'Vujanušić', 'Vujačić', 'Vujetić', 'Vujinić', 'Vujisić', 'Vujić', 'Vujičić', 'Vujnić', 'Vujčetić', 'Vukanić', 'Vukelić', 'Vukić', 'Vukoičić', 'Vukojičić', 'Vukojčić', 'Vukolić', 'Vukomančić', 'Vukosavić', 'Vukotić', 'Vukšić', 'Vuletić', 'Vulešić', 'Vulikić', 'Vulić', 'Vulišić', 'Vucelić', 'Vučelić', 'Vučendić', 'Vučenić', 'Vučetić', 'Vučinić', 'Vučić', 'Gavarić', 'Gavranić', 'Gavrančić', 'Gavrić', 'Gagić', 'Gagričić', 'Gajanić', 'Gajetić', 'Gajić', 'Gajičić', 'Gajtanić', 'Galetić', 'Galić', 'Galonić', 'Galonjić', 'Gambelić', 'Garačić', 'Gardić', 'Garić', 'Garotić', 'Gatarić', 'Gačić', 'Gadžić', 'Gašić', 'Gvozdenić', 'Gvozdić', 'Gvoić', 'Gvojić', 'Genčić', 'Gerzić', 'Gizdavić', 'Gilić', 'Glavendekić', 'Glavinić', 'Glavonić', 'Glavonjić', 'Glavčić', 'Glamočić', 'Gledić', 'Gležnić', 'Glibetić', 'Gligić', 'Gligorić', 'Gligurić', 'Glintić', 'Glišić', 'Gloginjić', 'Glomazić', 'Gluvajić', 'Glumičić', 'Gmizić', 'Gnjatić', 'Gobeljić', 'Gogić', 'Gojgić', 'Goncić', 'Goranić', 'Gorančić', 'Gordanić', 'Gordić', 'Goronjić', 'Gospavić', 'Gostić', 'Gostojić', 'Gocić', 'Gošnjić', 'Grabić', 'Grabovčić', 'Gradić', 'Gramić', 'Grandić', 'Granolić', 'Granulić', 'Graonić', 'Grašić', 'Grbić', 'Grečić', 'Grkinić', 'Grozdanić', 'Grozdić', 'Grokanić', 'Gromilić', 'Grubačić', 'Grubetić', 'Grubešić', 'Grubić', 'Grubišić', 'Grubješić', 'Grublješić', 'Grubnić', 'Gružanić', 'Grujanić', 'Grujić', 'Grujičić', 'Grumić', 'Guberinić', 'Gudurić', 'Gužvić', 'Gujaničić', 'Gurešić', 'Guconić', 'Gudžulić', 'Gušić', 'Dabarčić', 'Dabetić', 'Dabić', 'Davinić', 'Dajić', 'Dajlić', 'Damjanić', 'Dangić', 'Dangubić', 'Daničić', 'Danojlić', 'Dardić', 'Dafunić', 'Dačić', 'Dvokić', 'Dvorančić', 'Dvornić', 'Debelnogić', 'Devedžić', 'Dedić', 'Dejanić', 'Delić', 'Demić', 'Demonjić', 'Denić', 'Denkić', 'Denčić', 'Derajić', 'Deretić', 'Derikonjić', 'Deronjić', 'Desančić', 'Despenić', 'Despinić', 'Despić', 'Deurić', 'Dešić', 'Divić', 'Divnić', 'Divčić', 'Dikić', 'Diklić', 'Dikosavić', 'Dimanić', 'Dimitrić', 'Dimić', 'Dimkić', 'Dimčić', 'Dinić', 'Dinkić', 'Dinčić', 'Diskić', 'Dičić', 'Dobranić', 'Dobratić', 'Dobrić', 'Dobričić', 'Dovijanić', 'Dogandžić', 'Doganjić', 'Dodić', 'Dokić', 'Doknić', 'Dolinić', 'Dončić', 'Dorontić', 'Dostanić', 'Dostić', 'Dostičić', 'Dotlić', 'Dravić', 'Draganić', 'Draginčić', 'Dragić', 'Dragišić', 'Dragoljić', 'Dragonjić', 'Dragoslavić', 'Dragotić', 'Dragušić', 'Dražić', 'Drajić', 'Drakulić', 'Dramlić', 'Drangić', 'Draškić', 'Drezgić', 'Drekić', 'Drenić', 'Drinić', 'Drinčić', 'Družetić', 'Drulić', 'Drčelić', 'Dubajić', 'Dubačkić', 'Dubonjić', 'Dugalić', 'Dugić', 'Dugonjić', 'Dudić', 'Dukić', 'Dumanjić', 'Dumeljić', 'Dumitrikić', 'Dumnić', 'Dumonić', 'Dunčić', 'Dunjić', 'Duronjić', 'Dučić', 'Dušanić', 'Đajić', 'Đakušić', 'Đapić', 'Đekić', 'Đelić', 'Đelkapić', 'Đenadić', 'Đenisić', 'Đenić', 'Đerić', 'Đikić', 'Đinđić', 'Đokić', 'Đorđić', 'Đorić', 'Đuzić', 'Đujić', 'Đukarić', 'Đukelić', 'Đuketić', 'Đukić', 'Đuknić', 'Đuragić', 'Đurakić', 'Đurđić', 'Đuretić', 'Đurić', 'Đuričić', 'Đurišić', 'Đurkić', 'Đusić', 'Evđenić', 'Egarić', 'Egerić', 'Egić', 'Ekmečić', 'Ekmedžić', 'Ergić', 'Eremić', 'Erić', 'Erletić', 'Erčić', 'Žagrić', 'Žarić', 'Žarkić', 'Žepinić', 'Žeravić', 'Žeravčić', 'Žerajić', 'Žestić', 'Živanić', 'Živankić', 'Živić', 'Životić', 'Žigić', 'Žižić', 'Žikelić', 'Žikić', 'Žiletić', 'Žilić', 'Žmirić', 'Žmukić', 'Žmurić', 'Žugić', 'Žunić', 'Žutić', 'Žutobradić', 'Zaburnić', 'Zavišić', 'Zagorčić', 'Zakić', 'Zapukić', 'Zaradić', 'Zarić', 'Zatežić', 'Zaharić', 'Zbiljić', 'Zvekić', 'Zvizdić', 'Zdravić', 'Zdujić', 'Zebić', 'Zekavičić', 'Zekić', 'Zelić', 'Zimonjić', 'Zinaić', 'Zinajić', 'Zisić', 'Zjajić', 'Zjalić', 'Zjačić', 'Zlatić', 'Zličić', 'Zlovarić', 'Zojkić', 'Zokić', 'Zolotić', 'Zorbić', 'Zorić', 'Zoričić', 'Zorkić', 'Zrakić', 'Zrilić', 'Zrnić', 'Zubić', 'Zurnić', 'Ibrić', 'Ivanić', 'Ivantić', 'Ivančić', 'Ivezić', 'Ivetić', 'Ivić', 'Ivičić', 'Ivucić', 'Igić', 'Ignjatić', 'Ignjić', 'Ijačić', 'Ikić', 'Ikonić', 'Ilibašić', 'Ilijić', 'Ilikić', 'Ilinčić', 'Ilisić', 'Ilić', 'Iličić', 'Ilkić', 'Inđić', 'Irić', 'Ičelić', 'Jablančić', 'Javorić', 'Jagličić', 'Jagodić', 'Jakić', 'Jakišić', 'Jakonić', 'Jakšić', 'Jalić', 'Jandrić', 'Janikić', 'Janić', 'Janičić', 'Jankelić', 'Jankić', 'Janojkić', 'Jančić', 'Jančurić', 'Janjić', 'Janjušić', 'Jarić', 'Jasnić', 'Jašić', 'Jevdoksić', 'Jevđenić', 'Jeveričić', 'Jević', 'Jevrić', 'Jevtić', 'Jegdić', 'Jezdić', 'Jezerkić', 'Jelačić', 'Jelašić', 'Jelenić', 'Jelesić', 'Jelikić', 'Jelisavčić', 'Jelisić', 'Jelić', 'Jeličić', 'Jelušić', 'Jenić', 'Jergić', 'Jeremić', 'Jerinić', 'Jerinkić', 'Jerosimić', 'Jerotić', 'Jerčić', 'Jesretić', 'Jestrotić', 'Jeftenić', 'Jeftić', 'Ječmenić', 'Ješić', 'Jovakarić', 'Jovandić', 'Jovanetić', 'Jovanić', 'Jovankić', 'Jovančić', 'Jovadžić', 'Jovelić', 'Joveljić', 'Jovetić', 'Jovešić', 'Jovikić', 'Jović', 'Jovičić', 'Jovišić', 'Jovkić', 'Jovonić', 'Jovčić', 'Jozić', 'Jojić', 'Jojčić', 'Jokić', 'Jokičić', 'Joksić', 'Jolić', 'Jonikić', 'Jonić', 'Joničić', 'Jonkić', 'Jontić', 'Jončić', 'Jorgić', 'Jorgonić', 'Josić', 'Jocić', 'Juzbašić', 'Jukić', 'Jungić', 'Jurišić', 'Juškić', 'Kavalić', 'Kajganić', 'Kalabić', 'Kalajić', 'Kalajdžić', 'Kalendić', 'Kalenić', 'Kalinić', 'Kamperelić', 'Kandić', 'Kanlić', 'Kanjerić', 'Karavidić', 'Karagić', 'Karajčić', 'Karaklajić', 'Karaleić', 'Karalejić', 'Karalić', 'Karapandžić', 'Karatošić', 'Karaulić', 'Karadžić', 'Karić', 'Karišić', 'Karličić', 'Katanić', 'Katić', 'Kaćurić', 'Kačaniklić', 'Kašerić', 'Kvrgić', 'Kendrišić', 'Kentrić', 'Kepić', 'Kesić', 'Kečkić', 'Kijačić', 'Kimčetić', 'Kiselčić', 'Kitanić', 'Kitić', 'Kitonjić', 'Kičić', 'Klevernić', 'Klepić', 'Klinić', 'Klipić', 'Klisarić', 'Klisurić', 'Kličarić', 'Kljajić', 'Kljakić', 'Knežić', 'Kovanušić', 'Kovandžić', 'Kovarbašić', 'Kovačić', 'Kovinić', 'Kovinčić', 'Kovjanić', 'Kovjenić', 'Kovljenić', 'Kozić', 'Kojanić', 'Kojić', 'Kojičić', 'Kojčić', 'Kojundžić', 'Kolavčić', 'Kolarić', 'Kolačarić', 'Količić', 'Kolundžić', 'Koljančić', 'Komadinić', 'Komarčić', 'Komlenić', 'Komnenić', 'Kondić', 'Kontić', 'Konculić', 'Konjikušić', 'Koraksić', 'Kordić', 'Korugić', 'Koružić', 'Kosanić', 'Kosić', 'Kosnić', 'Kosorić', 'Kostić', 'Kotarlić', 'Kotlajić', 'Kočić', 'Kodžopeljić', 'Košarić', 'Košpić', 'Košutić', 'Kravarušić', 'Kravić', 'Kragić', 'Krainčanić', 'Krantić', 'Krasavčić', 'Krasić', 'Krezić', 'Krejić', 'Kremić', 'Kremonjić', 'Krestić', 'Krivošić', 'Krkeljić', 'Krkić', 'Krkobabić', 'Krnetić', 'Krnjajić', 'Krnjeušić', 'Krompić', 'Krotić', 'Krpić', 'Krsmanić', 'Krsmić', 'Krstajić', 'Krstekanić', 'Krstinić', 'Krstić', 'Krstičić', 'Krstonić', 'Krstonošić', 'Krtinić', 'Krunić', 'Kruškonjić', 'Kršić', 'Kuveljić', 'Kudrić', 'Kuzmić', 'Kujavić', 'Kujačić', 'Kujundžić', 'Kukrić', 'Kulezić', 'Kulizić', 'Kulišić', 'Kulundžić', 'Kuljančić', 'Kuljić', 'Kumrić', 'Kureljušić', 'Kurilić', 'Kursulić', 'Kurucić', 'Kurčubić', 'Kusonić', 'Kusonjić', 'Kusturić', 'Kutlačić', 'Kutlešić', 'Kušić', 'Kušljić', 'Labotić', 'Lavrnić', 'Lažetić', 'Lazendić', 'Lazetić', 'Lazić', 'Lazičić', 'Lazukić', 'Lajšić', 'Laketić', 'Lakić', 'Lalić', 'Lambić', 'Lapčić', 'Lastić', 'Latinčić', 'Leburić', 'Ležaić', 'Ležajić', 'Lekanić', 'Lekić', 'Lemaić', 'Lemajić', 'Leposavić', 'Lesendrić', 'Lečić', 'Leštarić', 'Lijeskić', 'Likodrić', 'Likušić', 'Lilić', 'Lipovčić', 'Lisičić', 'Lišančić', 'Lovrić', 'Lozanić', 'Lojaničić', 'Lolić', 'Lomić', 'Lopandić', 'Lubardić', 'Lubinić', 'Luburić', 'Lugonjić', 'Lužaić', 'Lužajić', 'Lukajić', 'Lukačić', 'Lukendić', 'Lukić', 'Lukičić', 'Lunić', 'Lutkić', 'Lučić', 'Ljamić', 'Ljeganušić', 'Ljotić', 'Ljubanić', 'Ljubić', 'Ljubičić', 'Ljubišić', 'Ljušić', 'Ljuškić', 'Maglić', 'Majkić', 'Makarić', 'Makivić', 'Makragić', 'Maksić', 'Malavrazić', 'Malbašić', 'Malenčić', 'Maletić', 'Malešić', 'Malinić', 'Mališić', 'Malobabić', 'Malušić', 'Maljugić', 'Maljčić', 'Mandarić', 'Mandinić', 'Mandić', 'Mandušić', 'Manić', 'Mančić', 'Manjenčić', 'Maravić', 'Marinčić', 'Marić', 'Maričić', 'Markagić', 'Markelić', 'Markeljić', 'Markulić', 'Marodić', 'Martić', 'Marunić', 'Marunkić', 'Marušić', 'Marčetić', 'Marčić', 'Masalušić', 'Maslarić', 'Maslić', 'Maslovarić', 'Matarugić', 'Matejić', 'Materić', 'Matić', 'Matičić', 'Matušić', 'Maćešić', 'Maćić', 'Mačić', 'Mačkić', 'Mačužić', 'Mašić', 'Medić', 'Medurić', 'Mektić', 'Mesulić', 'Mijalčić', 'Mijanić', 'Mijačić', 'Mijić', 'Mijucić', 'Mikarić', 'Mikelić', 'Miketić', 'Mikić', 'Mikičić', 'Mikonjić', 'Mikulić', 'Miladić', 'Milakić', 'Milačić', 'Milekić', 'Milenić', 'Miletić', 'Mileusnić', 'Milešić', 'Milijić', 'Milikić', 'Milikšić', 'Milinić', 'Milinčić', 'Milisavić', 'Miličić', 'Milić', 'Milišić', 'Milkić', 'Miloičić', 'Milojić', 'Milojičić', 'Milojkić', 'Milojčić', 'Milotić', 'Milunić', 'Milušić', 'Milčić', 'Miljanić', 'Mindić', 'Minić', 'Minčić', 'Miovčić', 'Miodanić', 'Mionić', 'Miražić', 'Mirić', 'Mirjanić', 'Mirkić', 'Mirosavić', 'Mirčetić', 'Mirčić', 'Misojčić', 'Mitić', 'Mitranić', 'Mitrekanić', 'Mitrić', 'Mitrušić', 'Mićić', 'Mihaljčić', 'Miholjčić', 'Mišeljić', 'Mišić', 'Miškić', 'Mišurić', 'Mladić', 'Mladžić', 'Mojsić', 'Mokrić', 'Momić', 'Moračić', 'Moretić', 'Morokvašić', 'Motičić', 'Mrakić', 'Mračić', 'Mrdić', 'Mrkić', 'Mrkonjić', 'Mrkušić', 'Mrkšić', 'Mudrinić', 'Mudrić', 'Munišić', 'Murganić', 'Mutavdžić', 'Mutibarić', 'Mučibabić', 'Mušikić', 'Navalušić', 'Nagradić', 'Nagulić', 'Nadaškić', 'Najdić', 'Najkić', 'Nakalamić', 'Nakić', 'Narančić', 'Narandžić', 'Nastasić', 'Nastić', 'Nebrigić', 'Nevajdić', 'Nevenić', 'Negoicić', 'Nedinić', 'Nedić', 'Nekić', 'Nemanjić', 'Nenadić', 'Nenić', 'Neoričić', 'Nešić', 'Nikezić', 'Niketić', 'Nikitić', 'Nikoletić', 'Nikolešić', 'Nikolić', 'Nikolčić', 'Nikšić', 'Ninić', 'Ninčić', 'Ničić', 'Nišavić', 'Nišić', 'Novalušić', 'Novarlić', 'Novačikić', 'Nović', 'Novičić', 'Novčić', 'Nožinić', 'Nojkić', 'Njegić', 'Njegrić', 'Nježić', 'Obrenić', 'Odavić', 'Ozimić', 'Ojdanić', 'Ojkić', 'Oketić', 'Okolić', 'Okulić', 'Olarić', 'Olić', 'Olujić', 'Oljačić', 'Opalić', 'Oparušić', 'Opačić', 'Oprikić', 'Oprić', 'Opricić', 'Oraovčić', 'Orlandić', 'Orlić', 'Osmajlić', 'Ostojić', 'Ocokoljić', 'Odžić', 'Pavić', 'Pavičić', 'Pavlekić', 'Pavličić', 'Pavčić', 'Padić', 'Pajagić', 'Pajić', 'Pajičić', 'Pajkić', 'Pajtić', 'Palalić', 'Palangetić', 'Paligorić', 'Palić', 'Paninčić', 'Panić', 'Panišić', 'Pantelić', 'Pantić', 'Pančić', 'Pandžić', 'Papić', 'Paprić', 'Papulić', 'Paramentić', 'Paraušić', 'Parivodić', 'Parlić', 'Parojčić', 'Patrnogić', 'Paunić', 'Pašić', 'Pejić', 'Pejičić', 'Pejušić', 'Pejčić', 'Pelagić', 'Pendić', 'Penezić', 'Penčić', 'Pepić', 'Perenić', 'Perić', 'Peričić', 'Perišić', 'Perjaničić', 'Perkić', 'Perotić', 'Peruničić', 'Perčić', 'Petkanić', 'Petrikić', 'Petrić', 'Petričić', 'Petronić', 'Petrušić', 'Peulić', 'Pecić', 'Pečeničić', 'Pešić', 'Pikić', 'Pilindavić', 'Piljagić', 'Piperčić', 'Pirivatrić', 'Pirić', 'Pisarić', 'Pitulić', 'Pjanić', 'Pjević', 'Plavić', 'Plavkić', 'Plavljanić', 'Plavšić', 'Plazinić', 'Planinčić', 'Planić', 'Platanić', 'Plačić', 'Plemić', 'Pleskonjić', 'Plećić', 'Plintić', 'Plisnić', 'Ploskić', 'Pločić', 'Pljakić', 'Pljevaljčić', 'Pobulić', 'Podinić', 'Podraščić', 'Podrić', 'Poznanić', 'Poznić', 'Pojkić', 'Polić', 'Polomčić', 'Polugić', 'Ponjavić', 'Pop Lazić', 'Popadić', 'Poparić', 'Popčić', 'Potrebić', 'Poštić', 'Pravdić', 'Pražić', 'Predić', 'Prekić', 'Prelić', 'Prendić', 'Prešić', 'Pržić', 'Pribić', 'Pribišić', 'Prigodić', 'Prijić', 'Prikić', 'Prišić', 'Prodanić', 'Prokić', 'Prokopić', 'Prolić', 'Protić', 'Prošić', 'Pruginić', 'Prunić', 'Pršendić', 'Pualić', 'Puvalić', 'Puvačić', 'Pudarić', 'Punišić', 'Purešić', 'Purić', 'Purišić', 'Puslojić', 'Pušeljić', 'Ravilić', 'Radančić', 'Radeljić', 'Radetić', 'Radešić', 'Radivojšić', 'Radikić', 'Radisavić', 'Radić', 'Radičić', 'Radišić', 'Radnić', 'Radoičić', 'Radojičić', 'Radojkić', 'Radojčić', 'Radonić', 'Radonjić', 'Radosavkić', 'Radotić', 'Radukić', 'Radulić', 'Raduljčić', 'Raducić', 'Radušić', 'Razumenić', 'Railić', 'Raičić', 'Rajačić', 'Rajić', 'Rajičić', 'Rajlić', 'Rajčetić', 'Rajčić', 'Rajšić', 'Rakezić', 'Raketić', 'Rakinić', 'Rakitić', 'Rakić', 'Rakonić', 'Raletić', 'Ralić', 'Raljić', 'Ramić', 'Ranđić', 'Ranisavić', 'Rankić', 'Rančić', 'Raonić', 'Rapaić', 'Rapajić', 'Rasulić', 'Ratkelić', 'Raulić', 'Racić', 'Račić', 'Rašetić', 'Rašić', 'Rašljić', 'Regodić', 'Regulić', 'Rekalić', 'Reljić', 'Remetić', 'Rendulić', 'Repašić', 'Resimić', 'Redžić', 'Ribarić', 'Riboškić', 'Riđošić', 'Riznić', 'Rinčić', 'Risimić', 'Ristanić', 'Ristić', 'Rmandić', 'Rnić', 'Rogić', 'Roglić', 'Rogonjić', 'Rogulić', 'Rodić', 'Rozgić', 'Rokvić', 'Roknić', 'Roksandić', 'Roksić', 'Roljić', 'Romanić', 'Romić', 'Rosić', 'Roškić', 'Ruvidić', 'Rudić', 'Rudonjić', 'Ružić', 'Ružičić', 'Ružojčić', 'Rumenić', 'Rundić', 'Runjajić', 'Rusalić', 'Rutešić', 'Rutonić', 'Ruškić', 'Sabljić', 'Savandić', 'Savatić', 'Savelić', 'Saveljić', 'Savić', 'Savičić', 'Savkić', 'Savurdić', 'Savčić', 'Salatić', 'Samardžić', 'Sandić', 'Sapardić', 'Saramandić', 'Sarić', 'Satarić', 'Svetličić', 'Svilarić', 'Svojić', 'Sekanić', 'Sekulić', 'Selenić', 'Sendrić', 'Senić', 'Seničić', 'Sentić', 'Setenčić', 'Sibinkić', 'Sibinčić', 'Sikimić', 'Simanić', 'Simendić', 'Simetić', 'Simić', 'Simurdić', 'Sinđelić', 'Sinđić', 'Sinkić', 'Sitničić', 'Sjeničić', 'Skakić', 'Skelić', 'Skendžić', 'Skerlić', 'Skokić', 'Skočajić', 'Skočić', 'Skrobić', 'Skulić', 'Slavić', 'Slavnić', 'Sladić', 'Slović', 'Smilić', 'Smiljanić', 'Smiljić', 'Smiljkić', 'Smoljanić', 'Smrekić', 'Sovrlić', 'Sovtić', 'Sojkić', 'Sokić', 'Soknić', 'Soldatić', 'Sorajić', 'Soskić', 'Sofijanić', 'Sofranić', 'Sofrenić', 'Sofronić', 'Spaić', 'Spakić', 'Sparić', 'Spasenić', 'Spasić', 'Spenčić', 'Sperlić', 'Spirić', 'Spremić', 'Spužić', 'Sredić', 'Sretić', 'Stavrić', 'Stajić', 'Stajkić', 'Stajčić', 'Stajšić', 'Stakić', 'Stakušić', 'Stamatić', 'Stambolić', 'Stamenić', 'Stamenčić', 'Stanarčić', 'Stanetić', 'Stanikić', 'Stanisavić', 'Stanić', 'Staničić', 'Stanišić', 'Stankić', 'Stanovčić', 'Stanojčić', 'Stanušić', 'Stančetić', 'Stančić', 'Stašić', 'Stevandić', 'Stevanetić', 'Stevanić', 'Stevelić', 'Stević', 'Stevčić', 'Stegić', 'Stegnjaić', 'Stegnjajić', 'Stekić', 'Steljić', 'Stepandić', 'Stepanić', 'Stepić', 'Stijačić', 'Stijepić', 'Stikić', 'Stjepić', 'Stožinić', 'Stojanić', 'Stojankić', 'Stojančić', 'Stojačić', 'Stojić', 'Stojičić', 'Stojkić', 'Stojnić', 'Stojčić', 'Stojšić', 'Stokanić', 'Stokić', 'Stolić', 'Stoparić', 'Stopić', 'Stošić', 'Strajnić', 'Strahinić', 'Strahinjić', 'Strinić', 'Subotić', 'Suvajdžić', 'Sumenić', 'Sunarić', 'Surlić', 'Suručić', 'Tadić', 'Tajsić', 'Tamindžić', 'Tanasić', 'Tanić', 'Tankosić', 'Tančić', 'Tarabić', 'Tasić', 'Tatišić', 'Tvrdišić', 'Teodosić', 'Tepić', 'Tepšić', 'Terzić', 'Teslić', 'Tešanić', 'Tešankić', 'Tešendić', 'Tešinić', 'Tešić', 'Tijanić', 'Timilić', 'Timotić', 'Tirić', 'Tirnanić', 'Tmušić', 'Tovarišić', 'Todić', 'Todorić', 'Todosić', 'Tojić', 'Tokalić', 'Toljagić', 'Tomanić', 'Tomecić', 'Tominčić', 'Tomić', 'Tomičić', 'Tomonjić', 'Tomčić', 'Tontić', 'Tončić', 'Topić', 'Topličić', 'Topolić', 'Toskić', 'Tošanić', 'Tošić', 'Travorić', 'Traparić', 'Trenčić', 'Trivalić', 'Trivić', 'Trivunić', 'Trivunčić', 'Trijić', 'Trikić', 'Trindić', 'Tripić', 'Trifunjagić', 'Trišić', 'Trmčić', 'Trninić', 'Trnić', 'Trošić', 'Trubajić', 'Trudić', 'Trujić', 'Trujkić', 'Tubonjić', 'Tukelić', 'Tumarić', 'Tupajić', 'Turajlić', 'Turnić', 'Turudić', 'Turunčić', 'Tutić', 'Tutorić', 'Tutulić', 'Tufegdžić', 'Tucić', 'Ćajić', 'Ćalić', 'Ćatić', 'Ćebić', 'Ćelić', 'Ćeranić', 'Ćipranić', 'Ćirić', 'Ćirjanić', 'Ćojbašić', 'Ćopić', 'Ćorić', 'Ćosić', 'Ćuić', 'Ćujić', 'Ćupić', 'Ćurdić', 'Ćurić', 'Ćurčić', 'Ćušić', 'Ubavić', 'Ubavkić', 'Uvalić', 'Uverić', 'Uglješić', 'Ugrinić', 'Ugrinčić', 'Ugričić', 'Udovičić', 'Udovčić', 'Umeljić', 'Umetić', 'Umiljendić', 'Uršikić', 'Ustić', 'Utvić', 'Ušendić', 'Farkić', 'Fatić', 'Femić', 'Filipić', 'Fotirić', 'Fotić', 'Frtunić', 'Hadži Antić', 'Hadži Jovančić', 'Hadži Nikolić', 'Hadži Ristić', 'Hadži Tančić', 'Hadžić', 'Hinić', 'Hristić', 'Cajić', 'Cakić', 'Carić', 'Caričić', 'Cvejić', 'Cvetić', 'Cvijetić', 'Cvijić', 'Cvikić', 'Cvišić', 'Cenić', 'Cenkić', 'Civišić', 'Civrić', 'Ciglić', 'Ciklušić', 'Cicvarić', 'Cmiljanić', 'Cmolić', 'Conić', 'Crnovčić', 'Cukanić', 'Cukić', 'Cuparić', 'Čabrić', 'Čavić', 'Čajić', 'Čalenić', 'Čalić', 'Čamagić', 'Čantrić', 'Čaprnjić', 'Čarapić', 'Čarnić', 'Čvokić', 'Čvorić', 'Čeleketić', 'Čemerikić', 'Čečarić', 'Čivčić', 'Čikarić', 'Čikić', 'Čiplić', 'Čipčić', 'Čičić', 'Čkovrić', 'Čobelić', 'Čobeljić', 'Čović', 'Čojić', 'Čojčić', 'Čolanić', 'Čolić', 'Čomić', 'Čonkić', 'Čonjagić', 'Čorbić', 'Čotrić', 'Čočurić', 'Čubrić', 'Čudić', 'Čukarić', 'Čukić', 'Čumić', 'Čupeljić', 'Čuperkić', 'Čupić', 'Čuturić', 'Džavrić', 'Džajić', 'Džambić', 'Džadžić', 'Dželebdžić', 'Džikić', 'Džinić', 'Džodić', 'Džombić', 'Džomić', 'Džonić', 'Šakić', 'Šakotić', 'Šalinić', 'Šamatić', 'Šantić', 'Šapić', 'Šaponić', 'Šaponjić', 'Šapurić', 'Šarančić', 'Šarić', 'Šarkić', 'Šaronjić', 'Šašić', 'Švabić', 'Ševarlić', 'Šević', 'Ševkušić', 'Šestić', 'Šibalić', 'Šijakinjić', 'Šijačić', 'Šikanić', 'Šikanjić', 'Šimšić', 'Šipetić', 'Šišić', 'Škobić', 'Škodrić', 'Škondrić', 'Škorić', 'Škrbić', 'Škrebić', 'Škulić', 'Škundrić', 'Šljapić', 'Šljivić', 'Šljukić', 'Šmigić', 'Šobajić', 'Šobačić', 'Šorgić', 'Šoškić', 'Špirić', 'Štakić', 'Štulić', 'Šubakić', 'Šubarić', 'Šubić', 'Šuleić', 'Šulejić', 'Šuletić', 'Šulkić', 'Šuluburić', 'Šuljagić', 'Šumatić', 'Šunderić', 'Šunkić', 'Šunjevarić', 'Šutuljić', 'Šušić', 'Šušulić',
    );
}
</codefragment>
  </duplication>
  <duplication lines="10" tokens="402">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/sr_Latn_RS/Person.php" line="211"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/me_ME/Person.php" line="91"/>
    <codefragment>        'Abadžić', 'Abdulić', 'Abramić', 'Avalić', 'Avdulić', 'Avrić', 'Aguridić', 'Adamić', 'Azarić', 'Ajdačić', 'Ajdučić', 'Aksentić', 'Aksić', 'Alavantić', 'Aladić', 'Alargić', 'Albijanić', 'Aleksandrić', 'Aleksendrić', 'Aleksić', 'Alimpić', 'Aličić', 'Aljančić', 'Amidžić', 'Ananić', 'Andić', 'Andrejić', 'Andrijanić', 'Andrić', 'Androbić', 'Anđelić', 'Anđić', 'Anđušić', 'Anić', 'Aničić', 'Ankić', 'Anojčić', 'Anokić', 'Antić', 'Antonić', 'Anušić', 'Apelić', 'Apić', 'Arambašić', 'Ardalić', 'Arsenić', 'Arsić', 'Atlagić', 'Aćimić', 'Aćić', 'Acić', 'Ačić', 'Adžić', 'Aškrabić', 'Ašćerić', 'Babarogić', 'Babić', 'Bavarčić', 'Baveljić', 'Badrić', 'Bajagić', 'Bajandić', 'Bajić', 'Bajičić', 'Bajkić', 'Bajčetić', 'Bajčić', 'Bakić', 'Baletić', 'Balotić', 'Baltić', 'Balšić', 'Banzić', 'Banić', 'Bantulić', 'Banjalić', 'Baralić', 'Barić', 'Barišić', 'Baroševčić', 'Basarić', 'Bastajić', 'Bastašić', 'Bataveljić', 'Batinić', 'Batnožić', 'Baćić', 'Bacetić', 'Bačić', 'Bačkulić', 'Bašić', 'Baštić', 'Bebić', 'Begenišić', 'Bežanić', 'Bekčić', 'Belančić', 'Belić', 'Belogrlić', 'Belodedić', 'Belonić', 'Beljić', 'Bendić', 'Berilažić', 'Berić', 'Besedić', 'Besjedić', 'Biberčić', 'Biberdžić', 'Bibić', 'Bižić', 'Bizetić', 'Bizumić', 'Bijanić', 'Bijelić', 'Bijelonić', 'Bilibajkić', 'Bilić', 'Bilkić', 'Biljić', 'Biljurić', 'Binić', 'Birišić', 'Bisenić', 'Biserić', 'Biserčić', 'Bisić', 'Bjekić', 'Bjeletić', 'Bjelinić', 'Bjelić', 'Bjeličić', 'Bjelkić', 'Bjelovitić', 'Bjelogrlić', 'Bjelonić', 'Bjelotomić', 'Blagić', 'Blagotić', 'Blažarić', 'Blažetić', 'Blažić', 'Blatešić', 'Blendić', 'Blesić', 'Blečić', 'Blešić', 'Boberić', 'Bobić', 'Bobušić', 'Bogatić', 'Bogdanić', 'Bogetić', 'Bogić', 'Bogičić', 'Bodirogić', 'Bodirožić', 'Bodić', 'Bodrožić', 'Božanić', 'Božikić', 'Božić', 'Božičić', 'Bojadić', 'Bojanić', 'Bojić', 'Bojičić', 'Bojkić', 'Bojčetić', 'Bojčić', 'Bokanić', 'Bokonjić', 'Bolić', 'Boltić', 'Boljanić', 'Bontić', 'Bondžić', 'Bondžulić', 'Borikić', 'Borić', 'Boričić', 'Borišić', 'Borjanić', 'Borokić', 'Borotić', 'Borčić', 'Bosančić', 'Bosiljkić', 'Bosiljčić', 'Bosiorčić', 'Bosiočić', 'Bosić', 'Bosnić', 'Botorić', 'Bocić', 'Bocokić', 'Bošnjačić', 'Boštrunić', 'Bradarić', 'Bradić', 'Bradonjić', 'Brajić', 'Braletić', 'Bralić', 'Bralušić', 'Brančić', 'Bratić', 'Bratonožić', 'Brašić', 'Brdarić', 'Brežančić', 'Brezić', 'Brekić', 'Brzić', 'Brisić', 'Brkanlić', 'Brkić', 'Brndušić', 'Brodalić', 'Brodić', 'Broćić', 'Bruić', 'Brujić', 'Brukić', 'Bubić', 'Bubonjić', 'Bugarčić', 'Budalić', 'Budimkić', 'Budimčić', 'Budinčić', 'Budić', 'Budišić', 'Budnić', 'Budurić', 'Buzaretić', 'Bujagić', 'Bujandrić', 'Bujić', 'Bujišić', 'Bujuklić', 'Bukazić', 'Bukvić', 'Bukelić', 'Bukovčić', 'Bukonjić', 'Bukumirić', 'Bukušić', 'Bulajić', 'Bulić', 'Buljubašić', 'Buljugić', 'Bumbić', 'Bunardžić', 'Bunić', 'Bunčić', 'Burgić', 'Burić', 'Burlić', 'Busančić', 'Buckić', 'Bučić', 'Bušetić', 'Bušić', 'Vagić', 'Vagurić', 'Vajić', 'Vajkarić', 'Vakičić', 'Vanušić', 'Varagić', 'Varaklić', 'Vardalić', 'Varjačić', 'Varničić', 'Vaselić', 'Vasilić', 'Vasić', 'Vašalić', 'Vekić', 'Veletić', 'Velikić', 'Veličić', 'Velišić', 'Veljančić', 'Veljić', 'Vemić', 'Verbić', 'Verbunkić', 'Vergić', 'Verić', 'Verkić', 'Veselić', 'Veseličić', 'Vesić', 'Vesnić', 'Vidarić', 'Vidačić', 'Videkanić', 'Vidić', 'Vilendečić', 'Vilotić', 'Vinokić', 'Vinčić', 'Viorikić', 'Vitakić', 'Vitolić', 'Vićentić', 'Višić', 'Vladetić', 'Vladić', 'Vladičić', 'Vladušić', 'Vlajić', 'Vlajnić', 'Vlajčić', 'Vlaketić', 'Vlasinić', 'Vlasonjić', 'Vlastić', 'Vlačić', 'Vlaškalić', 'Vojičić', 'Vojkić', 'Vojčić', 'Vorgić', 'Vorkapić', 'Voćkić', 'Voštinić', 'Voštić', 'Vranić', 'Vrančić', 'Vratonjić', 'Vračarić', 'Vrekić', 'Vrećić', 'Vrzić', 'Vrtunić', 'Vrugić', 'Vujanić', 'Vujanušić', 'Vujačić', 'Vujetić', 'Vujinić', 'Vujisić', 'Vujić', 'Vujičić', 'Vujnić', 'Vujčetić', 'Vukanić', 'Vukelić', 'Vukić', 'Vukoičić', 'Vukojičić', 'Vukojčić', 'Vukolić', 'Vukomančić', 'Vukosavić', 'Vukotić', 'Vukšić', 'Vuletić', 'Vulešić', 'Vulikić', 'Vulić', 'Vulišić', 'Vucelić', 'Vučelić', 'Vučendić', 'Vučenić', 'Vučetić', 'Vučinić', 'Vučić', 'Gavarić', 'Gavranić', 'Gavrančić', 'Gavrić', 'Gagić', 'Gagričić', 'Gajanić', 'Gajetić', 'Gajić', 'Gajičić', 'Gajtanić', 'Galetić', 'Galić', 'Galonić', 'Galonjić', 'Gambelić', 'Garačić', 'Gardić', 'Garić', 'Garotić', 'Gatarić', 'Gačić', 'Gadžić', 'Gašić', 'Gvozdenić', 'Gvozdić', 'Gvoić', 'Gvojić', 'Genčić', 'Gerzić', 'Gizdavić', 'Gilić', 'Glavendekić', 'Glavinić', 'Glavonić', 'Glavonjić', 'Glavčić', 'Glamočić', 'Gledić', 'Gležnić', 'Glibetić', 'Gligić', 'Gligorić', 'Gligurić', 'Glintić', 'Glišić', 'Gloginjić', 'Glomazić', 'Gluvajić', 'Glumičić', 'Gmizić', 'Gnjatić', 'Gobeljić', 'Gogić', 'Gojgić', 'Goncić', 'Goranić', 'Gorančić', 'Gordanić', 'Gordić', 'Goronjić', 'Gospavić', 'Gostić', 'Gostojić', 'Gocić', 'Gošnjić', 'Grabić', 'Grabovčić', 'Gradić', 'Gramić', 'Grandić', 'Granolić', 'Granulić', 'Graonić', 'Grašić', 'Grbić', 'Grečić', 'Grkinić', 'Grozdanić', 'Grozdić', 'Grokanić', 'Gromilić', 'Grubačić', 'Grubetić', 'Grubešić', 'Grubić', 'Grubišić', 'Grubješić', 'Grublješić', 'Grubnić', 'Gružanić', 'Grujanić', 'Grujić', 'Grujičić', 'Grumić', 'Guberinić', 'Gudurić', 'Gužvić', 'Gujaničić', 'Gurešić', 'Guconić', 'Gudžulić', 'Gušić', 'Dabarčić', 'Dabetić', 'Dabić', 'Davinić', 'Dajić', 'Dajlić', 'Damjanić', 'Dangić', 'Dangubić', 'Daničić', 'Danojlić', 'Dardić', 'Dafunić', 'Dačić', 'Dvokić', 'Dvorančić', 'Dvornić', 'Debelnogić', 'Devedžić', 'Dedić', 'Dejanić', 'Delić', 'Demić', 'Demonjić', 'Denić', 'Denkić', 'Denčić', 'Derajić', 'Deretić', 'Derikonjić', 'Deronjić', 'Desančić', 'Despenić', 'Despinić', 'Despić', 'Deurić', 'Dešić', 'Divić', 'Divnić', 'Divčić', 'Dikić', 'Diklić', 'Dikosavić', 'Dimanić', 'Dimitrić', 'Dimić', 'Dimkić', 'Dimčić', 'Dinić', 'Dinkić', 'Dinčić', 'Diskić', 'Dičić', 'Dobranić', 'Dobratić', 'Dobrić', 'Dobričić', 'Dovijanić', 'Dogandžić', 'Doganjić', 'Dodić', 'Dokić', 'Doknić', 'Dolinić', 'Dončić', 'Dorontić', 'Dostanić', 'Dostić', 'Dostičić', 'Dotlić', 'Dravić', 'Draganić', 'Draginčić', 'Dragić', 'Dragišić', 'Dragoljić', 'Dragonjić', 'Dragoslavić', 'Dragotić', 'Dragušić', 'Dražić', 'Drajić', 'Drakulić', 'Dramlić', 'Drangić', 'Draškić', 'Drezgić', 'Drekić', 'Drenić', 'Drinić', 'Drinčić', 'Družetić', 'Drulić', 'Drčelić', 'Dubajić', 'Dubačkić', 'Dubonjić', 'Dugalić', 'Dugić', 'Dugonjić', 'Dudić', 'Dukić', 'Dumanjić', 'Dumeljić', 'Dumitrikić', 'Dumnić', 'Dumonić', 'Dunčić', 'Dunjić', 'Duronjić', 'Dučić', 'Dušanić', 'Đajić', 'Đakušić', 'Đapić', 'Đekić', 'Đelić', 'Đelkapić', 'Đenadić', 'Đenisić', 'Đenić', 'Đerić', 'Đikić', 'Đinđić', 'Đokić', 'Đorđić', 'Đorić', 'Đuzić', 'Đujić', 'Đukarić', 'Đukelić', 'Đuketić', 'Đukić', 'Đuknić', 'Đuragić', 'Đurakić', 'Đurđić', 'Đuretić', 'Đurić', 'Đuričić', 'Đurišić', 'Đurkić', 'Đusić', 'Evđenić', 'Egarić', 'Egerić', 'Egić', 'Ekmečić', 'Ekmedžić', 'Ergić', 'Eremić', 'Erić', 'Erletić', 'Erčić', 'Žagrić', 'Žarić', 'Žarkić', 'Žepinić', 'Žeravić', 'Žeravčić', 'Žerajić', 'Žestić', 'Živanić', 'Živankić', 'Živić', 'Životić', 'Žigić', 'Žižić', 'Žikelić', 'Žikić', 'Žiletić', 'Žilić', 'Žmirić', 'Žmukić', 'Žmurić', 'Žugić', 'Žunić', 'Žutić', 'Žutobradić', 'Zaburnić', 'Zavišić', 'Zagorčić', 'Zakić', 'Zapukić', 'Zaradić', 'Zarić', 'Zatežić', 'Zaharić', 'Zbiljić', 'Zvekić', 'Zvizdić', 'Zdravić', 'Zdujić', 'Zebić', 'Zekavičić', 'Zekić', 'Zelić', 'Zimonjić', 'Zinaić', 'Zinajić', 'Zisić', 'Zjajić', 'Zjalić', 'Zjačić', 'Zlatić', 'Zličić', 'Zlovarić', 'Zojkić', 'Zokić', 'Zolotić', 'Zorbić', 'Zorić', 'Zoričić', 'Zorkić', 'Zrakić', 'Zrilić', 'Zrnić', 'Zubić', 'Zurnić', 'Ibrić', 'Ivanić', 'Ivantić', 'Ivančić', 'Ivezić', 'Ivetić', 'Ivić', 'Ivičić', 'Ivucić', 'Igić', 'Ignjatić', 'Ignjić', 'Ijačić', 'Ikić', 'Ikonić', 'Ilibašić', 'Ilijić', 'Ilikić', 'Ilinčić', 'Ilisić', 'Ilić', 'Iličić', 'Ilkić', 'Inđić', 'Irić', 'Ičelić', 'Jablančić', 'Javorić', 'Jagličić', 'Jagodić', 'Jakić', 'Jakišić', 'Jakonić', 'Jakšić', 'Jalić', 'Jandrić', 'Janikić', 'Janić', 'Janičić', 'Jankelić', 'Jankić', 'Janojkić', 'Jančić', 'Jančurić', 'Janjić', 'Janjušić', 'Jarić', 'Jasnić', 'Jašić', 'Jevdoksić', 'Jevđenić', 'Jeveričić', 'Jević', 'Jevrić', 'Jevtić', 'Jegdić', 'Jezdić', 'Jezerkić', 'Jelačić', 'Jelašić', 'Jelenić', 'Jelesić', 'Jelikić', 'Jelisavčić', 'Jelisić', 'Jelić', 'Jeličić', 'Jelušić', 'Jenić', 'Jergić', 'Jeremić', 'Jerinić', 'Jerinkić', 'Jerosimić', 'Jerotić', 'Jerčić', 'Jesretić', 'Jestrotić', 'Jeftenić', 'Jeftić', 'Ječmenić', 'Ješić', 'Jovakarić', 'Jovandić', 'Jovanetić', 'Jovanić', 'Jovankić', 'Jovančić', 'Jovadžić', 'Jovelić', 'Joveljić', 'Jovetić', 'Jovešić', 'Jovikić', 'Jović', 'Jovičić', 'Jovišić', 'Jovkić', 'Jovonić', 'Jovčić', 'Jozić', 'Jojić', 'Jojčić', 'Jokić', 'Jokičić', 'Joksić', 'Jolić', 'Jonikić', 'Jonić', 'Joničić', 'Jonkić', 'Jontić', 'Jončić', 'Jorgić', 'Jorgonić', 'Josić', 'Jocić', 'Juzbašić', 'Jukić', 'Jungić', 'Jurišić', 'Juškić', 'Kavalić', 'Kajganić', 'Kalabić', 'Kalajić', 'Kalajdžić', 'Kalendić', 'Kalenić', 'Kalinić', 'Kamperelić', 'Kandić', 'Kanlić', 'Kanjerić', 'Karavidić', 'Karagić', 'Karajčić', 'Karaklajić', 'Karaleić', 'Karalejić', 'Karalić', 'Karapandžić', 'Karatošić', 'Karaulić', 'Karadžić', 'Karić', 'Karišić', 'Karličić', 'Katanić', 'Katić', 'Kaćurić', 'Kačaniklić', 'Kašerić', 'Kvrgić', 'Kendrišić', 'Kentrić', 'Kepić', 'Kesić', 'Kečkić', 'Kijačić', 'Kimčetić', 'Kiselčić', 'Kitanić', 'Kitić', 'Kitonjić', 'Kičić', 'Klevernić', 'Klepić', 'Klinić', 'Klipić', 'Klisarić', 'Klisurić', 'Kličarić', 'Kljajić', 'Kljakić', 'Knežić', 'Kovanušić', 'Kovandžić', 'Kovarbašić', 'Kovačić', 'Kovinić', 'Kovinčić', 'Kovjanić', 'Kovjenić', 'Kovljenić', 'Kozić', 'Kojanić', 'Kojić', 'Kojičić', 'Kojčić', 'Kojundžić', 'Kolavčić', 'Kolarić', 'Kolačarić', 'Količić', 'Kolundžić', 'Koljančić', 'Komadinić', 'Komarčić', 'Komlenić', 'Komnenić', 'Kondić', 'Kontić', 'Konculić', 'Konjikušić', 'Koraksić', 'Kordić', 'Korugić', 'Koružić', 'Kosanić', 'Kosić', 'Kosnić', 'Kosorić', 'Kostić', 'Kotarlić', 'Kotlajić', 'Kočić', 'Kodžopeljić', 'Košarić', 'Košpić', 'Košutić', 'Kravarušić', 'Kravić', 'Kragić', 'Krainčanić', 'Krantić', 'Krasavčić', 'Krasić', 'Krezić', 'Krejić', 'Kremić', 'Kremonjić', 'Krestić', 'Krivošić', 'Krkeljić', 'Krkić', 'Krkobabić', 'Krnetić', 'Krnjajić', 'Krnjeušić', 'Krompić', 'Krotić', 'Krpić', 'Krsmanić', 'Krsmić', 'Krstajić', 'Krstekanić', 'Krstinić', 'Krstić', 'Krstičić', 'Krstonić', 'Krstonošić', 'Krtinić', 'Krunić', 'Kruškonjić', 'Kršić', 'Kuveljić', 'Kudrić', 'Kuzmić', 'Kujavić', 'Kujačić', 'Kujundžić', 'Kukrić', 'Kulezić', 'Kulizić', 'Kulišić', 'Kulundžić', 'Kuljančić', 'Kuljić', 'Kumrić', 'Kureljušić', 'Kurilić', 'Kursulić', 'Kurucić', 'Kurčubić', 'Kusonić', 'Kusonjić', 'Kusturić', 'Kutlačić', 'Kutlešić', 'Kušić', 'Kušljić', 'Labotić', 'Lavrnić', 'Lažetić', 'Lazendić', 'Lazetić', 'Lazić', 'Lazičić', 'Lazukić', 'Lajšić', 'Laketić', 'Lakić', 'Lalić', 'Lambić', 'Lapčić', 'Lastić', 'Latinčić', 'Leburić', 'Ležaić', 'Ležajić', 'Lekanić', 'Lekić', 'Lemaić', 'Lemajić', 'Leposavić', 'Lesendrić', 'Lečić', 'Leštarić', 'Lijeskić', 'Likodrić', 'Likušić', 'Lilić', 'Lipovčić', 'Lisičić', 'Lišančić', 'Lovrić', 'Lozanić', 'Lojaničić', 'Lolić', 'Lomić', 'Lopandić', 'Lubardić', 'Lubinić', 'Luburić', 'Lugonjić', 'Lužaić', 'Lužajić', 'Lukajić', 'Lukačić', 'Lukendić', 'Lukić', 'Lukičić', 'Lunić', 'Lutkić', 'Lučić', 'Ljamić', 'Ljeganušić', 'Ljotić', 'Ljubanić', 'Ljubić', 'Ljubičić', 'Ljubišić', 'Ljušić', 'Ljuškić', 'Maglić', 'Majkić', 'Makarić', 'Makivić', 'Makragić', 'Maksić', 'Malavrazić', 'Malbašić', 'Malenčić', 'Maletić', 'Malešić', 'Malinić', 'Mališić', 'Malobabić', 'Malušić', 'Maljugić', 'Maljčić', 'Mandarić', 'Mandinić', 'Mandić', 'Mandušić', 'Manić', 'Mančić', 'Manjenčić', 'Maravić', 'Marinčić', 'Marić', 'Maričić', 'Markagić', 'Markelić', 'Markeljić', 'Markulić', 'Marodić', 'Martić', 'Marunić', 'Marunkić', 'Marušić', 'Marčetić', 'Marčić', 'Masalušić', 'Maslarić', 'Maslić', 'Maslovarić', 'Matarugić', 'Matejić', 'Materić', 'Matić', 'Matičić', 'Matušić', 'Maćešić', 'Maćić', 'Mačić', 'Mačkić', 'Mačužić', 'Mašić', 'Medić', 'Medurić', 'Mektić', 'Mesulić', 'Mijalčić', 'Mijanić', 'Mijačić', 'Mijić', 'Mijucić', 'Mikarić', 'Mikelić', 'Miketić', 'Mikić', 'Mikičić', 'Mikonjić', 'Mikulić', 'Miladić', 'Milakić', 'Milačić', 'Milekić', 'Milenić', 'Miletić', 'Mileusnić', 'Milešić', 'Milijić', 'Milikić', 'Milikšić', 'Milinić', 'Milinčić', 'Milisavić', 'Miličić', 'Milić', 'Milišić', 'Milkić', 'Miloičić', 'Milojić', 'Milojičić', 'Milojkić', 'Milojčić', 'Milotić', 'Milunić', 'Milušić', 'Milčić', 'Miljanić', 'Mindić', 'Minić', 'Minčić', 'Miovčić', 'Miodanić', 'Mionić', 'Miražić', 'Mirić', 'Mirjanić', 'Mirkić', 'Mirosavić', 'Mirčetić', 'Mirčić', 'Misojčić', 'Mitić', 'Mitranić', 'Mitrekanić', 'Mitrić', 'Mitrušić', 'Mićić', 'Mihaljčić', 'Miholjčić', 'Mišeljić', 'Mišić', 'Miškić', 'Mišurić', 'Mladić', 'Mladžić', 'Mojsić', 'Mokrić', 'Momić', 'Moračić', 'Moretić', 'Morokvašić', 'Motičić', 'Mrakić', 'Mračić', 'Mrdić', 'Mrkić', 'Mrkonjić', 'Mrkušić', 'Mrkšić', 'Mudrinić', 'Mudrić', 'Munišić', 'Murganić', 'Mutavdžić', 'Mutibarić', 'Mučibabić', 'Mušikić', 'Navalušić', 'Nagradić', 'Nagulić', 'Nadaškić', 'Najdić', 'Najkić', 'Nakalamić', 'Nakić', 'Narančić', 'Narandžić', 'Nastasić', 'Nastić', 'Nebrigić', 'Nevajdić', 'Nevenić', 'Negoicić', 'Nedinić', 'Nedić', 'Nekić', 'Nemanjić', 'Nenadić', 'Nenić', 'Neoričić', 'Nešić', 'Nikezić', 'Niketić', 'Nikitić', 'Nikoletić', 'Nikolešić', 'Nikolić', 'Nikolčić', 'Nikšić', 'Ninić', 'Ninčić', 'Ničić', 'Nišavić', 'Nišić', 'Novalušić', 'Novarlić', 'Novačikić', 'Nović', 'Novičić', 'Novčić', 'Nožinić', 'Nojkić', 'Njegić', 'Njegrić', 'Nježić', 'Obrenić', 'Odavić', 'Ozimić', 'Ojdanić', 'Ojkić', 'Oketić', 'Okolić', 'Okulić', 'Olarić', 'Olić', 'Olujić', 'Oljačić', 'Opalić', 'Oparušić', 'Opačić', 'Oprikić', 'Oprić', 'Opricić', 'Oraovčić', 'Orlandić', 'Orlić', 'Osmajlić', 'Ostojić', 'Ocokoljić', 'Odžić', 'Pavić', 'Pavičić', 'Pavlekić', 'Pavličić', 'Pavčić', 'Padić', 'Pajagić', 'Pajić', 'Pajičić', 'Pajkić', 'Pajtić', 'Palalić', 'Palangetić', 'Paligorić', 'Palić', 'Paninčić', 'Panić', 'Panišić', 'Pantelić', 'Pantić', 'Pančić', 'Pandžić', 'Papić', 'Paprić', 'Papulić', 'Paramentić', 'Paraušić', 'Parivodić', 'Parlić', 'Parojčić', 'Patrnogić', 'Paunić', 'Pašić', 'Pejić', 'Pejičić', 'Pejušić', 'Pejčić', 'Pelagić', 'Pendić', 'Penezić', 'Penčić', 'Pepić', 'Perenić', 'Perić', 'Peričić', 'Perišić', 'Perjaničić', 'Perkić', 'Perotić', 'Peruničić', 'Perčić', 'Petkanić', 'Petrikić', 'Petrić', 'Petričić', 'Petronić', 'Petrušić', 'Peulić', 'Pecić', 'Pečeničić', 'Pešić', 'Pikić', 'Pilindavić', 'Piljagić', 'Piperčić', 'Pirivatrić', 'Pirić', 'Pisarić', 'Pitulić', 'Pjanić', 'Pjević', 'Plavić', 'Plavkić', 'Plavljanić', 'Plavšić', 'Plazinić', 'Planinčić', 'Planić', 'Platanić', 'Plačić', 'Plemić', 'Pleskonjić', 'Plećić', 'Plintić', 'Plisnić', 'Ploskić', 'Pločić', 'Pljakić', 'Pljevaljčić', 'Pobulić', 'Podinić', 'Podraščić', 'Podrić', 'Poznanić', 'Poznić', 'Pojkić', 'Polić', 'Polomčić', 'Polugić', 'Ponjavić', 'Pop Lazić', 'Popadić', 'Poparić', 'Popčić', 'Potrebić', 'Poštić', 'Pravdić', 'Pražić', 'Predić', 'Prekić', 'Prelić', 'Prendić', 'Prešić', 'Pržić', 'Pribić', 'Pribišić', 'Prigodić', 'Prijić', 'Prikić', 'Prišić', 'Prodanić', 'Prokić', 'Prokopić', 'Prolić', 'Protić', 'Prošić', 'Pruginić', 'Prunić', 'Pršendić', 'Pualić', 'Puvalić', 'Puvačić', 'Pudarić', 'Punišić', 'Purešić', 'Purić', 'Purišić', 'Puslojić', 'Pušeljić', 'Ravilić', 'Radančić', 'Radeljić', 'Radetić', 'Radešić', 'Radivojšić', 'Radikić', 'Radisavić', 'Radić', 'Radičić', 'Radišić', 'Radnić', 'Radoičić', 'Radojičić', 'Radojkić', 'Radojčić', 'Radonić', 'Radonjić', 'Radosavkić', 'Radotić', 'Radukić', 'Radulić', 'Raduljčić', 'Raducić', 'Radušić', 'Razumenić', 'Railić', 'Raičić', 'Rajačić', 'Rajić', 'Rajičić', 'Rajlić', 'Rajčetić', 'Rajčić', 'Rajšić', 'Rakezić', 'Raketić', 'Rakinić', 'Rakitić', 'Rakić', 'Rakonić', 'Raletić', 'Ralić', 'Raljić', 'Ramić', 'Ranđić', 'Ranisavić', 'Rankić', 'Rančić', 'Raonić', 'Rapaić', 'Rapajić', 'Rasulić', 'Ratkelić', 'Raulić', 'Racić', 'Račić', 'Rašetić', 'Rašić', 'Rašljić', 'Regodić', 'Regulić', 'Rekalić', 'Reljić', 'Remetić', 'Rendulić', 'Repašić', 'Resimić', 'Redžić', 'Ribarić', 'Riboškić', 'Riđošić', 'Riznić', 'Rinčić', 'Risimić', 'Ristanić', 'Ristić', 'Rmandić', 'Rnić', 'Rogić', 'Roglić', 'Rogonjić', 'Rogulić', 'Rodić', 'Rozgić', 'Rokvić', 'Roknić', 'Roksandić', 'Roksić', 'Roljić', 'Romanić', 'Romić', 'Rosić', 'Roškić', 'Ruvidić', 'Rudić', 'Rudonjić', 'Ružić', 'Ružičić', 'Ružojčić', 'Rumenić', 'Rundić', 'Runjajić', 'Rusalić', 'Rutešić', 'Rutonić', 'Ruškić', 'Sabljić', 'Savandić', 'Savatić', 'Savelić', 'Saveljić', 'Savić', 'Savičić', 'Savkić', 'Savurdić', 'Savčić', 'Salatić', 'Samardžić', 'Sandić', 'Sapardić', 'Saramandić', 'Sarić', 'Satarić', 'Svetličić', 'Svilarić', 'Svojić', 'Sekanić', 'Sekulić', 'Selenić', 'Sendrić', 'Senić', 'Seničić', 'Sentić', 'Setenčić', 'Sibinkić', 'Sibinčić', 'Sikimić', 'Simanić', 'Simendić', 'Simetić', 'Simić', 'Simurdić', 'Sinđelić', 'Sinđić', 'Sinkić', 'Sitničić', 'Sjeničić', 'Skakić', 'Skelić', 'Skendžić', 'Skerlić', 'Skokić', 'Skočajić', 'Skočić', 'Skrobić', 'Skulić', 'Slavić', 'Slavnić', 'Sladić', 'Slović', 'Smilić', 'Smiljanić', 'Smiljić', 'Smiljkić', 'Smoljanić', 'Smrekić', 'Sovrlić', 'Sovtić', 'Sojkić', 'Sokić', 'Soknić', 'Soldatić', 'Sorajić', 'Soskić', 'Sofijanić', 'Sofranić', 'Sofrenić', 'Sofronić', 'Spaić', 'Spakić', 'Sparić', 'Spasenić', 'Spasić', 'Spenčić', 'Sperlić', 'Spirić', 'Spremić', 'Spužić', 'Sredić', 'Sretić', 'Stavrić', 'Stajić', 'Stajkić', 'Stajčić', 'Stajšić', 'Stakić', 'Stakušić', 'Stamatić', 'Stambolić', 'Stamenić', 'Stamenčić', 'Stanarčić', 'Stanetić', 'Stanikić', 'Stanisavić', 'Stanić', 'Staničić', 'Stanišić', 'Stankić', 'Stanovčić', 'Stanojčić', 'Stanušić', 'Stančetić', 'Stančić', 'Stašić', 'Stevandić', 'Stevanetić', 'Stevanić', 'Stevelić', 'Stević', 'Stevčić', 'Stegić', 'Stegnjaić', 'Stegnjajić', 'Stekić', 'Steljić', 'Stepandić', 'Stepanić', 'Stepić', 'Stijačić', 'Stijepić', 'Stikić', 'Stjepić', 'Stožinić', 'Stojanić', 'Stojankić', 'Stojančić', 'Stojačić', 'Stojić', 'Stojičić', 'Stojkić', 'Stojnić', 'Stojčić', 'Stojšić', 'Stokanić', 'Stokić', 'Stolić', 'Stoparić', 'Stopić', 'Stošić', 'Strajnić', 'Strahinić', 'Strahinjić', 'Strinić', 'Subotić', 'Suvajdžić', 'Sumenić', 'Sunarić', 'Surlić', 'Suručić', 'Tadić', 'Tajsić', 'Tamindžić', 'Tanasić', 'Tanić', 'Tankosić', 'Tančić', 'Tarabić', 'Tasić', 'Tatišić', 'Tvrdišić', 'Teodosić', 'Tepić', 'Tepšić', 'Terzić', 'Teslić', 'Tešanić', 'Tešankić', 'Tešendić', 'Tešinić', 'Tešić', 'Tijanić', 'Timilić', 'Timotić', 'Tirić', 'Tirnanić', 'Tmušić', 'Tovarišić', 'Todić', 'Todorić', 'Todosić', 'Tojić', 'Tokalić', 'Toljagić', 'Tomanić', 'Tomecić', 'Tominčić', 'Tomić', 'Tomičić', 'Tomonjić', 'Tomčić', 'Tontić', 'Tončić', 'Topić', 'Topličić', 'Topolić', 'Toskić', 'Tošanić', 'Tošić', 'Travorić', 'Traparić', 'Trenčić', 'Trivalić', 'Trivić', 'Trivunić', 'Trivunčić', 'Trijić', 'Trikić', 'Trindić', 'Tripić', 'Trifunjagić', 'Trišić', 'Trmčić', 'Trninić', 'Trnić', 'Trošić', 'Trubajić', 'Trudić', 'Trujić', 'Trujkić', 'Tubonjić', 'Tukelić', 'Tumarić', 'Tupajić', 'Turajlić', 'Turnić', 'Turudić', 'Turunčić', 'Tutić', 'Tutorić', 'Tutulić', 'Tufegdžić', 'Tucić', 'Ćajić', 'Ćalić', 'Ćatić', 'Ćebić', 'Ćelić', 'Ćeranić', 'Ćipranić', 'Ćirić', 'Ćirjanić', 'Ćojbašić', 'Ćopić', 'Ćorić', 'Ćosić', 'Ćuić', 'Ćujić', 'Ćupić', 'Ćurdić', 'Ćurić', 'Ćurčić', 'Ćušić', 'Ubavić', 'Ubavkić', 'Uvalić', 'Uverić', 'Uglješić', 'Ugrinić', 'Ugrinčić', 'Ugričić', 'Udovičić', 'Udovčić', 'Umeljić', 'Umetić', 'Umiljendić', 'Uršikić', 'Ustić', 'Utvić', 'Ušendić', 'Farkić', 'Fatić', 'Femić', 'Filipić', 'Fotirić', 'Fotić', 'Frtunić', 'Hadži Antić', 'Hadži Jovančić', 'Hadži Nikolić', 'Hadži Ristić', 'Hadži Tančić', 'Hadžić', 'Hinić', 'Hristić', 'Cajić', 'Cakić', 'Carić', 'Caričić', 'Cvejić', 'Cvetić', 'Cvijetić', 'Cvijić', 'Cvikić', 'Cvišić', 'Cenić', 'Cenkić', 'Civišić', 'Civrić', 'Ciglić', 'Ciklušić', 'Cicvarić', 'Cmiljanić', 'Cmolić', 'Conić', 'Crnovčić', 'Cukanić', 'Cukić', 'Cuparić', 'Čabrić', 'Čavić', 'Čajić', 'Čalenić', 'Čalić', 'Čamagić', 'Čantrić', 'Čaprnjić', 'Čarapić', 'Čarnić', 'Čvokić', 'Čvorić', 'Čeleketić', 'Čemerikić', 'Čečarić', 'Čivčić', 'Čikarić', 'Čikić', 'Čiplić', 'Čipčić', 'Čičić', 'Čkovrić', 'Čobelić', 'Čobeljić', 'Čović', 'Čojić', 'Čojčić', 'Čolanić', 'Čolić', 'Čomić', 'Čonkić', 'Čonjagić', 'Čorbić', 'Čotrić', 'Čočurić', 'Čubrić', 'Čudić', 'Čukarić', 'Čukić', 'Čumić', 'Čupeljić', 'Čuperkić', 'Čupić', 'Čuturić', 'Džavrić', 'Džajić', 'Džambić', 'Džadžić', 'Dželebdžić', 'Džikić', 'Džinić', 'Džodić', 'Džombić', 'Džomić', 'Džonić', 'Šakić', 'Šakotić', 'Šalinić', 'Šamatić', 'Šantić', 'Šapić', 'Šaponić', 'Šaponjić', 'Šapurić', 'Šarančić', 'Šarić', 'Šarkić', 'Šaronjić', 'Šašić', 'Švabić', 'Ševarlić', 'Šević', 'Ševkušić', 'Šestić', 'Šibalić', 'Šijakinjić', 'Šijačić', 'Šikanić', 'Šikanjić', 'Šimšić', 'Šipetić', 'Šišić', 'Škobić', 'Škodrić', 'Škondrić', 'Škorić', 'Škrbić', 'Škrebić', 'Škulić', 'Škundrić', 'Šljapić', 'Šljivić', 'Šljukić', 'Šmigić', 'Šobajić', 'Šobačić', 'Šorgić', 'Šoškić', 'Špirić', 'Štakić', 'Štulić', 'Šubakić', 'Šubarić', 'Šubić', 'Šuleić', 'Šulejić', 'Šuletić', 'Šulkić', 'Šuluburić', 'Šuljagić', 'Šumatić', 'Šunderić', 'Šunkić', 'Šunjevarić', 'Šutuljić', 'Šušić', 'Šušulić',
    );
}
</codefragment>
  </duplication>
  <duplication lines="28" tokens="490">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/es_ES/Company.php" line="20"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/en_US/Company.php" line="13"/>
    <codefragment>    protected static $catchPhraseWords = array(
        array(
            'Adaptive', 'Advanced', 'Ameliorated', 'Assimilated', 'Automated', 'Balanced', 'Business-focused', 'Centralized', 'Cloned', 'Compatible', 'Configurable', 'Cross-group', 'Cross-platform', 'Customer-focused', 'Customizable', 'Decentralized', 'De-engineered', 'Devolved', 'Digitized', 'Distributed', 'Diverse', 'Down-sized', 'Enhanced', 'Enterprise-wide', 'Ergonomic', 'Exclusive', 'Expanded', 'Extended', 'Facetoface', 'Focused', 'Front-line', 'Fully-configurable', 'Function-based', 'Fundamental', 'Future-proofed', 'Grass-roots', 'Horizontal', 'Implemented', 'Innovative', 'Integrated', 'Intuitive', 'Inverse', 'Managed', 'Mandatory', 'Monitored', 'Multi-channelled', 'Multi-lateral', 'Multi-layered', 'Multi-tiered', 'Networked', 'Object-based', 'Open-architected', 'Open-source', 'Operative', 'Optimized', 'Optional', 'Organic', 'Organized', 'Persevering', 'Persistent', 'Phased', 'Polarised', 'Pre-emptive', 'Proactive', 'Profit-focused', 'Profound', 'Programmable', 'Progressive', 'Public-key', 'Quality-focused', 'Reactive', 'Realigned', 'Re-contextualized', 'Re-engineered', 'Reduced', 'Reverse-engineered', 'Right-sized', 'Robust', 'Seamless', 'Secured', 'Self-enabling', 'Sharable', 'Stand-alone', 'Streamlined', 'Switchable', 'Synchronised', 'Synergistic', 'Synergized', 'Team-oriented', 'Total', 'Triple-buffered', 'Universal', 'Up-sized', 'Upgradable', 'User-centric', 'User-friendly', 'Versatile', 'Virtual', 'Visionary', 'Vision-oriented'
        ),
        array(
            '24hour', '24/7', '3rdgeneration', '4thgeneration', '5thgeneration', '6thgeneration', 'actuating', 'analyzing', 'assymetric', 'asynchronous', 'attitude-oriented', 'background', 'bandwidth-monitored', 'bi-directional', 'bifurcated', 'bottom-line', 'clear-thinking', 'client-driven', 'client-server', 'coherent', 'cohesive', 'composite', 'context-sensitive', 'contextually-based', 'content-based', 'dedicated', 'demand-driven', 'didactic', 'directional', 'discrete', 'disintermediate', 'dynamic', 'eco-centric', 'empowering', 'encompassing', 'even-keeled', 'executive', 'explicit', 'exuding', 'fault-tolerant', 'foreground', 'fresh-thinking', 'full-range', 'global', 'grid-enabled', 'heuristic', 'high-level', 'holistic', 'homogeneous', 'human-resource', 'hybrid', 'impactful', 'incremental', 'intangible', 'interactive', 'intermediate', 'leadingedge', 'local', 'logistical', 'maximized', 'methodical', 'mission-critical', 'mobile', 'modular', 'motivating', 'multimedia', 'multi-state', 'multi-tasking', 'national', 'needs-based', 'neutral', 'nextgeneration', 'non-volatile', 'object-oriented', 'optimal', 'optimizing', 'radical', 'real-time', 'reciprocal', 'regional', 'responsive', 'scalable', 'secondary', 'solution-oriented', 'stable', 'static', 'systematic', 'systemic', 'system-worthy', 'tangible', 'tertiary', 'transitional', 'uniform', 'upward-trending', 'user-facing', 'value-added', 'web-enabled', 'well-modulated', 'zeroadministration', 'zerodefect', 'zerotolerance'
        ),
        array(
            'ability', 'access', 'adapter', 'algorithm', 'alliance', 'analyzer', 'application', 'approach', 'architecture', 'archive', 'artificialintelligence', 'array', 'attitude', 'benchmark', 'budgetarymanagement', 'capability', 'capacity', 'challenge', 'circuit', 'collaboration', 'complexity', 'concept', 'conglomeration', 'contingency', 'core', 'customerloyalty', 'database', 'data-warehouse', 'definition', 'emulation', 'encoding', 'encryption', 'extranet', 'firmware', 'flexibility', 'focusgroup', 'forecast', 'frame', 'framework', 'function', 'functionalities', 'GraphicInterface', 'groupware', 'GraphicalUserInterface', 'hardware', 'help-desk', 'hierarchy', 'hub', 'implementation', 'info-mediaries', 'infrastructure', 'initiative', 'installation', 'instructionset', 'interface', 'internetsolution', 'intranet', 'knowledgeuser', 'knowledgebase', 'localareanetwork', 'leverage', 'matrices', 'matrix', 'methodology', 'middleware', 'migration', 'model', 'moderator', 'monitoring', 'moratorium', 'neural-net', 'openarchitecture', 'opensystem', 'orchestration', 'paradigm', 'parallelism', 'policy', 'portal', 'pricingstructure', 'processimprovement', 'product', 'productivity', 'project', 'projection', 'protocol', 'securedline', 'service-desk', 'software', 'solution', 'standardization', 'strategy', 'structure', 'success', 'superstructure', 'support', 'synergy', 'systemengine', 'task-force', 'throughput', 'time-frame', 'toolset', 'utilisation', 'website', 'workforce'
        )
    );

    protected static $bsWords = array(
        array(
            'implement', 'utilize', 'integrate', 'streamline', 'optimize', 'evolve', 'transform', 'embrace', 'enable', 'orchestrate', 'leverage', 'reinvent', 'aggregate', 'architect', 'enhance', 'incentivize', 'morph', 'empower', 'envisioneer', 'monetize', 'harness', 'facilitate', 'seize', 'disintermediate', 'synergize', 'strategize', 'deploy', 'brand', 'grow', 'target', 'syndicate', 'synthesize', 'deliver', 'mesh', 'incubate', 'engage', 'maximize', 'benchmark', 'expedite', 'reintermediate', 'whiteboard', 'visualize', 'repurpose', 'innovate', 'scale', 'unleash', 'drive', 'extend', 'engineer', 'revolutionize', 'generate', 'exploit', 'transition', 'e-enable', 'iterate', 'cultivate', 'matrix', 'productize', 'redefine', 'recontextualize'
        ),
        array(
            'clicks-and-mortar', 'value-added', 'vertical', 'proactive', 'robust', 'revolutionary', 'scalable', 'leading-edge', 'innovative', 'intuitive', 'strategic', 'e-business', 'mission-critical', 'sticky', 'one-to-one', '24/7', 'end-to-end', 'global', 'B2B', 'B2C', 'granular', 'frictionless', 'virtual', 'viral', 'dynamic', '24/365', 'best-of-breed', 'killer', 'magnetic', 'bleeding-edge', 'web-enabled', 'interactive', 'dot-com', 'sexy', 'back-end', 'real-time', 'efficient', 'front-end', 'distributed', 'seamless', 'extensible', 'turn-key', 'world-class', 'open-source', 'cross-platform', 'cross-media', 'synergistic', 'bricks-and-clicks', 'out-of-the-box', 'enterprise', 'integrated', 'impactful', 'wireless', 'transparent', 'next-generation', 'cutting-edge', 'user-centric', 'visionary', 'customized', 'ubiquitous', 'plug-and-play', 'collaborative', 'compelling', 'holistic', 'rich'
        ),
        array(
            'synergies', 'web-readiness', 'paradigms', 'markets', 'partnerships', 'infrastructures', 'platforms', 'initiatives', 'channels', 'eyeballs', 'communities', 'ROI', 'solutions', 'e-tailers', 'e-services', 'action-items', 'portals', 'niches', 'technologies', 'content', 'vortals', 'supply-chains', 'convergence', 'relationships', 'architectures', 'interfaces', 'e-markets', 'e-commerce', 'systems', 'bandwidth', 'infomediaries', 'models', 'mindshare', 'deliverables', 'users', 'schemas', 'networks', 'applications', 'metrics', 'e-business', 'functionalities', 'experiences', 'webservices', 'methodologies'
        )
    );

    protected static $companyPrefix = array('Asociación', 'Centro', 'Corporación', 'Empresa', 'Gestora', 'Global', 'Grupo', 'Viajes', 'Air');
    protected static $companySuffix = array('e Hijo', 'e Hija', 'e Hijos', 'y Asoc.', 'y Flia.', 'SRL', 'SA', 'S. de H.');

    /**
</codefragment>
  </duplication>
  <duplication lines="39" tokens="267">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/ne_NP/Address.php" line="65"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/en_US/Address.php" line="20"/>
    <codefragment>    protected static $country = array(
        'Afghanistan', 'Albania', 'Algeria', 'American Samoa', 'Andorra', 'Angola', 'Anguilla', 'Antarctica (the territory South of 60 deg S)', 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Aruba', 'Australia', 'Austria', 'Azerbaijan',
        'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivia', 'Bosnia and Herzegovina', 'Botswana', 'Bouvet Island (Bouvetoya)', 'Brazil', 'British Indian Ocean Territory (Chagos Archipelago)', 'British Virgin Islands', 'Brunei Darussalam', 'Bulgaria', 'Burkina Faso', 'Burundi',
        'Cambodia', 'Cameroon', 'Canada', 'Cape Verde', 'Cayman Islands', 'Central African Republic', 'Chad', 'Chile', 'China', 'Christmas Island', 'Cocos (Keeling) Islands', 'Colombia', 'Comoros', 'Congo', 'Cook Islands', 'Costa Rica', 'Cote d\'Ivoire', 'Croatia', 'Cuba', 'Cyprus', 'Czech Republic',
        'Denmark', 'Djibouti', 'Dominica', 'Dominican Republic',
        'Ecuador', 'Egypt', 'El Salvador', 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia',
        'Faroe Islands', 'Falkland Islands (Malvinas)', 'Fiji', 'Finland', 'France', 'French Guiana', 'French Polynesia', 'French Southern Territories',
        'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Gibraltar', 'Greece', 'Greenland', 'Grenada', 'Guadeloupe', 'Guam', 'Guatemala', 'Guernsey', 'Guinea', 'Guinea-Bissau', 'Guyana',
        'Haiti', 'Heard Island and McDonald Islands', 'Holy See (Vatican City State)', 'Honduras', 'Hong Kong', 'Hungary',
        'Iceland', 'India', 'Indonesia', 'Iran', 'Iraq', 'Ireland', 'Isle of Man', 'Israel', 'Italy',
        'Jamaica', 'Japan', 'Jersey', 'Jordan',
        'Kazakhstan', 'Kenya', 'Kiribati', 'Korea', 'Korea', 'Kuwait', 'Kyrgyz Republic',
        'Lao People\'s Democratic Republic', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia', 'Libyan Arab Jamahiriya', 'Liechtenstein', 'Lithuania', 'Luxembourg',
        'Macao', 'Macedonia', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives', 'Mali', 'Malta', 'Marshall Islands', 'Martinique', 'Mauritania', 'Mauritius', 'Mayotte', 'Mexico', 'Micronesia', 'Moldova', 'Monaco', 'Mongolia', 'Montenegro', 'Montserrat', 'Morocco', 'Mozambique', 'Myanmar',
        'Namibia', 'Nauru', 'Nepal', 'Netherlands Antilles', 'Netherlands', 'New Caledonia', 'New Zealand', 'Nicaragua', 'Niger', 'Nigeria', 'Niue', 'Norfolk Island', 'Northern Mariana Islands', 'Norway',
        'Oman',
        'Pakistan', 'Palau', 'Palestinian Territories', 'Panama', 'Papua New Guinea', 'Paraguay', 'Peru', 'Philippines', 'Pitcairn Islands', 'Poland', 'Portugal', 'Puerto Rico',
        'Qatar',
        'Reunion', 'Romania', 'Russian Federation', 'Rwanda',
        'Saint Barthelemy', 'Saint Helena', 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Martin', 'Saint Pierre and Miquelon', 'Saint Vincent and the Grenadines', 'Samoa', 'San Marino', 'Sao Tome and Principe', 'Saudi Arabia', 'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia (Slovak Republic)', 'Slovenia', 'Solomon Islands', 'Somalia', 'South Africa', 'South Georgia and the South Sandwich Islands', 'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Svalbard &amp; Jan Mayen Islands', 'Swaziland', 'Sweden', 'Switzerland', 'Syrian Arab Republic',
        'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand', 'Timor-Leste', 'Togo', 'Tokelau', 'Tonga', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Turkmenistan', 'Turks and Caicos Islands', 'Tuvalu',
        'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom', 'United States of America', 'United States Minor Outlying Islands', 'United States Virgin Islands', 'Uruguay', 'Uzbekistan',
        'Vanuatu', 'Venezuela', 'Vietnam',
        'Wallis and Futuna', 'Western Sahara',
        'Yemen',
        'Zambia', 'Zimbabwe'
    );
    protected static $cityFormats = array(
        '{{cityName}}'
    );
    protected static $streetNameFormats = array(
        '{{firstName}}{{streetSuffix}}',
        '{{lastName}}{{streetSuffix}}'
    );
    protected static $streetAddressFormats = array(
        '{{streetName}}',
    );
    protected static $addressFormats = array(
        "{{city}}-{{wardNumber}}, {{streetAddress}}, {{district}} {{postcode}}",
</codefragment>
  </duplication>
  <duplication lines="26" tokens="249">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/en_IN/Address.php" line="63"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/en_NG/Address.php" line="28"/>
    <codefragment>    protected static $country = array(
        'Afghanistan', 'Albania', 'Algeria', 'American Samoa', 'Andorra', 'Angola', 'Anguilla', 'Antarctica (the territory South of 60 deg S)', 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Aruba', 'Australia', 'Austria', 'Azerbaijan',
        'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivia', 'Bosnia and Herzegovina', 'Botswana', 'Bouvet Island (Bouvetoya)', 'Brazil', 'British Indian Ocean Territory (Chagos Archipelago)', 'British Virgin Islands', 'Brunei Darussalam', 'Bulgaria', 'Burkina Faso', 'Burundi',
        'Cambodia', 'Cameroon', 'Canada', 'Cape Verde', 'Cayman Islands', 'Central African Republic', 'Chad', 'Chile', 'China', 'Christmas Island', 'Cocos (Keeling) Islands', 'Colombia', 'Comoros', 'Congo', 'Congo', 'Cook Islands', 'Costa Rica', 'Cote d\'Ivoire', 'Croatia', 'Cuba', 'Cyprus', 'Czech Republic',
        'Denmark', 'Djibouti', 'Dominica', 'Dominican Republic',
        'Ecuador', 'Egypt', 'El Salvador', 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia',
        'Faroe Islands', 'Falkland Islands (Malvinas)', 'Fiji', 'Finland', 'France', 'French Guiana', 'French Polynesia', 'French Southern Territories',
        'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Gibraltar', 'Greece', 'Greenland', 'Grenada', 'Guadeloupe', 'Guam', 'Guatemala', 'Guernsey', 'Guinea', 'Guinea-Bissau', 'Guyana',
        'Haiti', 'Heard Island and McDonald Islands', 'Holy See (Vatican City State)', 'Honduras', 'Hong Kong', 'Hungary',
        'Iceland', 'India', 'Indonesia', 'Iran', 'Iraq', 'Ireland', 'Isle of Man', 'Israel', 'Italy',
        'Jamaica', 'Japan', 'Jersey', 'Jordan',
        'Kazakhstan', 'Kenya', 'Kiribati', 'Korea', 'Korea', 'Kuwait', 'Kyrgyz Republic',
        'Lao People\'s Democratic Republic', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia', 'Libyan Arab Jamahiriya', 'Liechtenstein', 'Lithuania', 'Luxembourg',
        'Macao', 'Macedonia', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives', 'Mali', 'Malta', 'Marshall Islands', 'Martinique', 'Mauritania', 'Mauritius', 'Mayotte', 'Mexico', 'Micronesia', 'Moldova', 'Monaco', 'Mongolia', 'Montenegro', 'Montserrat', 'Morocco', 'Mozambique', 'Myanmar',
        'Namibia', 'Nauru', 'Nepal', 'Netherlands Antilles', 'Netherlands', 'New Caledonia', 'New Zealand', 'Nicaragua', 'Niger', 'Nigeria', 'Niue', 'Norfolk Island', 'Northern Mariana Islands', 'Norway',
        'Oman',
        'Pakistan', 'Palau', 'Palestinian Territories', 'Panama', 'Papua New Guinea', 'Paraguay', 'Peru', 'Philippines', 'Pitcairn Islands', 'Poland', 'Portugal', 'Puerto Rico',
        'Qatar',
        'Reunion', 'Romania', 'Russian Federation', 'Rwanda',
        'Saint Barthelemy', 'Saint Helena', 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Martin', 'Saint Pierre and Miquelon', 'Saint Vincent and the Grenadines', 'Samoa', 'San Marino', 'Sao Tome and Principe', 'Saudi Arabia', 'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia (Slovak Republic)', 'Slovenia', 'Solomon Islands', 'Somalia', 'South Africa', 'South Georgia and the South Sandwich Islands', 'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Svalbard &amp; Jan Mayen Islands', 'Swaziland', 'Sweden', 'Switzerland', 'Syrian Arab Republic',
        'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand', 'Timor-Leste', 'Togo', 'Tokelau', 'Tonga', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Turkmenistan', 'Turks and Caicos Islands', 'Tuvalu',
        'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom', 'United States of America', 'United States Minor Outlying Islands', 'United States Virgin Islands', 'Uruguay', 'Uzbekistan',
        'Vanuatu', 'Venezuela', 'Vietnam',
        'Wallis and Futuna', 'Western Sahara',
        'Yemen',
        'Zambia', 'Zimbabwe'
</codefragment>
  </duplication>
  <duplication lines="44" tokens="87">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/sk_SK/Person.php" line="115"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/cs_CZ/Person.php" line="488"/>
    <codefragment>    public function title($gender = null)
    {
        return static::titleMale();
    }

    /**
     * replaced by specific unisex slovakian title
     */
    public static function titleMale()
    {
        return static::randomElement(static::$title);
    }

    /**
     * replaced by specific unisex slovakian title
     */
    public static function titleFemale()
    {
        return static::titleMale();
    }

    /**
     * @param string|null $gender 'male', 'female' or null for any
     * @example 'Novotný'
     */
    public function lastName($gender = null)
    {
        if ($gender === static::GENDER_MALE) {
            return static::lastNameMale();
        } elseif ($gender === static::GENDER_FEMALE) {
            return static::lastNameFemale();
        }

        return $this-&gt;generator-&gt;parse(static::randomElement(static::$lastNameFormat));
    }

    public static function lastNameMale()
    {
        return static::randomElement(static::$lastNameMale);
    }

    public static function lastNameFemale()
    {
        return static::randomElement(static::$lastNameFemale);
</codefragment>
  </duplication>
  <duplication lines="68" tokens="333">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/de_AT/Address.php" line="47"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/de_DE/Address.php" line="56"/>
    <codefragment>    protected static $country = array(
        'Afghanistan', 'Alandinseln', 'Albanien', 'Algerien', 'Amerikanisch-Ozeanien', 'Amerikanisch-Samoa', 'Amerikanische Jungferninseln', 'Andorra', 'Angola', 'Anguilla', 'Antarktis', 'Antigua und Barbuda', 'Argentinien', 'Armenien', 'Aruba', 'Aserbaidschan', 'Australien', 'Ägypten', 'Äquatorialguinea', 'Äthiopien', 'Äußeres Ozeanien',
        'Bahamas', 'Bahrain', 'Bangladesch', 'Barbados', 'Belarus', 'Belgien', 'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivien', 'Bosnien und Herzegowina', 'Botsuana', 'Bouvetinsel', 'Brasilien', 'Britische Jungferninseln', 'Britisches Territorium im Indischen Ozean', 'Brunei Darussalam', 'Bulgarien', 'Burkina Faso', 'Burundi',
        'Chile', 'China', 'Cookinseln', 'Costa Rica', 'Côte d’Ivoire',
        'Demokratische Republik Kongo', 'Demokratische Volksrepublik Korea', 'Deutschland', 'Dominica', 'Dominikanische Republik', 'Dschibuti', 'Dänemark',
        'Ecuador', 'El Salvador', 'Eritrea', 'Estland', 'Europäische Union',
        'Falklandinseln', 'Fidschi', 'Finnland', 'Frankreich', 'Französisch-Guayana', 'Französisch-Polynesien', 'Französische Süd- und Antarktisgebiete', 'Färöer',
        'Gabun', 'Gambia', 'Georgien', 'Ghana', 'Gibraltar', 'Grenada', 'Griechenland', 'Grönland', 'Guadeloupe', 'Guam', 'Guatemala', 'Guernsey', 'Guinea', 'Guinea-Bissau', 'Guyana',
        'Haiti', 'Heard- und McDonald-Inseln', 'Honduras',
        'Indien', 'Indonesien', 'Irak', 'Iran', 'Irland', 'Island', 'Isle of Man', 'Israel', 'Italien',
        'Jamaika', 'Japan', 'Jemen', 'Jersey', 'Jordanien',
        'Kaimaninseln', 'Kambodscha', 'Kamerun', 'Kanada', 'Kap Verde', 'Kasachstan', 'Katar', 'Kenia', 'Kirgisistan', 'Kiribati', 'Kokosinseln', 'Kolumbien', 'Komoren', 'Kongo', 'Kroatien', 'Kuba', 'Kuwait',
        'Laos', 'Lesotho', 'Lettland', 'Libanon', 'Liberia', 'Libyen', 'Liechtenstein', 'Litauen', 'Luxemburg',
        'Madagaskar', 'Malawi', 'Malaysia', 'Malediven', 'Mali', 'Malta', 'Marokko', 'Marshallinseln', 'Martinique', 'Mauretanien', 'Mauritius', 'Mayotte', 'Mazedonien', 'Mexiko', 'Mikronesien', 'Monaco', 'Mongolei', 'Montenegro', 'Montserrat', 'Mosambik', 'Myanmar',
        'Namibia', 'Nauru', 'Nepal', 'Neukaledonien', 'Neuseeland', 'Nicaragua', 'Niederlande', 'Niederländische Antillen', 'Niger', 'Nigeria', 'Niue', 'Norfolkinsel', 'Norwegen', 'Nördliche Marianen',
        'Oman', 'Osttimor', 'Österreich',
        'Pakistan', 'Palau', 'Palästinensische Gebiete', 'Panama', 'Papua-Neuguinea', 'Paraguay', 'Peru', 'Philippinen', 'Pitcairn', 'Polen', 'Portugal', 'Puerto Rico',
        'Republik Korea', 'Republik Moldau', 'Ruanda', 'Rumänien', 'Russische Föderation', 'Réunion',
        'Salomonen', 'Sambia', 'Samoa', 'San Marino', 'Saudi-Arabien', 'Schweden', 'Schweiz', 'Senegal', 'Serbien', 'Serbien und Montenegro', 'Seychellen', 'Sierra Leone', 'Simbabwe', 'Singapur', 'Slowakei', 'Slowenien', 'Somalia', 'Sonderverwaltungszone Hongkong', 'Sonderverwaltungszone Macao', 'Spanien', 'Sri Lanka', 'St. Barthélemy', 'St. Helena', 'St. Kitts und Nevis', 'St. Lucia', 'St. Martin', 'St. Pierre und Miquelon', 'St. Vincent und die Grenadinen', 'Sudan', 'Suriname', 'Svalbard und Jan Mayen', 'Swasiland', 'Syrien', 'São Tomé und Príncipe', 'Südafrika', 'Südgeorgien und die Südlichen Sandwichinseln',
        'Tadschikistan', 'Taiwan', 'Tansania', 'Thailand', 'Togo', 'Tokelau', 'Tonga', 'Trinidad und Tobago', 'Tschad', 'Tschechische Republik', 'Tunesien', 'Turkmenistan', 'Turks- und Caicosinseln', 'Tuvalu', 'Türkei',
        'Uganda', 'Ukraine', 'Unbekannte oder ungültige Region', 'Ungarn', 'Uruguay', 'Usbekistan',
        'Vanuatu', 'Vatikanstadt', 'Venezuela', 'Vereinigte Arabische Emirate', 'Vereinigte Staaten', 'Vereinigtes Königreich', 'Vietnam',
        'Wallis und Futuna', 'Weihnachtsinsel', 'Westsahara',
        'Zentralafrikanische Republik', 'Zypern',
    );

    protected static $cityFormats = array(
        '{{cityName}}',
    );

    protected static $streetNameFormats = array(
        '{{lastName}}{{streetSuffixShort}}',
        '{{firstName}}-{{lastName}}-{{streetSuffixLong}}'
    );

    protected static $streetAddressFormats = array(
        '{{streetName}} {{buildingNumber}}',
    );
    protected static $addressFormats = array(
        "{{streetAddress}}\n{{postcode}} {{city}}",
    );

    public function cityName()
    {
        return static::randomElement(static::$cityNames);
    }

    public function streetSuffixShort()
    {
        return static::randomElement(static::$streetSuffixShort);
    }

    public function streetSuffixLong()
    {
        return static::randomElement(static::$streetSuffixLong);
    }

    /**
     * @example 'Wien'
     */
    public static function state()
    {
        return static::randomElement(static::$state);
    }

    public static function buildingNumber()
    {
        return static::regexify(self::numerify(static::randomElement(static::$buildingNumber)));
</codefragment>
  </duplication>
  <duplication lines="30" tokens="239">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/de_AT/Address.php" line="49"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/de_CH/Address.php" line="80"/>
    <codefragment>        'Bahamas', 'Bahrain', 'Bangladesch', 'Barbados', 'Belarus', 'Belgien', 'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivien', 'Bosnien und Herzegowina', 'Botsuana', 'Bouvetinsel', 'Brasilien', 'Britische Jungferninseln', 'Britisches Territorium im Indischen Ozean', 'Brunei Darussalam', 'Bulgarien', 'Burkina Faso', 'Burundi',
        'Chile', 'China', 'Cookinseln', 'Costa Rica', 'Côte d’Ivoire',
        'Demokratische Republik Kongo', 'Demokratische Volksrepublik Korea', 'Deutschland', 'Dominica', 'Dominikanische Republik', 'Dschibuti', 'Dänemark',
        'Ecuador', 'El Salvador', 'Eritrea', 'Estland', 'Europäische Union',
        'Falklandinseln', 'Fidschi', 'Finnland', 'Frankreich', 'Französisch-Guayana', 'Französisch-Polynesien', 'Französische Süd- und Antarktisgebiete', 'Färöer',
        'Gabun', 'Gambia', 'Georgien', 'Ghana', 'Gibraltar', 'Grenada', 'Griechenland', 'Grönland', 'Guadeloupe', 'Guam', 'Guatemala', 'Guernsey', 'Guinea', 'Guinea-Bissau', 'Guyana',
        'Haiti', 'Heard- und McDonald-Inseln', 'Honduras',
        'Indien', 'Indonesien', 'Irak', 'Iran', 'Irland', 'Island', 'Isle of Man', 'Israel', 'Italien',
        'Jamaika', 'Japan', 'Jemen', 'Jersey', 'Jordanien',
        'Kaimaninseln', 'Kambodscha', 'Kamerun', 'Kanada', 'Kap Verde', 'Kasachstan', 'Katar', 'Kenia', 'Kirgisistan', 'Kiribati', 'Kokosinseln', 'Kolumbien', 'Komoren', 'Kongo', 'Kroatien', 'Kuba', 'Kuwait',
        'Laos', 'Lesotho', 'Lettland', 'Libanon', 'Liberia', 'Libyen', 'Liechtenstein', 'Litauen', 'Luxemburg',
        'Madagaskar', 'Malawi', 'Malaysia', 'Malediven', 'Mali', 'Malta', 'Marokko', 'Marshallinseln', 'Martinique', 'Mauretanien', 'Mauritius', 'Mayotte', 'Mazedonien', 'Mexiko', 'Mikronesien', 'Monaco', 'Mongolei', 'Montenegro', 'Montserrat', 'Mosambik', 'Myanmar',
        'Namibia', 'Nauru', 'Nepal', 'Neukaledonien', 'Neuseeland', 'Nicaragua', 'Niederlande', 'Niederländische Antillen', 'Niger', 'Nigeria', 'Niue', 'Norfolkinsel', 'Norwegen', 'Nördliche Marianen',
        'Oman', 'Osttimor', 'Österreich',
        'Pakistan', 'Palau', 'Palästinensische Gebiete', 'Panama', 'Papua-Neuguinea', 'Paraguay', 'Peru', 'Philippinen', 'Pitcairn', 'Polen', 'Portugal', 'Puerto Rico',
        'Republik Korea', 'Republik Moldau', 'Ruanda', 'Rumänien', 'Russische Föderation', 'Réunion',
        'Salomonen', 'Sambia', 'Samoa', 'San Marino', 'Saudi-Arabien', 'Schweden', 'Schweiz', 'Senegal', 'Serbien', 'Serbien und Montenegro', 'Seychellen', 'Sierra Leone', 'Simbabwe', 'Singapur', 'Slowakei', 'Slowenien', 'Somalia', 'Sonderverwaltungszone Hongkong', 'Sonderverwaltungszone Macao', 'Spanien', 'Sri Lanka', 'St. Barthélemy', 'St. Helena', 'St. Kitts und Nevis', 'St. Lucia', 'St. Martin', 'St. Pierre und Miquelon', 'St. Vincent und die Grenadinen', 'Sudan', 'Suriname', 'Svalbard und Jan Mayen', 'Swasiland', 'Syrien', 'São Tomé und Príncipe', 'Südafrika', 'Südgeorgien und die Südlichen Sandwichinseln',
        'Tadschikistan', 'Taiwan', 'Tansania', 'Thailand', 'Togo', 'Tokelau', 'Tonga', 'Trinidad und Tobago', 'Tschad', 'Tschechische Republik', 'Tunesien', 'Turkmenistan', 'Turks- und Caicosinseln', 'Tuvalu', 'Türkei',
        'Uganda', 'Ukraine', 'Unbekannte oder ungültige Region', 'Ungarn', 'Uruguay', 'Usbekistan',
        'Vanuatu', 'Vatikanstadt', 'Venezuela', 'Vereinigte Arabische Emirate', 'Vereinigte Staaten', 'Vereinigtes Königreich', 'Vietnam',
        'Wallis und Futuna', 'Weihnachtsinsel', 'Westsahara',
        'Zentralafrikanische Republik', 'Zypern',
    );

    protected static $cityFormats = array(
        '{{cityName}}',
    );

    protected static $streetNameFormats = array(
        '{{lastName}}{{streetSuffixShort}}',
</codefragment>
  </duplication>
  <duplication lines="26" tokens="248">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/ne_NP/Address.php" line="65"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/vi_VN/Address.php" line="91"/>
    <codefragment>    protected static $country = array(
        'Afghanistan', 'Albania', 'Algeria', 'American Samoa', 'Andorra', 'Angola', 'Anguilla', 'Antarctica (the territory South of 60 deg S)', 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Aruba', 'Australia', 'Austria', 'Azerbaijan',
        'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivia', 'Bosnia and Herzegovina', 'Botswana', 'Bouvet Island (Bouvetoya)', 'Brazil', 'British Indian Ocean Territory (Chagos Archipelago)', 'British Virgin Islands', 'Brunei Darussalam', 'Bulgaria', 'Burkina Faso', 'Burundi',
        'Cambodia', 'Cameroon', 'Canada', 'Cape Verde', 'Cayman Islands', 'Central African Republic', 'Chad', 'Chile', 'China', 'Christmas Island', 'Cocos (Keeling) Islands', 'Colombia', 'Comoros', 'Congo', 'Cook Islands', 'Costa Rica', 'Cote d\'Ivoire', 'Croatia', 'Cuba', 'Cyprus', 'Czech Republic',
        'Denmark', 'Djibouti', 'Dominica', 'Dominican Republic',
        'Ecuador', 'Egypt', 'El Salvador', 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia',
        'Faroe Islands', 'Falkland Islands (Malvinas)', 'Fiji', 'Finland', 'France', 'French Guiana', 'French Polynesia', 'French Southern Territories',
        'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Gibraltar', 'Greece', 'Greenland', 'Grenada', 'Guadeloupe', 'Guam', 'Guatemala', 'Guernsey', 'Guinea', 'Guinea-Bissau', 'Guyana',
        'Haiti', 'Heard Island and McDonald Islands', 'Holy See (Vatican City State)', 'Honduras', 'Hong Kong', 'Hungary',
        'Iceland', 'India', 'Indonesia', 'Iran', 'Iraq', 'Ireland', 'Isle of Man', 'Israel', 'Italy',
        'Jamaica', 'Japan', 'Jersey', 'Jordan',
        'Kazakhstan', 'Kenya', 'Kiribati', 'Korea', 'Korea', 'Kuwait', 'Kyrgyz Republic',
        'Lao People\'s Democratic Republic', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia', 'Libyan Arab Jamahiriya', 'Liechtenstein', 'Lithuania', 'Luxembourg',
        'Macao', 'Macedonia', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives', 'Mali', 'Malta', 'Marshall Islands', 'Martinique', 'Mauritania', 'Mauritius', 'Mayotte', 'Mexico', 'Micronesia', 'Moldova', 'Monaco', 'Mongolia', 'Montenegro', 'Montserrat', 'Morocco', 'Mozambique', 'Myanmar',
        'Namibia', 'Nauru', 'Nepal', 'Netherlands Antilles', 'Netherlands', 'New Caledonia', 'New Zealand', 'Nicaragua', 'Niger', 'Nigeria', 'Niue', 'Norfolk Island', 'Northern Mariana Islands', 'Norway',
        'Oman',
        'Pakistan', 'Palau', 'Palestinian Territories', 'Panama', 'Papua New Guinea', 'Paraguay', 'Peru', 'Philippines', 'Pitcairn Islands', 'Poland', 'Portugal', 'Puerto Rico',
        'Qatar',
        'Reunion', 'Romania', 'Russian Federation', 'Rwanda',
        'Saint Barthelemy', 'Saint Helena', 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Martin', 'Saint Pierre and Miquelon', 'Saint Vincent and the Grenadines', 'Samoa', 'San Marino', 'Sao Tome and Principe', 'Saudi Arabia', 'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia (Slovak Republic)', 'Slovenia', 'Solomon Islands', 'Somalia', 'South Africa', 'South Georgia and the South Sandwich Islands', 'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Svalbard &amp; Jan Mayen Islands', 'Swaziland', 'Sweden', 'Switzerland', 'Syrian Arab Republic',
        'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand', 'Timor-Leste', 'Togo', 'Tokelau', 'Tonga', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Turkmenistan', 'Turks and Caicos Islands', 'Tuvalu',
        'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom', 'United States of America', 'United States Minor Outlying Islands', 'United States Virgin Islands', 'Uruguay', 'Uzbekistan',
        'Vanuatu', 'Venezuela', 'Vietnam',
        'Wallis and Futuna', 'Western Sahara',
        'Yemen',
        'Zambia', 'Zimbabwe'
</codefragment>
  </duplication>
  <duplication lines="57" tokens="108">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/ar_JO/Company.php" line="5"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/ar_SA/Company.php" line="7"/>
    <codefragment>class Company extends \Faker\Provider\Company
{
    protected static $formats = array(
        '{{lastName}} {{companySuffix}}',
        '{{companyPrefix}} {{lastName}} {{companySuffix}}',
        '{{companyPrefix}} {{lastName}}',
    );

    protected static $bsWords = array(
        array()
    );

    protected static $catchPhraseWords = array(
        array('الخدمات','الحلول','الانظمة'),
        array(
            'الذهبية','الذكية','المتطورة','المتقدمة', 'الدولية', 'المتخصصه', 'السريعة',
            'المثلى', 'الابداعية', 'المتكاملة', 'المتغيرة', 'المثالية'
            ),
    );

    protected static $companyPrefix = array('شركة','مؤسسة','مجموعة','مكتب','أكاديمية','معرض');

    protected static $companySuffix = array('وأولاده', 'للمساهمة المحدودة', ' ذ.م.م', 'مساهمة عامة', 'وشركائه');

    /**
     * @example 'مؤسسة'
     * @return string
     */
    public function companyPrefix()
    {
        return static::randomElement(self::$companyPrefix);
    }

    /**
     * @example 'Robust full-range hub'
     */
    public function catchPhrase()
    {
        $result = array();
        foreach (static::$catchPhraseWords as &amp;$word) {
            $result[] = static::randomElement($word);
        }

        return join($result, ' ');
    }

    /**
     * @example 'integrate extensible convergence'
     */
    public function bs()
    {
        $result = array();
        foreach (static::$bsWords as &amp;$word) {
            $result[] = static::randomElement($word);
        }

        return join($result, ' ');
</codefragment>
  </duplication>
  <duplication lines="25" tokens="221">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/ar_JO/Address.php" line="61"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/ar_SA/Address.php" line="56"/>
    <codefragment>    protected static $country = array(
        'الكاريبي', 'أمريكا الوسطى', 'أنتيجوا وبربودا', 'أنجولا', 'أنجويلا', 'أندورا', 'اندونيسيا', 'أورجواي', 'أوروبا', 'أوزبكستان', 'أوغندا', 'أوقيانوسيا', 'أوقيانوسيا النائية', 'أوكرانيا', 'ايران', 'أيرلندا', 'أيسلندا', 'ايطاليا',
        'بابوا غينيا الجديدة', 'باراجواي', 'باكستان', 'بالاو', 'بتسوانا', 'بتكايرن', 'بربادوس', 'برمودا', 'بروناي', 'بلجيكا', 'بلغاريا', 'بليز', 'بنجلاديش', 'بنما', 'بنين', 'بوتان', 'بورتوريكو', 'بوركينا فاسو', 'بوروندي', 'بولندا', 'بوليفيا', 'بولينيزيا', 'بولينيزيا الفرنسية', 'بيرو',
        'تانزانيا', 'تايلند', 'تايوان', 'تركمانستان', 'تركيا', 'ترينيداد وتوباغو', 'تشاد', 'توجو', 'توفالو', 'توكيلو', 'تونجا', 'تونس', 'تيمور الشرقية',
        'جامايكا', 'جبل طارق', 'جرينادا', 'جرينلاند', 'جزر الأنتيل الهولندية', 'جزر الترك وجايكوس', 'جزر القمر', 'جزر الكايمن', 'جزر المارشال', 'جزر الملديف', 'جزر الولايات المتحدة البعيدة الصغيرة', 'جزر أولان', 'جزر سليمان', 'جزر فارو', 'جزر فرجين الأمريكية', 'جزر فرجين البريطانية', 'جزر فوكلاند', 'جزر كوك', 'جزر كوكوس', 'جزر ماريانا الشمالية', 'جزر والس وفوتونا', 'جزيرة الكريسماس', 'جزيرة بوفيه', 'جزيرة مان', 'جزيرة نورفوك', 'جزيرة هيرد وماكدونالد', 'جمهورية افريقيا الوسطى', 'جمهورية التشيك', 'جمهورية الدومينيك', 'جمهورية الكونغو الديمقراطية', 'جمهورية جنوب افريقيا', 'جنوب آسيا', 'جنوب أوروبا', 'جنوب شرق آسيا', 'جنوب وسط آسيا', 'جواتيمالا', 'جوادلوب', 'جوام', 'جورجيا', 'جورجيا الجنوبية وجزر ساندويتش الجنوبية', 'جيبوتي', 'جيرسي',
        'دومينيكا',
        'رواندا', 'روسيا', 'روسيا البيضاء', 'رومانيا', 'روينيون',
        'زامبيا', 'زيمبابوي',
        'ساحل العاج', 'ساموا', 'ساموا الأمريكية', 'سانت بيير وميكولون', 'سانت فنسنت وغرنادين', 'سانت كيتس ونيفيس', 'سانت لوسيا', 'سانت مارتين', 'سانت هيلنا', 'سان مارينو', 'ساو تومي وبرينسيبي', 'سريلانكا', 'سفالبارد وجان مايان', 'سلوفاكيا', 'سلوفينيا', 'سنغافورة', 'سوازيلاند', 'سوريا', 'سورينام', 'سويسرا', 'سيراليون', 'سيشل',
        'شرق آسيا', 'شرق افريقيا', 'شرق أوروبا', 'شمال افريقيا', 'شمال أمريكا', 'شمال أوروبا', 'شيلي',
        'صربيا', 'صربيا والجبل الأسود',
        'طاجكستان',
        'عمان',
        'غامبيا', 'غانا', 'غرب آسيا', 'غرب افريقيا', 'غرب أوروبا', 'غويانا', 'غيانا', 'غينيا', 'غينيا الاستوائية', 'غينيا بيساو',
        'فانواتو', 'فرنسا', 'فلسطين', 'فنزويلا', 'فنلندا', 'فيتنام', 'فيجي',
        'قبرص', 'قرغيزستان', 'قطر',
        'كازاخستان', 'كاليدونيا الجديدة', 'كرواتيا', 'كمبوديا', 'كندا', 'كوبا', 'كوريا الجنوبية', 'كوريا الشمالية', 'كوستاريكا', 'كولومبيا', 'كومنولث الدول المستقلة', 'كيريباتي', 'كينيا',
        'لاتفيا', 'لاوس', 'لبنان', 'لوكسمبورج', 'ليبيا', 'ليبيريا', 'ليتوانيا', 'ليختنشتاين', 'ليسوتو',
        'مارتينيك', 'ماكاو الصينية', 'مالطا', 'مالي', 'ماليزيا', 'مايوت', 'مدغشقر', 'مصر', 'مقدونيا', 'ملاوي', 'منغوليا', 'موريتانيا', 'موريشيوس', 'موزمبيق', 'مولدافيا', 'موناكو', 'مونتسرات', 'ميانمار', 'ميكرونيزيا', 'ميلانيزيا',
        'ناميبيا', 'نورو', 'نيبال', 'نيجيريا', 'نيكاراجوا', 'نيوزيلاندا', 'نيوي',
        'هايتي', 'هندوراس', 'هولندا', 'هونج كونج الصينية',
        'وسط آسيا', 'وسط افريقيا',
    );

    protected static $cityFormats = array(
</codefragment>
  </duplication>
  <duplication lines="36" tokens="107">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/ar_JO/Internet.php" line="18"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/ar_SA/Internet.php" line="18"/>
    <codefragment>        'biz', 'com', 'info', 'jo', 'net', 'org',
    );

    protected static $lastNameAscii = array(
        'abbad', 'abbadi', 'abbas', 'abulebbeh', 'flefel', 'hadi', 'hamad', 'hasan', 'jabri', 'kanaan', 'karam', 'maanee', 'melhem', 'nimry', 'obaisi', 'qasem', 'qawasmee', 'rabee', 'rashwani', 'shami', 'zaloum',
    );
    protected static $firstNameAscii = array(
        'abd', 'abdullah', 'ahmad', 'akram', 'amr', 'bashar', 'bilal', 'fadi', 'ibrahim', 'khaled', 'layth', 'mohammad', 'mutaz', 'omar', 'osama', 'rami', 'saleem', 'samer', 'sami', 'yazan',
    );

    public static function lastNameAscii()
    {
        return static::randomElement(static::$lastNameAscii);
    }

    public static function firstNameAscii()
    {
        return static::randomElement(static::$firstNameAscii);
    }

    /**
     * @example 'ahmad.abbadi'
     */
    public function userName()
    {
        $format = static::randomElement(static::$userNameFormats);

        return static::bothify($this-&gt;generator-&gt;parse($format));
    }

    /**
     * @example 'wewebit.jo'
     */
    public function domainName()
    {
        return static::randomElement(static::$lastNameAscii) . '.' . $this-&gt;tld();
</codefragment>
  </duplication>
  <duplication lines="43" tokens="103">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/lv_LV/Address.php" line="63"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/hy_AM/Address.php" line="81"/>
    <codefragment>    public static function buildingNumber()
    {
        return static::numerify(static::randomElement(static::$buildingNumber));
    }

    public function address()
    {
        $format = static::randomElement(static::$addressFormats);

        return $this-&gt;generator-&gt;parse($format);
    }

    public static function country()
    {
        return static::randomElement(static::$country);
    }

    public static function postcode()
    {
        return static::toUpper(static::bothify(static::randomElement(static::$postcode)));
    }

    public static function regionSuffix()
    {
        return static::randomElement(static::$regionSuffix);
    }

    public static function region()
    {
        return static::randomElement(static::$region);
    }

    public static function cityPrefix()
    {
        return static::randomElement(static::$cityPrefix);
    }

    public function city()
    {
        return static::randomElement(static::$city);
    }

    public static function streetPrefix()
</codefragment>
  </duplication>
  <duplication lines="54" tokens="73">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/nb_NO/Address.php" line="140"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/sv_SE/Address.php" line="95"/>
    <codefragment>    protected static $streetNameFormats = array(
        '{{lastName}}{{streetSuffix}}',
        '{{lastName}}{{streetSuffix}}',
        '{{firstName}}{{streetSuffix}}',
        '{{firstName}}{{streetSuffix}}',
        '{{streetPrefix}}{{streetSuffix}}',
        '{{streetPrefix}}{{streetSuffix}}',
        '{{streetPrefix}}{{streetSuffix}}',
        '{{streetPrefix}}{{streetSuffix}}',
        '{{lastName}} {{streetSuffixWord}}'
    );

    /**
    * @var array Norwegian street address formats
    */
    protected static $streetAddressFormats = array(
        '{{streetName}} {{buildingNumber}}'
    );

    /**
    * @var array Norwegian address formats
    */
    protected static $addressFormats = array(
        "{{streetAddress}}\n{{postcode}} {{city}}"
    );

    /**
    * Randomly return a real city name
    *
    * @return string
    */
    public static function cityName()
    {
        return static::randomElement(static::$cityNames);
    }

    public static function streetSuffixWord()
    {
        return static::randomElement(static::$streetSuffixWord);
    }

    public static function streetPrefix()
    {
        return static::randomElement(static::$streetPrefix);
    }

    /**
    * Randomly return a building number.
    *
    * @return string
    */
    public static function buildingNumber()
    {
        return static::toUpper(static::bothify(static::randomElement(static::$buildingNumber)));
</codefragment>
  </duplication>
  <duplication lines="112" tokens="1267">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/sr_Cyrl_RS/Person.php" line="15"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/sr_Cyrl_RS/Person.php" line="128"/>
    <codefragment>        'Ђенадије', 'Ђоко', 'Ђорђе', 'Ђорђије', 'Ђорђо', 'Ђука', 'Ђукан', 'Ђура', 'Ђурашин', 'Ђурађ', 'Ђурисав', 'Ђурисава', 'Ђурица',
        'Ђурко', 'Ђуро', 'Ђурђа', 'Ђурђе', 'Ђурђевка', 'Ђурђица', 'Ђурђија', 'Јаблан', 'Јаворка', 'Јаворко', 'Јагода', 'Јагодинка',
        'Јагош', 'Јадранка', 'Јадранко', 'Јаков', 'Јакша', 'Јана', 'Јандре', 'Јандрија', 'Јанићије', 'Јанко', 'Јановка', 'Јанча',
        'Јарослав', 'Јасен', 'Јасенко', 'Јасмина', 'Јасминка', 'Јасна', 'Јања', 'Јевдокија', 'Јеврем', 'Јевросима', 'Јевта', 'Јевтан',
        'Јевтимије', 'Јевто', 'Језда', 'Јездимир', 'Јека', 'Јела', 'Јелача', 'Јелашин', 'Јелен', 'Јелена', 'Јеленка', 'Јеленко',
        'Јелисава', 'Јелисавета', 'Јелисавка', 'Јелисије', 'Јелица', 'Јелка', 'Јеремија', 'Јерко', 'Јеротије', 'Јефимија', 'Јеша', 'Јова',
        'Јован', 'Јованка', 'Јовица', 'Јовиша', 'Јовка', 'Јовко', 'Јово', 'Јоко', 'Јоксим', 'Јоргованка', 'Јордан', 'Јорданка',
        'Јосиф', 'Југомир', 'Југослав', 'Југољуб', 'Јулија', 'Јулијан', 'Јулијана', 'Јулка', 'Јуноша', 'Јуриша', 'Јустин', 'Љепава',
        'Љепосава', 'Љиља', 'Љиљан', 'Љиљана', 'Љуба', 'Љубан', 'Љубен', 'Љубенко', 'Љубивоје', 'Љубинка', 'Љубинко', 'Љубисав',
        'Љубислав', 'Љубица', 'Љубиша', 'Љубо', 'Љубобрат', 'Љубодраг', 'Љубомир', 'Љубомирка', 'Љубосава', 'Љубоја', 'Љубоје', 'Љупка',
        'Његомир', 'Његомирка', 'Његослава', 'Његош', 'Ћерана', 'Ћира', 'Ћирило', 'Ћирко', 'Ћиро', 'Ћирјак', 'Авакум', 'Аврам',
        'Агница', 'Агнија', 'Адам', 'Аделина', 'Аксентије', 'Алекса', 'Александрон', 'Алексеј', 'Алексија', 'Алексије', 'Алимпије', 'Ана',
        'Анастасија', 'Анда', 'Андреј', 'Андреја', 'Андрија', 'Андријана', 'Андријаш', 'Аница', 'Анка', 'Анкица', 'Антоније', 'Анђа',
        'Анђела', 'Анђелија', 'Анђелка', 'Анђелко', 'Аранђел', 'Арса', 'Арсен', 'Арсеније', 'Арсо', 'Атанасије', 'Атанацко', 'Аћим',
        'Балша', 'Бане', 'Батрић', 'Бајко', 'Бајо', 'Бајчета', 'Берисав', 'Берислав', 'Бериша', 'Берко', 'Бисенија', 'Бисерка',
        'Бисерко', 'Биљан', 'Благица', 'Благиња', 'Благомир', 'Благота', 'Благојa', 'Благоје', 'Блажа', 'Блажен', 'Блаженка', 'Блажо',
        'Блашко', 'Богдан', 'Богдана', 'Богданка', 'Богељ', 'Богиша', 'Богић', 'Богобој', 'Богосав', 'Богослав', 'Богоје', 'Богољуб',
        'Божа', 'Божана', 'Божидар', 'Божидарка', 'Божин', 'Божинка', 'Божица', 'Божићко', 'Божо', 'Боин', 'Боица', 'Бора',
        'Боривој', 'Боривоје', 'Борис', 'Борисав', 'Борислав', 'Борислава', 'Бориславка', 'Бориша', 'Борка', 'Борко', 'Боро', 'Бороје',
        'Борјана', 'Борјанка', 'Боса', 'Босиљка', 'Бошко', 'Бојан', 'Бојана', 'Бојко', 'Бојо', 'Бојчета', 'Бранивој', 'Бранивоје',
        'Бранимир', 'Бранислава', 'Бранка', 'Бранкица', 'Бранко', 'Брано', 'Братимир', 'Братислав', 'Братислава', 'Братован', 'Братољуб', 'Брајан',
        'Брајица', 'Брнча', 'Будимир', 'Будимирка', 'Будимка', 'Будисав', 'Будислав', 'Валерија', 'Варвара', 'Васа', 'Василија', 'Василије',
        'Василка', 'Васиљ', 'Васиљка', 'Васко', 'Васкрсија', 'Васкрсије', 'Васо', 'Васоје', 'Вајо', 'Вања', 'Векослав', 'Велибор',
        'Велиборка', 'Велизар', 'Велимир', 'Велинка', 'Велисав', 'Велисава', 'Величко', 'Велиша', 'Вера', 'Веран', 'Верица', 'Верка',
        'Вероника', 'Верослава', 'Верољуб', 'Весела', 'Веселин', 'Веселинка', 'Веско', 'Весна', 'Вељко', 'Вид', 'Вида', 'Видак',
        'Видан', 'Видач', 'Виден', 'Видосав', 'Видосава', 'Видоја', 'Видоје', 'Видојка', 'Видојко', 'Виктор', 'Викторија', 'Вилотије',
        'Виолета', 'Витка', 'Витко', 'Витомир', 'Витомирка', 'Вишеслав', 'Вишеслава', 'Вишња', 'Вићан', 'Вићентије', 'Владан', 'Владана',
        'Владанка', 'Владе', 'Владета', 'Владимирка', 'Владисав', 'Владислава', 'Владица', 'Владо', 'Владоје', 'Владун', 'Влаислав', 'Власије',
        'Власта', 'Властимир', 'Властимирка', 'Влатка', 'Влатко', 'Влашко', 'Влајко', 'Воица', 'Војдраг', 'Војимир', 'Војин', 'Војислав',
        'Војислава', 'Војка', 'Војкан', 'Војко', 'Вранеш', 'Вугдраг', 'Вузман', 'Вуило', 'Вуин', 'Вуица', 'Вук', 'Вукадин',
        'Вукало', 'Вукан', 'Вукана', 'Вукас', 'Вукац', 'Вукач', 'Вукашин', 'Вукајло', 'Вукаљ', 'Вукеља', 'Вукица', 'Вукић',
        'Вукман', 'Вукмир', 'Вукмира', 'Вукмиљ', 'Вуко', 'Вуковоје', 'Вукола', 'Вукоман', 'Вукомир', 'Вукосав', 'Вукосава', 'Вукослав',
        'Вукота', 'Вукоје', 'Вукојица', 'Вуксан', 'Вукша', 'Вуле', 'Вулета', 'Вунко', 'Вуча', 'Вучан', 'Вучен', 'Вучета',
        'Вучина', 'Вучић', 'Вучко', 'Вујадин', 'Вујадинка', 'Вујак', 'Вујан', 'Вујана', 'Вујета', 'Вујка', 'Вујко', 'Вујо',
        'Вујчета', 'Вујчин', 'Вјекослав', 'Гавра', 'Гаврила', 'Гаврилка', 'Гаврило', 'Гача', 'Гаја', 'Гајин', 'Гајо', 'Гвозден',
        'Гвозденија', 'Гвозденко', 'Генадије', 'Георгина', 'Георгије', 'Герасим', 'Герман', 'Глигорије', 'Глиша', 'Глишо', 'Годеч', 'Годомир',
        'Голуб', 'Горана', 'Горанка', 'Гордан', 'Гордана', 'Горица', 'Горчин', 'Горјана', 'Госпава', 'Гостимир', 'Гостољуб', 'Гојко',
        'Градета', 'Градимир', 'Градиша', 'Гргур', 'Грдан', 'Григорије', 'Гријак', 'Грозда', 'Гроздан', 'Гроздана', 'Грубан', 'Грубац',
        'Грубач', 'Грубета', 'Грубеша', 'Грубиша', 'Груја', 'Грујица', 'Грујо', 'Дабижив', 'Дабиша', 'Дабо', 'Давид', 'Даворка',
        'Далиборка', 'Дамјан', 'Дамјанка', 'Дамљан', 'Дамљанка', 'Дана', 'Дане', 'Даница', 'Данијел', 'Данка', 'Данко', 'Данојла',
        'Данчул', 'Дара', 'Даринка', 'Дарио', 'Дарије', 'Даријо', 'Дарко', 'Дарјан', 'Дафина', 'Даша', 'Дева', 'Деса',
        'Десанка', 'Десимир', 'Деспина', 'Деспиња', 'Деспот', 'Дејана', 'Дивна', 'Дикосава', 'Димитрије', 'Димчо', 'Дмитар', 'Дмитра',
        'Добрашин', 'Добривој', 'Добривоје', 'Добрила', 'Добрило', 'Добринка', 'Добринко', 'Добрица', 'Добрија', 'Добровук', 'Добросав', 'Доброслав',
        'Докна', 'Доко', 'Доротеј', 'Доротеја', 'Доситеј', 'Достана', 'Дојчило', 'Дојчин', 'Драга', 'Драгаш', 'Драгица', 'Драгиша',
        'Драгија', 'Драгиња', 'Драгић', 'Драго', 'Драгобрат', 'Драгован', 'Драгоман', 'Драгомир', 'Драгомира', 'Драгорад', 'Драгосав', 'Драгослав',
        'Драгослава', 'Драгош', 'Драгоја', 'Драгоје', 'Драгојла', 'Драгојло', 'Драгољуб', 'Драгутин', 'Дража', 'Дражета', 'Дражо', 'Драило',
        'Дракша', 'Драшко', 'Дрена', 'Дренка', 'Дрина', 'Дринка', 'Дубравац', 'Дубравка', 'Дубравко', 'Дука', 'Дукадин', 'Душанка',
        'Душица', 'Душка', 'Душко', 'Дујак', 'Дуња', 'Ева', 'Евгенија', 'Евгеније', 'Евдокија', 'Евица', 'Емил', 'Емилија',
        'Емилијан', 'Емилије', 'Ерак', 'Жаклина', 'Жанка', 'Жарко', 'Желимир', 'Желимирка', 'Жељана', 'Жељка', 'Жељко', 'Жива',
        'Живадин', 'Живадинка', 'Живан', 'Живана', 'Живанка', 'Живанко', 'Живица', 'Живка', 'Живодарка', 'Живомир', 'Живорад', 'Живоратка',
        'Живослава', 'Живославка', 'Живота', 'Живојин', 'Живољуб', 'Жика', 'Жикица', 'Житомир', 'Завида', 'Завиша', 'Зага', 'Загорка',
        'Зарија', 'Зарије', 'Захарије', 'Звездан', 'Звездана', 'Звездодраг', 'Звездослав', 'Звонимир', 'Звонка', 'Звонко', 'Звјездан', 'Звјездана',
        'Здравиша', 'Здравко', 'Злата', 'Златан', 'Златана', 'Златибор', 'Златица', 'Златија', 'Златко', 'Златомир', 'Златомирка', 'Златосав',
        'Златоје', 'Зора', 'Зорана', 'Зорислава', 'Зорица', 'Зорка', 'Зринка', 'Зринко', 'Ива', 'Иваниш', 'Иванка', 'Ивица',
        'Ивка', 'Ивко', 'Ивона', 'Игор', 'Игњат', 'Игњатије', 'Иконија', 'Илинка', 'Илија', 'Исаило', 'Исаија', 'Исак',
        'Исидор', 'Исидора', 'Кадивка', 'Кажимир', 'Казимир', 'Казимира', 'Каменко', 'Касија', 'Ката', 'Катарина', 'Катица', 'Кипријан',
        'Кирило', 'Кована', 'Ковина', 'Ковиљка', 'Ковиљко', 'Козма', 'Кокан', 'Комнен', 'Комненија', 'Корнелије', 'Косана', 'Косара',
        'Косовка', 'Коста', 'Костадин', 'Костадинка', 'Коча', 'Коштана', 'Којадин', 'Којадинка', 'Којчин', 'Крагуј', 'Краисава', 'Красимир',
        'Красоје', 'Крајислав', 'Крајчин', 'Крсман', 'Крсманија', 'Крста', 'Крстан', 'Крстана', 'Крстивоје', 'Крстина', 'Крсто', 'Крунислав',
        'Крунослава', 'Ксенија', 'Кузман', 'Кумодраг', 'Лабуд', 'Лаза', 'Лазар', 'Лазо', 'Лака', 'Лакета', 'Лако', 'Лале',
        'Лана', 'Лара', 'Латинка', 'Лежимир', 'Лела', 'Лена', 'Ленка', 'Леонида', 'Леонора', 'Лепа', 'Лепомир', 'Лепосава',
        'Лепослав', 'Лепоје', 'Лидија', 'Лиза', 'Лила', 'Лилијана', 'Лозан', 'Луна', 'Луча', 'Лучија', 'Лујо', 'Маврен',
        'Малета', 'Малеш', 'Малина', 'Малинка', 'Манда', 'Мандуша', 'Мане', 'Манојло', 'Мара', 'Маринка', 'Маринко', 'Марица',
        'Марко', 'Марта', 'Марјан', 'Матеј', 'Матеја', 'Матија', 'Матијаш', 'Мато', 'Машан', 'Машко', 'Маја', 'Мајда',
        'Медак', 'Мила', 'Миладин', 'Миладија', 'Милак', 'Милана', 'Миланка', 'Миланко', 'Милат', 'Милаш', 'Милашин', 'Миле',
        'Милева', 'Милен', 'Миленко', 'Милентије', 'Милеса', 'Милета', 'Милеш', 'Миливој', 'Миливоје', 'Милин', 'Милина', 'Милинко',
        'Милисав', 'Милисава', 'Милисавка', 'Милија', 'Милијан', 'Милијана', 'Милијаш', 'Милић', 'Милка', 'Милкица', 'Мило', 'Милован',
        'Миломир', 'Милорад', 'Милосав', 'Милосава', 'Милосавка', 'Милоја', 'Милоје', 'Милојица', 'Милојка', 'Милојко', 'Милтен', 'Милука',
        'Милун', 'Милунка', 'Милутин', 'Милуш', 'Милуша', 'Миодраг', 'Миомир', 'Миомирка', 'Мира', 'Мирен', 'Мирка', 'Мирко',
        'Миро', 'Миросав', 'Миросава', 'Мирољуб', 'Мирчета', 'Мирјана', 'Митар', 'Митра', 'Михаило', 'Михајло', 'Мишко', 'Мишо',
        'Мишљен', 'Мија', 'Мијаило', 'Мијак', 'Мијан', 'Мијана', 'Мијат', 'Мијо', 'Мијобрат', 'Мијушко', 'Миљ', 'Миља',
        'Миљан', 'Миљен', 'Миљка', 'Миљко', 'Миљојко', 'Миљурко', 'Мића', 'Мићан', 'Мићо', 'Младен', 'Млађан', 'Млађен',
        'Момир', 'Момчило', 'Мојсило', 'Мркша', 'Мрђан', 'Мрђен', 'Нада', 'Надежда', 'Надица', 'Наталија', 'Наум', 'Нађа',
        'Најда', 'Најдан', 'Небојша', 'Невен', 'Невена', 'Невенка', 'Невенко', 'Негован', 'Негомир', 'Неда', 'Недељка', 'Недељко',
        'Немања', 'Ненад', 'Нестор', 'Нешко', 'Неђељка', 'Неђељко', 'Никашин', 'Никодим', 'Никодије', 'Никола', 'Николета', 'Николија',
        'Никша', 'Нина', 'Нинко', 'Нино', 'Нинослав', 'Нишава', 'Нићифор', 'Новак', 'Новица', 'Новиша', 'Новка', 'Новко',
        'Ново', 'Обрад', 'Обрадин', 'Обрадинка', 'Обрен', 'Обренија', 'Обренко', 'Обретен', 'Огњан', 'Огњана', 'Огњен', 'Озрен',
        'Озриша', 'Олга', 'Оливер', 'Оливера', 'Остоја', 'Оља', 'Пава', 'Павија', 'Павић', 'Павко', 'Павле', 'Павлија',
        'Павлић', 'Пантелија', 'Паун', 'Пауна', 'Пелагија', 'Пера', 'Перица', 'Периша', 'Перо', 'Перса', 'Персида', 'Перун',
        'Перунко', 'Петак', 'Петар', 'Петко', 'Петош', 'Петоје', 'Петра', 'Петрашин', 'Петрија', 'Петроније', 'Пејак', 'Пејо',
        'Плавша', 'Познан', 'Познана', 'Првослав', 'Предраг', 'Прерад', 'Прибић', 'Продан', 'Продана', 'Прокопије', 'Пунан', 'Пуниша',
        'Пуреш', 'Пурко', 'Пуро', 'Рада', 'Радак', 'Радан', 'Радана', 'Радас', 'Радашин', 'Раден', 'Раденко', 'Радета',
        'Радивој', 'Радивоје', 'Радин', 'Радинка', 'Радинко', 'Радисав', 'Радица', 'Радич', 'Радиша', 'Радман', 'Радмила', 'Радмило',
        'Радна', 'Радоба', 'Радобуд', 'Радован', 'Радовац', 'Радоман', 'Радомир', 'Радосав', 'Радослав', 'Радослава', 'Радота', 'Радош',
        'Радоја', 'Радоје', 'Радојица', 'Радојка', 'Радојко', 'Радојло', 'Радоња', 'Радука', 'Радукан', 'Радул', 'Радула', 'Радулин',
        'Радун', 'Радунка', 'Радусин', 'Раин', 'Раица', 'Раич', 'Раичко', 'Рален', 'Ралета', 'Ранисав', 'Ранка', 'Ранко',
        'Раосав', 'Растислав', 'Растко', 'Ратибор', 'Ратко', 'Ратомир', 'Рафаило', 'Рацко', 'Рачета', 'Рашко', 'Рађен', 'Рајак',
        'Рајан', 'Рајка', 'Рајко', 'Рајна', 'Рајчета', 'Рекула', 'Ресан', 'Реља', 'Риста', 'Ристан', 'Ристивоје', 'Ристо',
        'Родољуб', 'Роксанда', 'Роса', 'Ружа', 'Ружица', 'Сава', 'Савка', 'Савко', 'Саво', 'Саздана', 'Самуило', 'Сандра',
        'Сара', 'Сања', 'Светибор', 'Светислав', 'Светислава', 'Светозар', 'Светолик', 'Светомир', 'Светорад', 'Светољуб', 'Свјетлана', 'Секана',
        'Секула', 'Селак', 'Сима', 'Симана', 'Симеон', 'Симеун', 'Симеуна', 'Симка', 'Симо', 'Симон', 'Симонида', 'Синиша',
        'Синђа', 'Синђел', 'Скоросав', 'Скоросава', 'Славен', 'Славенко', 'Славица', 'Славиша', 'Славка', 'Славко', 'Славна', 'Славо',
        'Славомир', 'Славојка', 'Славољуб', 'Славуј', 'Сладоје', 'Слађан', 'Слађана', 'Слободанка', 'Смиља', 'Смиљан', 'Смиљана', 'Смиљка',
        'Смиљко', 'Смољан', 'Смољана', 'Смољка', 'Снежана', 'Сока', 'Соко', 'Софија', 'Спасенија', 'Спасоја', 'Спасоје', 'Спиридон',
        'Споменка', 'Србислав', 'Србијанка', 'Србослав', 'Србољуб', 'Срдан', 'Средоја', 'Средоје', 'Сретен', 'Сретко', 'Срећан', 'Срећко',
        'Срђа', 'Стака', 'Стамена', 'Стаменка', 'Стаменко', 'Стана', 'Станава', 'Станача', 'Станимир', 'Станисав', 'Станисава', 'Станислава',
        'Станица', 'Станиша', 'Станија', 'Станка', 'Станко', 'Станоја', 'Станоје', 'Станојка', 'Станојко', 'Станојла', 'Станојло', 'Сташа',
        'Стајка', 'Стеван', 'Стевица', 'Стево', 'Степан', 'Стефан', 'Стоин', 'Стоисава', 'Стоић', 'Стоја', 'Стојадин', 'Стојак',
        'Стојан', 'Стојана', 'Стојанка', 'Стојка', 'Стојко', 'Стојмен', 'Стојна', 'Стојша', 'Страиња', 'Страхиња', 'Стјепан', 'Сузана',
        'Сњежана', 'Тадеј', 'Тадија', 'Танасије', 'Танацко', 'Танкоса', 'Танкосава', 'Тара', 'Татомир', 'Татјана', 'Тајана', 'Твртко',
        'Теа', 'Теодор', 'Теодосије', 'Теофил', 'Тешан', 'Тимотије', 'Тихомир', 'Тијана', 'Тодор', 'Тодора', 'Тома', 'Томанија',
        'Томаш', 'Томислав', 'Томица', 'Томо', 'Топлица', 'Трајан', 'Трајко', 'Тривун', 'Трипко', 'Трипун', 'Трифун', 'Трпко',
        'Убавка', 'Угљеша', 'Умиљен', 'Уна', 'Урош', 'Утешен', 'Утјешен', 'Фема', 'Хвалимир', 'Хвалислав', 'Хранимир', 'Хранислав',
        'Хранислава', 'Храниша', 'Храстимир', 'Христијан', 'Христослав', 'Цвета', 'Цветин', 'Цветко', 'Цветош', 'Цветоје', 'Цвејан', 'Цвико',
        'Цвијан', 'Цвијета', 'Цвијетин', 'Цвјетко', 'Цвјетош', 'Цвјетоје', 'Цурко', 'Чарна', 'Часлав', 'Чедомир', 'Чубрило', 'Шакота',
        'Шале', 'Шана', 'Шуменко', 'Шутан',
    );

    protected static $firstNameFemale = array(
       'Јована', 'Александра', 'Ангелина', 'Антонина', 'Биљана', 'Влада', 'Драгана', 'Екатерина', 'Елена', 'Здравка', 'Златка', 'Ивана', 'Ирена',
        'Ирина', 'Кристина', 'Лола', 'Марина', 'Марија', 'Маша', 'Милена', 'Милица', 'Мирослава', 'Миљана', 'Наташа', 'Светлана',
        'Соња', 'Тамара', 'Тања', 'Теодора',
</codefragment>
  </duplication>
  <duplication lines="52" tokens="360">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/sr_RS/Address.php" line="5"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/Provider/sr_Cyrl_RS/Address.php" line="5"/>
    <codefragment>class Address extends \Faker\Provider\Address
{
    protected static $postcode = array('#####');

    protected static $streetPrefix = array(
        'Булевар',
    );

    protected static $street = array(
        'Краља Милана', 'Цара Душана', 'Николе Тесле', 'Михајла Пупина', 'Николе Пашића',
    );

    protected static $streetNameFormats = array(
        '{{street}}',
        '{{streetPrefix}} {{street}}',
    );

    protected static $streetAddressFormats = array(
        '{{streetName}} {{buildingNumber}}',
    );

    protected static $cityFormats = array(
        '{{cityName}}',
    );

    /**
     * @link http://sr.wikipedia.org/wiki/%D0%93%D1%80%D0%B0%D0%B4%D0%BE%D0%B2%D0%B8_%D1%83_%D0%A1%D1%80%D0%B1%D0%B8%D1%98%D0%B8
     */
    protected static $cityNames = array(
        'Београд', 'Ваљево', 'Врање', 'Зајечар', 'Зрењанин', 'Јагодина', 'Крагујевац', 'Краљево', 'Крушевац', 'Лесковац', 'Лозница', 'Ниш', 'Нови Пазар', 'Нови Сад', 'Панчево', 'Пожаревац', 'Приштина', 'Смедерево', 'Сомбор', 'Сремска Митровица', 'Суботица', 'Ужице', 'Чачак', 'Шабац',
    );

    /**
     * @link https://github.com/umpirsky/country-list/blob/master/country/cldr/sr_Cyrl/country.php
     */
    protected static $country = array(
        'Острво Асенсион', 'Андора', 'Уједињени Арапски Емирати', 'Авганистан', 'Антигве и Барбуда', 'Ангвила', 'Албанија', 'Арменија', 'Холандски Антили', 'Ангола', 'Антарктик', 'Аргентина', 'Америчка Самоа', 'Аустрија', 'Аустралија', 'Аруба', 'Аландска острва', 'Азербејџан', 'Босна и Херцеговина', 'Барбадос', 'Бангладеш', 'Белгија', 'Буркина Фасо', 'Бугарска', 'Бахреин', 'Бурунди', 'Бенин', 'Свети Бартоломеј', 'Бермуда', 'Брунеј', 'Боливија', 'Бразил', 'Бахами', 'Бутан', 'Буве Острва', 'Боцвана', 'Белорусија', 'Белизе', 'Канада', 'Кокос (Келинг) Острва', 'Конго - Киншаса', 'Централно Афричка Република', 'Конго - Бразавил', 'Швајцарска', 'Обала Слоноваче', 'Кукова Острва', 'Чиле', 'Камерун', 'Кина', 'Колумбија', 'Острво Клипертон', 'Костарика', 'Србија и Црна Гора', 'Куба', 'Капе Верде', 'Божићна острва', 'Кипар', 'Чешка', 'Немачка', 'Дијего Гарсија', 'Џибути', 'Данска', 'Доминика', 'Доминиканска Република', 'Алжир', 'Сеута и Мелиља', 'Еквадор', 'Естонија', 'Египат', 'Западна Сахара', 'Еритреја', 'Шпанија', 'Етиопија', 'Европска Унија', 'Финска', 'Фиџи', 'Фолкландска Острва', 'Микронезија', 'Фарска Острва', 'Француска', 'Габон', 'Велика Британија', 'Гренада', 'Грузија', 'Француска Гвајана', 'Гурнси', 'Гана', 'Гибралтар', 'Гренланд', 'Гамбија', 'Гвинеја', 'Гваделупе', 'Екваторијална Гвинеја', 'Грчка', 'Јужна Џорџија и Јужна Сендвич Острва', 'Гватемала', 'Гуам', 'Гвинеја-Бисао', 'Гвајана', 'Хонг Конг С. А. Р. Кина', 'Херд и Мекдоналд Острва', 'Хондурас', 'Хрватска', 'Хаити', 'Мађарска', 'Канарска острва', 'Индонезија', 'Ирска', 'Израел', 'Острво Ман', 'Индија', 'Британска територија у Индијском океану', 'Ирак', 'Иран', 'Исланд', 'Италија', 'Џерси', 'Јамајка', 'Јордан', 'Јапан', 'Кенија', 'Киргизстан', 'Камбоџа', 'Кирибати', 'Коморска Острва', 'Сент Китс и Невис', 'Северна Кореја', 'Јужна Кореја', 'Кувајт', 'Кајманска Острва', 'Казахстан', 'Лаос', 'Либан', 'Сент Луција', 'Лихтенштајн', 'Шри Ланка', 'Либерија', 'Лесото', 'Литванија', 'Луксембург', 'Летонија', 'Либија', 'Мароко', 'Монако', 'Молдавија', 'Црна Гора', 'Сент Мартин', 'Мадагаскар', 'Маршалска Острва', 'Македонија', 'Мали', 'Мијанмар [Бурма]', 'Монголија', 'Макао С. А. Р. Кина', 'Северна Маријанска Острва', 'Мартиник', 'Мауританија', 'Монсерат', 'Малта', 'Маурицијус', 'Малдиви', 'Малави', 'Мексико', 'Малезија', 'Мозамбик', 'Намибија', 'Нова Каледонија', 'Нигер', 'Норфолк Острво', 'Нигерија', 'Никарагва', 'Холандија', 'Норвешка', 'Непал', 'Науру', 'Ниуе', 'Нови Зеланд', 'Оман', 'Панама', 'Перу', 'Француска Полинезија', 'Папуа Нова Гвинеја', 'Филипини', 'Пакистан', 'Пољска', 'Сен Пјер и Микелон', 'Питкерн', 'Порто Рико', 'Палестинске територије', 'Португал', 'Палау', 'Парагвај', 'Катар', 'Остала океанија', 'Реинион', 'Румунија', 'Србија', 'Русија', 'Руанда', 'Саудијска Арабија', 'Соломонска Острва', 'Сејшели', 'Судан', 'Шведска', 'Сингапур', 'Света Јелена', 'Словенија', 'Свалбард и Јанмајен Острва', 'Словачка', 'Сијера Леоне', 'Сан Марино', 'Сенегал', 'Сомалија', 'Суринам', 'Сао Томе и Принципе', 'Салвадор', 'Сирија', 'Свазиленд', 'Тристан да Куња', 'Туркс и Кајкос Острва', 'Чад', 'Француске Јужне Територије', 'Того', 'Тајланд', 'Таџикистан', 'Токелау', 'Источни Тимор', 'Туркменистан', 'Тунис', 'Тонга', 'Турска', 'Тринидад и Тобаго', 'Тувалу', 'Тајван', 'Танзанија', 'Украјина', 'Уганда', 'Мања удаљена острва САД', 'Сједињене Америчке Државе', 'Уругвај', 'Узбекистан', 'Ватикан', 'Сент Винсент и Гренадини', 'Венецуела', 'Британска Девичанска Острва', 'С.А.Д. Девичанска Острва', 'Вијетнам', 'Вануату', 'Валис и Футуна Острва', 'Самоа', 'Јемен', 'Мајоте', 'Јужноафричка Република', 'Замбија', 'Зимбабве',
    );

    public static function streetPrefix()
    {
        return static::randomElement(static::$streetPrefix);
    }

    public static function street()
    {
        return static::randomElement(static::$street);
    }

    public function cityName()
    {
        return static::randomElement(static::$cityNames);
</codefragment>
  </duplication>
  <duplication lines="54" tokens="123">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/ORM/Propel/Populator.php" line="32"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/ORM/Propel2/Populator.php" line="35"/>
    <codefragment>            $entity = new \Faker\ORM\Propel\EntityPopulator($entity);
        }
        $entity-&gt;setColumnFormatters($entity-&gt;guessColumnFormatters($this-&gt;generator));
        if ($customColumnFormatters) {
            $entity-&gt;mergeColumnFormattersWith($customColumnFormatters);
        }
        $entity-&gt;setModifiers($entity-&gt;guessModifiers($this-&gt;generator));
        if ($customModifiers) {
            $entity-&gt;mergeModifiersWith($customModifiers);
        }
        $class = $entity-&gt;getClass();
        $this-&gt;entities[$class] = $entity;
        $this-&gt;quantities[$class] = $number;
    }

    /**
     * Populate the database using all the Entity classes previously added.
     *
     * @param PropelPDO $con A Propel connection object
     *
     * @return array A list of the inserted PKs
     */
    public function execute($con = null)
    {
        if (null === $con) {
            $con = $this-&gt;getConnection();
        }
        $isInstancePoolingEnabled = \Propel::isInstancePoolingEnabled();
        \Propel::disableInstancePooling();
        $insertedEntities = array();
        $con-&gt;beginTransaction();
        foreach ($this-&gt;quantities as $class =&gt; $number) {
            for ($i=0; $i &lt; $number; $i++) {
                $insertedEntities[$class][]= $this-&gt;entities[$class]-&gt;execute($con, $insertedEntities);
            }
        }
        $con-&gt;commit();
        if ($isInstancePoolingEnabled) {
            \Propel::enableInstancePooling();
        }

        return $insertedEntities;
    }

    protected function getConnection()
    {
        // use the first connection available
        $class = key($this-&gt;entities);

        if (!$class) {
            throw new \RuntimeException('No class found from entities. Did you add entities to the Populator ?');
        }

        $peer = $class::PEER;
</codefragment>
  </duplication>
  <duplication lines="74" tokens="150">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/ORM/Propel/EntityPopulator.php" line="73"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/ORM/Propel2/EntityPopulator.php" line="74"/>
    <codefragment>                    return isset($inserted[$relatedClass]) ? $inserted[$relatedClass][mt_rand(0, count($inserted[$relatedClass]) - 1)] : null;
                };
                continue;
            }
            if ($columnMap-&gt;isPrimaryKey()) {
                continue;
            }
            if ($formatter = $nameGuesser-&gt;guessFormat($columnMap-&gt;getPhpName(), $columnMap-&gt;getSize())) {
                $formatters[$columnMap-&gt;getPhpName()] = $formatter;
                continue;
            }
            if ($formatter = $columnTypeGuesser-&gt;guessFormat($columnMap)) {
                $formatters[$columnMap-&gt;getPhpName()] = $formatter;
                continue;
            }
        }

        return $formatters;
    }

    /**
     * @param ColumnMap $columnMap
     * @return bool
     */
    protected function isColumnBehavior(ColumnMap $columnMap)
    {
        foreach ($columnMap-&gt;getTable()-&gt;getBehaviors() as $name =&gt; $params) {
            $columnName = Base::toLower($columnMap-&gt;getName());
            switch ($name) {
                case 'nested_set':
                    $columnNames = array($params['left_column'], $params['right_column'], $params['level_column']);
                    if (in_array($columnName, $columnNames)) {
                        return true;
                    }
                    break;
                case 'timestampable':
                    $columnNames = array($params['create_column'], $params['update_column']);
                    if (in_array($columnName, $columnNames)) {
                        return true;
                    }
                    break;
            }
        }

        return false;
    }

    public function setModifiers($modifiers)
    {
        $this-&gt;modifiers = $modifiers;
    }

    /**
     * @return array
     */
    public function getModifiers()
    {
        return $this-&gt;modifiers;
    }

    public function mergeModifiersWith($modifiers)
    {
        $this-&gt;modifiers = array_merge($this-&gt;modifiers, $modifiers);
    }

    /**
     * @param \Faker\Generator $generator
     * @return array
     */
    public function guessModifiers(\Faker\Generator $generator)
    {
        $modifiers = array();
        $class = $this-&gt;class;
        $peerClass = $class::PEER;
</codefragment>
  </duplication>
  <duplication lines="43" tokens="125">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/ORM/Propel/EntityPopulator.php" line="147"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/src/Faker/ORM/Propel2/EntityPopulator.php" line="148"/>
    <codefragment>        $tableMap = $peerClass::getTableMap();
        foreach ($tableMap-&gt;getBehaviors() as $name =&gt; $params) {
            switch ($name) {
                case 'nested_set':
                    $modifiers['nested_set'] = function ($obj, $inserted) use ($class, $generator) {
                        if (isset($inserted[$class])) {
                            $queryClass = $class . 'Query';
                            $parent = $queryClass::create()-&gt;findPk($generator-&gt;randomElement($inserted[$class]));
                            $obj-&gt;insertAsLastChildOf($parent);
                        } else {
                            $obj-&gt;makeRoot();
                        }
                    };
                    break;
                case 'sortable':
                    $modifiers['sortable'] = function ($obj, $inserted) use ($class) {
                        $maxRank = isset($inserted[$class]) ? count($inserted[$class]) : 0;
                        $obj-&gt;insertAtRank(mt_rand(1, $maxRank + 1));
                    };
                    break;
            }
        }

        return $modifiers;
    }

    /**
     * Insert one new record using the Entity class.
     */
    public function execute($con, $insertedEntities)
    {
        $obj = new $this-&gt;class();
        foreach ($this-&gt;getColumnFormatters() as $column =&gt; $format) {
            if (null !== $format) {
                $obj-&gt;setByName($column, is_callable($format) ? $format($insertedEntities, $obj) : $format);
            }
        }
        foreach ($this-&gt;getModifiers() as $modifier) {
            $modifier($obj, $insertedEntities);
        }
        $obj-&gt;save($con);

        return $obj-&gt;getPrimaryKey();
</codefragment>
  </duplication>
  <duplication lines="61" tokens="130">
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/test/Faker/Provider/it_CH/AddressTest.php" line="7"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/test/Faker/Provider/fr_CH/AddressTest.php" line="7"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/fzaninotto/faker/test/Faker/Provider/de_CH/AddressTest.php" line="7"/>
    <codefragment>use Faker\Provider\it_CH\Person;

class AddressTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Faker\Generator
     */
    private $faker;

    public function setUp()
    {
        $faker = new Generator();
        $faker-&gt;addProvider(new Address($faker));
        $faker-&gt;addProvider(new Person($faker));
        $this-&gt;faker = $faker;
    }

    /**
     * @test
     */
    public function canton ()
    {
        $canton = $this-&gt;faker-&gt;canton();
        $this-&gt;assertInternalType('array', $canton);
        $this-&gt;assertCount(1, $canton);

        foreach ($canton as $cantonShort =&gt; $cantonName){
            $this-&gt;assertInternalType('string', $cantonShort);
            $this-&gt;assertEquals(2, strlen($cantonShort));
            $this-&gt;assertInternalType('string', $cantonName);
            $this-&gt;assertGreaterThan(2, strlen($cantonName));
        }
    }

    /**
     * @test
     */
    public function cantonName ()
    {
        $cantonName = $this-&gt;faker-&gt;cantonName();
        $this-&gt;assertInternalType('string', $cantonName);
        $this-&gt;assertGreaterThan(2, strlen($cantonName));
    }

    /**
     * @test
     */
    public function cantonShort ()
    {
        $cantonShort = $this-&gt;faker-&gt;cantonShort();
        $this-&gt;assertInternalType('string', $cantonShort);
        $this-&gt;assertEquals(2, strlen($cantonShort));
    }

    /**
     * @test
     */
    public function address (){
        $address = $this-&gt;faker-&gt;address();
        $this-&gt;assertInternalType('string', $address);
</codefragment>
  </duplication>
  <duplication lines="19" tokens="82">
    <file path="/home/feighen/workspace/ussd/src/vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php" line="135"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php" line="245"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php" line="68"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php" line="121"/>
    <codefragment>            array('fsockopen', 'streamSetTimeout', 'closeSocket'),
            $constructorArgs
        );

        $reflectionProperty = new \ReflectionProperty('\Monolog\Handler\SocketHandler', 'connectionString');
        $reflectionProperty-&gt;setAccessible(true);
        $reflectionProperty-&gt;setValue($this-&gt;handler, 'localhost:1234');

        $this-&gt;handler-&gt;expects($this-&gt;any())
            -&gt;method('fsockopen')
            -&gt;will($this-&gt;returnValue($this-&gt;res));
        $this-&gt;handler-&gt;expects($this-&gt;any())
            -&gt;method('streamSetTimeout')
            -&gt;will($this-&gt;returnValue(true));
        $this-&gt;handler-&gt;expects($this-&gt;any())
            -&gt;method('closeSocket')
            -&gt;will($this-&gt;returnValue(true));

        $this-&gt;handler-&gt;setFormatter($this-&gt;getIdentityFormatter());
</codefragment>
  </duplication>
  <duplication lines="26" tokens="75">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/console/Input/ArgvInput.php" line="123"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/psy/psysh/src/Input/ShellInput.php" line="230"/>
    <codefragment>            if (!$this-&gt;definition-&gt;hasShortcut($name[$i])) {
                throw new RuntimeException(sprintf('The "-%s" option does not exist.', $name[$i]));
            }

            $option = $this-&gt;definition-&gt;getOptionForShortcut($name[$i]);
            if ($option-&gt;acceptValue()) {
                $this-&gt;addLongOption($option-&gt;getName(), $i === $len - 1 ? null : substr($name, $i + 1));

                break;
            } else {
                $this-&gt;addLongOption($option-&gt;getName(), null);
            }
        }
    }

    /**
     * Parses a long option.
     *
     * @param string $token The current token
     */
    private function parseLongOption($token)
    {
        $name = substr($token, 2);

        if (false !== $pos = strpos($name, '=')) {
            if (0 === strlen($value = substr($name, $pos + 1))) {
</codefragment>
  </duplication>
  <duplication lines="30" tokens="72">
    <file path="/home/feighen/workspace/ussd/src/vendor/symfony/console/Input/ArgvInput.php" line="197"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/psy/psysh/src/Input/ShellInput.php" line="277"/>
    <codefragment>    private function addShortOption($shortcut, $value)
    {
        if (!$this-&gt;definition-&gt;hasShortcut($shortcut)) {
            throw new RuntimeException(sprintf('The "-%s" option does not exist.', $shortcut));
        }

        $this-&gt;addLongOption($this-&gt;definition-&gt;getOptionForShortcut($shortcut)-&gt;getName(), $value);
    }

    /**
     * Adds a long option value.
     *
     * @param string $name  The long option key
     * @param mixed  $value The value for the option
     *
     * @throws RuntimeException When option given doesn't exist
     */
    private function addLongOption($name, $value)
    {
        if (!$this-&gt;definition-&gt;hasOption($name)) {
            throw new RuntimeException(sprintf('The "--%s" option does not exist.', $name));
        }

        $option = $this-&gt;definition-&gt;getOption($name);

        if (null !== $value &amp;&amp; !$option-&gt;acceptValue()) {
            throw new RuntimeException(sprintf('The "--%s" option does not accept a value.', $name));
        }

        if (in_array($value, array('', null), true) &amp;&amp; $option-&gt;acceptValue() &amp;&amp; count($this-&gt;parsed)) {
</codefragment>
  </duplication>
  <duplication lines="9" tokens="83">
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php" line="640"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php" line="759"/>
    <codefragment>           33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
           33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
           33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
           33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
           33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
           33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
           33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
           33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
           33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
</codefragment>
  </duplication>
  <duplication lines="9" tokens="81">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReader/Utf8Reader.php" line="22"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php" line="783"/>
    <codefragment>        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x0N
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x1N
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x2N
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x3N
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x4N
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x5N
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x6N
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x7N
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0x8N
</codefragment>
  </duplication>
  <duplication lines="154" tokens="156">
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php" line="32"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php" line="32"/>
    <codefragment>    protected $symbolToName = array(
        "EOF",
        "error",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "T_YIELD",
        "T_DOUBLE_ARROW",
        "T_YIELD_FROM",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "T_POW_EQUAL",
        "'?'",
        "':'",
        "T_COALESCE",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'^'",
        "'&amp;'",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "T_SPACESHIP",
        "'&lt;'",
        "T_IS_SMALLER_OR_EQUAL",
        "'&gt;'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'*'",
        "'/'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "T_POW",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_FINALLY",
        "T_THROW",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_LINE",
        "T_FILE",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "T_ELLIPSIS",
        "';'",
        "'{'",
        "'}'",
        "'('",
        "')'",
</codefragment>
  </duplication>
  <duplication lines="34" tokens="298">
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php" line="202"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php" line="202"/>
    <codefragment>          157,   67,  157,  154,   34,  157,  153,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  149,   33,  150,   55,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,    1,    2,    3,    4,
            5,    6,    8,    9,   10,   11,   12,   13,   14,   16,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
           27,   30,   31,   32,   36,   37,   38,   39,   40,   42,
           44,   45,   46,   54,   56,   57,   58,   59,   60,   61,
           62,   63,   64,   66,   68,   69,   70,   71,   72,   73,
           74,   75,   76,   77,   78,   79,   80,   81,  157,  157,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
          132,  133,  134,  135,  136,  137,  157,  157,  157,  157,
          157,  157,  138,  139,  140,  141,  142,  143,  144,  145,
          146,  147
    );

    protected $action = array(
</codefragment>
  </duplication>
  <duplication lines="10" tokens="92">
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php" line="491"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php" line="529"/>
    <codefragment>           -2,    0,    0,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
</codefragment>
  </duplication>
  <duplication lines="10" tokens="93">
    <file path="/home/feighen/workspace/ussd/src/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReader/Utf8Reader.php" line="22"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php" line="773"/>
    <codefragment>        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x0N
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x1N
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x2N
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x3N
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x4N
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x5N
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x6N
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x7N
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0x8N
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0x9N
</codefragment>
  </duplication>
  <duplication lines="10" tokens="91">
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php" line="727"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php" line="821"/>
    <codefragment>    protected $ruleToNonTerminal = array(
            0,    1,    3,    3,    2,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    6,    6,    6,    6,    6,    6,    6,
            7,    7,    8,    9,   10,   10,   11,   12,   13,   13,
</codefragment>
  </duplication>
  <duplication lines="9" tokens="84">
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php" line="713"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php" line="851"/>
    <codefragment>           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
</codefragment>
  </duplication>
  <duplication lines="10" tokens="93">
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php" line="782"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php" line="880"/>
    <codefragment>    protected $ruleToLength = array(
            1,    1,    2,    0,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    3,    1,    1,    1,    1,
</codefragment>
  </duplication>
  <duplication lines="271" tokens="1154">
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php" line="834"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php" line="936"/>
    <codefragment>            3,    3,    3,    6,    3,    1,    1,    2,    1
    );

    protected function initReduceCallbacks() {
        $this-&gt;reduceCallbacks = [
            0 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            1 =&gt; function ($stackPos) {
                 $this-&gt;semValue = $this-&gt;handleNamespaces($this-&gt;semStack[$stackPos-(1-1)]);
            },
            2 =&gt; function ($stackPos) {
                 if (is_array($this-&gt;semStack[$stackPos-(2-2)])) { $this-&gt;semValue = array_merge($this-&gt;semStack[$stackPos-(2-1)], $this-&gt;semStack[$stackPos-(2-2)]); } else { $this-&gt;semStack[$stackPos-(2-1)][] = $this-&gt;semStack[$stackPos-(2-2)]; $this-&gt;semValue = $this-&gt;semStack[$stackPos-(2-1)]; };
            },
            3 =&gt; function ($stackPos) {
                 $this-&gt;semValue = array();
            },
            4 =&gt; function ($stackPos) {
                 $startAttributes = $this-&gt;lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\Nop($startAttributes + $this-&gt;endAttributes); } else { $nop = null; };
            if ($nop !== null) { $this-&gt;semStack[$stackPos-(1-1)][] = $nop; } $this-&gt;semValue = $this-&gt;semStack[$stackPos-(1-1)];
            },
            5 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            6 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            7 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            8 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            9 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            10 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            11 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            12 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            13 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            14 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            15 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            16 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            17 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            18 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            19 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            20 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            21 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            22 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            23 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            24 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            25 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            26 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            27 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            28 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            29 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            30 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            31 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            32 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            33 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            34 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            35 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            36 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            37 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            38 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            39 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            40 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            41 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            42 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            43 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            44 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            45 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            46 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            47 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            48 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            49 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            50 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            51 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            52 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            53 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            54 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            55 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            56 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            57 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            58 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            59 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            60 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            61 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            62 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            63 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            64 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            65 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            66 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            67 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            68 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            69 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            70 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            71 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            72 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            73 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            74 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            75 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            76 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            77 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            78 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            79 =&gt; function ($stackPos) {
                $this-&gt;semValue = $this-&gt;semStack[$stackPos];
            },
            80 =&gt; function ($stackPos) {
                 $this-&gt;semValue = new Node\Identifier($this-&gt;semStack[$stackPos-(1-1)], $this-&gt;startAttributeStack[$stackPos-(1-1)] + $this-&gt;endAttributes);
            },
            81 =&gt; function ($stackPos) {
                 $this-&gt;semValue = new Node\Identifier($this-&gt;semStack[$stackPos-(1-1)], $this-&gt;startAttributeStack[$stackPos-(1-1)] + $this-&gt;endAttributes);
            },
            82 =&gt; function ($stackPos) {
                 $this-&gt;semValue = new Node\Identifier($this-&gt;semStack[$stackPos-(1-1)], $this-&gt;startAttributeStack[$stackPos-(1-1)] + $this-&gt;endAttributes);
            },
            83 =&gt; function ($stackPos) {
                 $this-&gt;semValue = new Node\Identifier($this-&gt;semStack[$stackPos-(1-1)], $this-&gt;startAttributeStack[$stackPos-(1-1)] + $this-&gt;endAttributes);
            },
            84 =&gt; function ($stackPos) {
                 $this-&gt;semValue = array($this-&gt;semStack[$stackPos-(1-1)]);
            },
            85 =&gt; function ($stackPos) {
                 $this-&gt;semStack[$stackPos-(3-1)][] = $this-&gt;semStack[$stackPos-(3-3)]; $this-&gt;semValue = $this-&gt;semStack[$stackPos-(3-1)];
            },
            86 =&gt; function ($stackPos) {
                 $this-&gt;semValue = new Name($this-&gt;semStack[$stackPos-(1-1)], $this-&gt;startAttributeStack[$stackPos-(1-1)] + $this-&gt;endAttributes);
            },
            87 =&gt; function ($stackPos) {
                 $this-&gt;semValue = new Expr\Variable(substr($this-&gt;semStack[$stackPos-(1-1)], 1), $this-&gt;startAttributeStack[$stackPos-(1-1)] + $this-&gt;endAttributes);
            },
            88 =&gt; function ($stackPos) {
</codefragment>
  </duplication>
  <duplication lines="7" tokens="84">
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php" line="1270"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php" line="1339"/>
    <codefragment>            141 =&gt; function ($stackPos) {

        if ($this-&gt;semStack[$stackPos-(3-2)]) {
            $this-&gt;semValue = $this-&gt;semStack[$stackPos-(3-2)]; $attrs = $this-&gt;startAttributeStack[$stackPos-(3-1)]; $stmts = $this-&gt;semValue; if (!empty($attrs['comments'])) {$stmts[0]-&gt;setAttribute('comments', array_merge($attrs['comments'], $stmts[0]-&gt;getAttribute('comments', []))); };
        } else {
            $startAttributes = $this-&gt;startAttributeStack[$stackPos-(3-1)]; if (isset($startAttributes['comments'])) { $this-&gt;semValue = new Stmt\Nop($startAttributes + $this-&gt;endAttributes); } else { $this-&gt;semValue = null; };
            if (null === $this-&gt;semValue) { $this-&gt;semValue = array(); }
</codefragment>
  </duplication>
  <duplication lines="54" tokens="83">
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Builder/Property.php" line="22"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php" line="23"/>
    <codefragment>    public function __construct(string $name) {
        $this-&gt;name = $name;
    }

    /**
     * Makes the property public.
     *
     * @return $this The builder instance (for fluid interface)
     */
    public function makePublic() {
        $this-&gt;flags = BuilderHelpers::addModifier($this-&gt;flags, Stmt\Class_::MODIFIER_PUBLIC);

        return $this;
    }

    /**
     * Makes the property protected.
     *
     * @return $this The builder instance (for fluid interface)
     */
    public function makeProtected() {
        $this-&gt;flags = BuilderHelpers::addModifier($this-&gt;flags, Stmt\Class_::MODIFIER_PROTECTED);

        return $this;
    }

    /**
     * Makes the property private.
     *
     * @return $this The builder instance (for fluid interface)
     */
    public function makePrivate() {
        $this-&gt;flags = BuilderHelpers::addModifier($this-&gt;flags, Stmt\Class_::MODIFIER_PRIVATE);

        return $this;
    }

    /**
     * Makes the property static.
     *
     * @return $this The builder instance (for fluid interface)
     */
    public function makeStatic() {
        $this-&gt;flags = BuilderHelpers::addModifier($this-&gt;flags, Stmt\Class_::MODIFIER_STATIC);

        return $this;
    }

    /**
     * Sets default value for the property.
     *
     * @param mixed $value Default value to use
     *
     * @return $this The builder instance (for fluid interface)
</codefragment>
  </duplication>
  <duplication lines="38" tokens="83">
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php" line="40"/>
    <file path="/home/feighen/workspace/ussd/src/vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php" line="107"/>
    <codefragment>                new Expr\ConstFetch(new Node\Name('false'))
            ],
            [
                31415,
                new Scalar\LNumber(31415)
            ],
            [
                3.1415,
                new Scalar\DNumber(3.1415)
            ],
            [
                'Hallo World',
                new Scalar\String_('Hallo World')
            ],
            [
                [1, 2, 3],
                new Expr\Array_([
                    new Expr\ArrayItem(new Scalar\LNumber(1)),
                    new Expr\ArrayItem(new Scalar\LNumber(2)),
                    new Expr\ArrayItem(new Scalar\LNumber(3)),
                ])
            ],
            [
                ['foo' =&gt; 'bar', 'bar' =&gt; 'foo'],
                new Expr\Array_([
                    new Expr\ArrayItem(
                        new Scalar\String_('bar'),
                        new Scalar\String_('foo')
                    ),
                    new Expr\ArrayItem(
                        new Scalar\String_('foo'),
                        new Scalar\String_('bar')
                    ),
                ])
            ],
            [
                new Scalar\MagicConst\Dir,
                new Scalar\MagicConst\Dir
</codefragment>
  </duplication>
  <duplication lines="40" tokens="144">
    <file path="/home/feighen/workspace/ussd/src/vendor/laravail/adr/src/Adr/routes/web.php" line="16"/>
    <file path="/home/feighen/workspace/ussd/src/routes/web.php" line="29"/>
    <codefragment>Route::group(['namespace' =&gt; 'Auth'], function() {

    Route::group(['middleware' =&gt; 'guest'], function() {

        // Login Routes
        $this-&gt;get('login', LoginShowAction::class)
             -&gt;name('login.show');
        $this-&gt;post('login', LoginStoreAction::class)
             -&gt;name('login.store');

        // Registration Routes
        $this-&gt;get('register', RegisterShowAction::class)
             -&gt;name('register.show');
        $this-&gt;post('register', RegisterStoreAction::class)
             -&gt;name('register.store');

        // Password Reset Routes
        $this-&gt;get('password/reset', PasswordShowAction::class)
             -&gt;name('password.request');
        $this-&gt;post('password/email', PasswordStoreAction::class)
             -&gt;name('password.email');
        $this-&gt;get('password/reset/{token}', ResetShowAction::class)
             -&gt;name('password.reset');
        $this-&gt;post('password/reset', ResetStoreAction::class);
    });

    // Logout Route
    $this-&gt;get('logout', LogoutAction::class)
         -&gt;middleware('auth')
         -&gt;name('logout');
});

Route::group(['middleware' =&gt; 'auth'], function() {
    Route::get('/dashboard', Dashboard\IndexAction::class)
        -&gt;name('dashboard');

    Route::get('/account/settings', Account\SettingEditAction::class)
        -&gt;name('settings.edit');
    Route::post('/account/settings', Account\SettingUpdateAction::class)
        -&gt;name('settings.update');
</codefragment>
  </duplication>
</pmd-cpd>
